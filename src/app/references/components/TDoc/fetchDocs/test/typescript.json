{
	"meta": {
		"typedocBetterJsonVersion": "0.5.0"
	},
	"functions": [
		{
			"kind": "function",
			"name": "approveErc20Allowance",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractToApprove",
							"type": "ContractWrapper<any>"
						},
						{
							"name": "currencyAddress",
							"type": "string"
						},
						{
							"name": "price",
							"type": "BigNumber"
						},
						{
							"name": "quantity",
							"type": "BigNumberish"
						},
						{
							"name": "tokenDecimals",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<void>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/approveErc20Allowance.ts#L5"
		},
		{
			"kind": "function",
			"name": "biconomySendFunction",
			"signatures": [
				{
					"parameters": [
						{
							"name": "transaction",
							"type": "GaslessTransaction"
						},
						{
							"name": "signer",
							"type": "Signer"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "gaslessOptions",
							"type": "({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L955"
		},
		{
			"kind": "function",
			"name": "checkClientIdOrSecretKey",
			"signatures": [
				{
					"parameters": [
						{
							"name": "message",
							"type": "string"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "void"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/utils/apiKey.ts#L2"
		},
		{
			"kind": "function",
			"name": "cleanCurrencyAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "currencyAddress",
							"type": "string"
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/cleanCurrencyAddress.ts#L4"
		},
		{
			"kind": "function",
			"name": "computeDeploymentAddress",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Pre-compute a contract's deployment address for a CREATE2 deployment."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "bytecode",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Creation bytecode of the contract to deploy"
										}
									]
								}
							]
						},
						{
							"name": "encodedArgs",
							"type": "BytesLike",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Abi-encoded constructor params"
										}
									]
								}
							]
						},
						{
							"name": "create2FactoryAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The create2 factory address to use"
										}
									]
								}
							]
						},
						{
							"name": "salt",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/computeDeploymentAddress.ts#L12"
		},
		{
			"kind": "function",
			"name": "computeDeploymentInfo",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractType",
							"type": "DeployedContractType"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "create2Factory",
							"type": "string"
						},
						{
							"name": "contractOptions",
							"type": "ContractOptions",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<DeploymentPreset>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/computeDeploymentInfo.ts#L26"
		},
		{
			"kind": "function",
			"name": "constructAbiFromBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "bytecode",
							"type": "string"
						}
					],
					"returns": {
						"type": "any[]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/getAllDetectedFeatures.ts#L31"
		},
		{
			"kind": "function",
			"name": "convertParamValues",
			"signatures": [
				{
					"parameters": [
						{
							"name": "constructorParamTypes",
							"type": "string[]"
						},
						{
							"name": "constructorParamValues",
							"type": "any[]"
						}
					],
					"returns": {
						"type": "any[]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/convertParamValues.ts#L4"
		},
		{
			"kind": "function",
			"name": "createTransactionBatches",
			"signatures": [
				{
					"parameters": [
						{
							"name": "transactions",
							"type": "PrecomputedDeploymentTransaction[]"
						},
						{
							"name": "upperGasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "PrecomputedDeploymentTransaction[][]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/createTransactionBatches.ts#L5"
		},
		{
			"kind": "function",
			"name": "defaultGaslessSendFunction",
			"signatures": [
				{
					"parameters": [
						{
							"name": "transaction",
							"type": "GaslessTransaction"
						},
						{
							"name": "signer",
							"type": "Signer"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "gaslessOptions",
							"type": "({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L875"
		},
		{
			"kind": "function",
			"name": "defenderSendFunction",
			"signatures": [
				{
					"parameters": [
						{
							"name": "transaction",
							"type": "GaslessTransaction"
						},
						{
							"name": "signer",
							"type": "Signer"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "gaslessOptions",
							"type": "({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L984"
		},
		{
			"kind": "function",
			"name": "deployContractDeterministic",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Deploy a contract at a deterministic address, using Create2 method\nAddress depends on the Create2 factory address."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "transaction",
							"type": "PrecomputedDeploymentTransaction"
						},
						{
							"name": "options",
							"type": "DeployOptions",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<void>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployContractDeterministic.ts#L18"
		},
		{
			"kind": "function",
			"name": "deployContractDeterministicRaw",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Deploy a contract at a deterministic address, using Create2 method\nAddress depends on the Create2 factory address."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "bytecode",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The bytecode to deploy"
										}
									]
								}
							]
						},
						{
							"name": "encodedArgs",
							"type": "BytesLike",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The encoded constructor args to use"
										}
									]
								}
							]
						},
						{
							"name": "create2FactoryAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The create2 factory address to use"
										}
									]
								}
							]
						},
						{
							"name": "options",
							"type": "DeployOptions",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "predictedAddress",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<void>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployContractDeterministicRaw.ts#L23"
		},
		{
			"kind": "function",
			"name": "deployCreate2Factory",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Deploy Nick's Create2 factory on a given network.\nDeployment is keyless. Signer is needed to fund the keyless signer address.\nRef: https://github.com/Arachnid/deterministic-deployment-proxy"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "options",
							"type": "DeployOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployCreate2Factory.ts#L18"
		},
		{
			"kind": "function",
			"name": "deployWithThrowawayDeployer",
			"signatures": [
				{
					"parameters": [
						{
							"name": "signer",
							"type": "Signer"
						},
						{
							"name": "transactions",
							"type": "PrecomputedDeploymentTransaction[]"
						},
						{
							"name": "options",
							"type": "DeployOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<void>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployWithThrowawayDeployer.ts#L7"
		},
		{
			"kind": "function",
			"name": "detectFeaturesFromBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "bytecode",
							"type": "string"
						},
						{
							"name": "features",
							"type": "Record<string, Feature>"
						}
					],
					"returns": {
						"type": "Record<string, FeatureWithEnabled>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/detectFeatures.ts#L34"
		},
		{
			"kind": "function",
			"name": "directDeployDeterministic",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Direct deploy a contract at a deterministic address, using Create2 method\nAddress depends on the Create2 factory address and salt (if provided)."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "bytecode",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The bytecode to deploy"
										}
									]
								}
							]
						},
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The abi to use"
										}
									]
								}
							]
						},
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "constructorArgs",
							"type": "any[]",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The constructor args to use"
										}
									]
								}
							]
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The salt to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L33"
		},
		{
			"kind": "function",
			"name": "directDeployDeterministicPublished",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Direct deploy a contract at a deterministic address, using Create2 method\nAddress depends on the Create2 factory address and salt (if provided)."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractName",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The name of the contract to deploy"
										}
									]
								}
							]
						},
						{
							"name": "publisherAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The publisher address to use"
										}
									]
								}
							]
						},
						{
							"name": "contractVersion",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The contract version to use"
										}
									]
								}
							]
						},
						{
							"name": "constructorArgs",
							"type": "any[]",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The constructor args to use"
										}
									]
								}
							]
						},
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The storage to use"
										}
									]
								}
							]
						},
						{
							"name": "clientId",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The client id to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The secret key to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The salt to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L167"
		},
		{
			"kind": "function",
			"name": "directDeployDeterministicWithUri",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Direct deploy a contract at a deterministic address, using Create2 method\nAddress depends on the Create2 factory address and salt (if provided)."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "publishMetadataUri",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The metadata uri to use"
										}
									]
								}
							]
						},
						{
							"name": "signer",
							"type": "Signer",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The signer to use"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The storage to use"
										}
									]
								}
							]
						},
						{
							"name": "constructorArgs",
							"type": "any[]",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The constructor args to use"
										}
									]
								}
							]
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The salt to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gasLimit",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L124"
		},
		{
			"kind": "function",
			"name": "engineSendFunction",
			"signatures": [
				{
					"parameters": [
						{
							"name": "transaction",
							"type": "GaslessTransaction"
						},
						{
							"name": "signer",
							"type": "Signer"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "gaslessOptions",
							"type": "({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L903"
		},
		{
			"kind": "function",
			"name": "estimateGasForDeploy",
			"signatures": [
				{
					"parameters": [
						{
							"name": "initCode",
							"type": "string"
						}
					],
					"returns": {
						"type": "number"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/estimateGasForDeploy.ts#L3"
		},
		{
			"kind": "function",
			"name": "fetchAndCacheDeployMetadata",
			"signatures": [
				{
					"parameters": [
						{
							"name": "publishMetadataUri",
							"type": "string"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						}
					],
					"returns": {
						"type": "Promise<DeployMetadata>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/fetchAndCacheDeployMetadata.ts#L8"
		},
		{
			"kind": "function",
			"name": "fetchContractMetadataFromBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string"
						},
						{
							"name": "chainId",
							"type": "number"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "sdkOptions",
							"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
						}
					],
					"returns": {
						"type": "Promise<(undefined) | ({ abi: Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>; info: { title?: string | undefined; author?: string | undefined; details?: string | undefined; notice?: string | undefined; }; isPartialAbi: boolean; licenses: string[]; metadata: Record<string, any>; name: string })>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/metadata-resolver.ts#L96"
		},
		{
			"kind": "function",
			"name": "fetchPublishedContractFromPolygon",
			"signatures": [
				{
					"parameters": [
						{
							"name": "publisherAddress",
							"type": "string"
						},
						{
							"name": "contractName",
							"type": "string"
						},
						{
							"name": "version",
							"type": "string"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<{ id: string; metadataUri: string; timestamp: string }>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/fetchPublishedContractFromPolygon.ts#L16"
		},
		{
			"kind": "function",
			"name": "fetchSnapshotEntryForAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string"
						},
						{
							"name": "merkleRoot",
							"type": "string"
						},
						{
							"name": "merkleMetadata",
							"type": "(undefined) | (Record<string, string>)"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "snapshotFormatVersion",
							"type": "SnapshotFormatVersion"
						}
					],
					"returns": {
						"type": "Promise<(SnapshotEntryWithProof) | (null)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/claim-conditions/fetchSnapshotEntryForAddress.ts#L12"
		},
		{
			"kind": "function",
			"name": "formatCompilerMetadata",
			"signatures": [
				{
					"parameters": [
						{
							"name": "metadata",
							"type": "any"
						}
					],
					"returns": {
						"type": "PublishedMetadata"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/fetchContractMetadata.ts#L31"
		},
		{
			"kind": "function",
			"name": "getAllDetectedExtensionNames",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Return all the detected extension names in the abi"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "parsed array of abi entries"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "string[]",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "array of all detected features names"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/getAllDetectedFeatureNames.ts#L25"
		},
		{
			"kind": "function",
			"name": "getAllDetectedExtensions",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Return all the detected extensions in the abi"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "parsed array of abi entries"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "ExtensionWithEnabled[]",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "array of all detected extensions with full information on each feature"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/getAllDetectedFeatures.ts#L47"
		},
		{
			"kind": "function",
			"name": "getAllDetectedExtensionsFromBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "bytecode",
							"type": "string"
						}
					],
					"returns": {
						"type": "FeatureWithEnabled[]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/getAllDetectedFeatures.ts#L23"
		},
		{
			"kind": "function",
			"name": "getBlock",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get a specific block from a given network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "params",
							"type": "GetBlockParams"
						}
					],
					"returns": {
						"type": "Promise<Block>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the block for the given block number / block tag"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const block = await getBlock({\n network: \"ethereum\",\n block: 12345678\n});"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L59"
		},
		{
			"kind": "function",
			"name": "getBlockNumber",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the latest block number from a given network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "params",
							"type": "SharedBlockParams"
						}
					],
					"returns": {
						"type": "Promise<number>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the latest block number"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const block = await getBlockNumber({\n network: \"ethereum\"\n});"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L30"
		},
		{
			"kind": "function",
			"name": "getBlockWithTransactions",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get a specific block (with the transactions contained in it) from a given network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "params",
							"type": "GetBlockWithTransactionsParams"
						}
					],
					"returns": {
						"type": "Promise<BlockWithTransactions>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the block for the given block number / block tag"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const block = await getBlockWithTransactions({\n network: \"ethereum\",\n block: 12345678\n});"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L110"
		},
		{
			"kind": "function",
			"name": "getCachedAbiForContract",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string"
						}
					],
					"returns": {
						"type": "(ContractInterface) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/abi.ts#L4"
		},
		{
			"kind": "function",
			"name": "getChainIdFromNetwork",
			"signatures": [
				{
					"parameters": [
						{
							"name": "network",
							"type": "ChainOrRpcUrl"
						},
						{
							"name": "options",
							"type": "{ clientId: string; gasSettings: { maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }; gasless: ({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }"
						}
					],
					"returns": {
						"type": "number"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/urls.ts#L82"
		},
		{
			"kind": "function",
			"name": "getChainIdOrName",
			"signatures": [
				{
					"parameters": [
						{
							"name": "network",
							"type": "NetworkInput"
						}
					],
					"returns": {
						"type": "Promise<(number) | (string)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/urls.ts#L112"
		},
		{
			"kind": "function",
			"name": "getContract",
			"signatures": [
				{
					"parameters": [
						{
							"name": "params",
							"type": "GetContractParams<TContractType>"
						}
					],
					"returns": {
						"type": "Promise<ReturnedContractType<TContractType>>"
					},
					"typeParameters": [
						{
							"name": "TContractType",
							"extendsType": "(\"pack\") | (\"token\") | (\"edition\") | (\"split\") | (\"vote\") | (\"edition-drop\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"signature-drop\") | (\"token-drop\")"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getContract.ts#L36"
		},
		{
			"kind": "function",
			"name": "getContractFromAbi",
			"signatures": [
				{
					"parameters": [
						{
							"name": "params",
							"type": "GetContractFromAbiParams"
						}
					],
					"returns": {
						"type": "Promise<SmartContractType>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getContractFromAbi.ts#L26"
		},
		{
			"kind": "function",
			"name": "getContractName",
			"signatures": [
				{
					"parameters": [
						{
							"name": "type",
							"type": "(\"pack\") | (\"token\") | (\"edition\") | (\"split\") | (\"vote\") | (\"edition-drop\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"signature-drop\") | (\"token-drop\")"
						}
					],
					"returns": {
						"type": "(string) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L713"
		},
		{
			"kind": "function",
			"name": "getCreate2FactoryDeploymentInfo",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"parameters": [
						{
							"name": "chainId",
							"type": "number"
						},
						{
							"name": "gasOptions",
							"type": "{ gasLimit: number; gasPrice: number }"
						}
					],
					"returns": {
						"type": "KeylessDeploymentInfo"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/getCreate2FactoryDeploymentInfo.ts#L12"
		},
		{
			"kind": "function",
			"name": "getDefaultGasOverrides",
			"signatures": [
				{
					"parameters": [
						{
							"name": "provider",
							"type": "Provider"
						}
					],
					"returns": {
						"type": "Promise<({ gasPrice: undefined; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined }) | ({ gasPrice: undefined; maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber }) | ({ gasPrice: BigNumber; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined })>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/gas-price.ts#L11"
		},
		{
			"kind": "function",
			"name": "getDynamicFeeData",
			"signatures": [
				{
					"parameters": [
						{
							"name": "provider",
							"type": "JsonRpcProvider"
						}
					],
					"returns": {
						"type": "Promise<FeeData>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/gas-price.ts#L37"
		},
		{
			"kind": "function",
			"name": "getGasPrice",
			"signatures": [
				{
					"parameters": [
						{
							"name": "provider",
							"type": "Provider"
						}
					],
					"returns": {
						"type": "Promise<BigNumber>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/gas-price.ts#L87"
		},
		{
			"kind": "function",
			"name": "getKeylessTxn",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Generate a transaction to be sent with a keyless signer."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "transaction",
							"type": "UnsignedTransaction",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Unsigned transaction object"
										}
									]
								}
							]
						},
						{
							"name": "signature",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Signature bytes"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "KeylessTransaction"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/getKeylessTxn.ts#L11"
		},
		{
			"kind": "function",
			"name": "getNativeTokenByChainId",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Returns the native token for a given chain"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "chainId",
							"type": "ChainId",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the chain id"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "NativeToken"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/currency.ts#L216"
		},
		{
			"kind": "function",
			"name": "getRpcUrl",
			"signatures": [
				{
					"parameters": [
						{
							"name": "network",
							"type": "string"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/constants/urls.ts#L1"
		},
		{
			"kind": "function",
			"name": "getThirdwebContractAddress",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"parameters": [
						{
							"name": "contractName",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The name of the contract to predict the address for"
										}
									]
								}
							]
						},
						{
							"name": "chainId",
							"type": "number",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The chain id to use"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The storage to use"
										}
									]
								}
							]
						},
						{
							"name": "contractVersion",
							"type": "string"
						},
						{
							"name": "clientId",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The client id to use"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/getThirdwebContractAddress.ts#L15"
		},
		{
			"kind": "function",
			"name": "getTrustedForwarders",
			"signatures": [
				{
					"parameters": [
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "contractName",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string[]>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/deploy.ts#L195"
		},
		{
			"kind": "function",
			"name": "hasERC20Allowance",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractToApprove",
							"type": "ContractWrapper<any>"
						},
						{
							"name": "currencyAddress",
							"type": "string"
						},
						{
							"name": "value",
							"type": "BigNumber"
						}
					],
					"returns": {
						"type": "Promise<boolean>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/hasERC20Allowance.ts#L5"
		},
		{
			"kind": "function",
			"name": "isChainConfig",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Check whether a NetworkInput value is a Chain config (naively, without parsing)"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "network",
							"type": "NetworkInput"
						}
					],
					"returns": {
						"type": "network is (({ chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; rpc: string[]; slug: string }) | (Chain))"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/urls.ts#L138"
		},
		{
			"kind": "function",
			"name": "isDowngradeVersion",
			"signatures": [
				{
					"parameters": [
						{
							"name": "current",
							"type": "string"
						},
						{
							"name": "next",
							"type": "string"
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/version-checker.ts#L61"
		},
		{
			"kind": "function",
			"name": "isExtensionEnabled",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Checks whether the given ABI supports a given extension"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The abi to check"
										}
									]
								}
							]
						},
						{
							"name": "featureName",
							"type": "(\"ERC1155\") | (\"ERC721\") | (\"ERC20ClaimConditionsV1\") | (\"ERC20ClaimConditionsV2\") | (\"ERC20ClaimPhasesV2\") | (\"ERC20ClaimPhasesV1\") | (\"ERC20Burnable\") | (\"ERC20SignatureMintable\") | (\"ERC20BatchMintable\") | (\"ERC20Mintable\") | (\"ERC20Permit\") | (\"ERC20\") | (\"ERC721Burnable\") | (\"ERC721Revealable\") | (\"ERC721TieredDrop\") | (\"ERC721ClaimConditionsV1\") | (\"ERC721ClaimConditionsV2\") | (\"ERC721ClaimPhasesV1\") | (\"ERC721ClaimPhasesV2\") | (\"ERC721ClaimCustom\") | (\"ERC721ClaimZora\") | (\"ERC721LazyMintable\") | (\"ERC721BatchMintable\") | (\"ERC721Mintable\") | (\"ERC721SignatureMintV2\") | (\"ERC721SignatureMintV1\") | (\"ERC721Enumerable\") | (\"ERC721AQueryable\") | (\"ERC721Supply\") | (\"ERC721SharedMetadata\") | (\"ERC721LoyaltyCard\") | (\"ERC721UpdatableMetadata\") | (\"ERC1155Burnable\") | (\"ERC1155ClaimConditionsV1\") | (\"ERC1155ClaimConditionsV2\") | (\"ERC1155ClaimPhasesV2\") | (\"ERC1155ClaimPhasesV1\") | (\"ERC1155ClaimCustom\") | (\"ERC1155Revealable\") | (\"ERC1155LazyMintableV2\") | (\"ERC1155LazyMintableV1\") | (\"ERC1155SignatureMintable\") | (\"ERC1155BatchMintable\") | (\"ERC1155Mintable\") | (\"ERC1155Enumerable\") | (\"ERC1155UpdatableMetadata\") | (\"ERC1155Supply\") | (\"Royalty\") | (\"PrimarySale\") | (\"PlatformFee\") | (\"PermissionsEnumerable\") | (\"Permissions\") | (\"ContractMetadata\") | (\"AppURI\") | (\"Ownable\") | (\"Gasless\") | (\"PackVRF\") | (\"PluginRouter\") | (\"DynamicContract\") | (\"DirectListings\") | (\"EnglishAuctions\") | (\"Offers\") | (\"AccountFactory\") | (\"AccountPermissionsV1\") | (\"AccountPermissions\") | (\"Account\") | (\"AirdropERC20\") | (\"AirdropERC721\") | (\"AirdropERC1155\") | (\"Fallback\")",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The feature name to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/isFeatureEnabled.ts#L28"
		},
		{
			"kind": "function",
			"name": "isFeatureEnabled",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Checks whether the given ABI supports a given feature"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The abi to check"
										}
									]
								}
							]
						},
						{
							"name": "featureName",
							"type": "(\"ERC1155\") | (\"ERC721\") | (\"ERC20ClaimConditionsV1\") | (\"ERC20ClaimConditionsV2\") | (\"ERC20ClaimPhasesV2\") | (\"ERC20ClaimPhasesV1\") | (\"ERC20Burnable\") | (\"ERC20SignatureMintable\") | (\"ERC20BatchMintable\") | (\"ERC20Mintable\") | (\"ERC20Permit\") | (\"ERC20\") | (\"ERC721Burnable\") | (\"ERC721Revealable\") | (\"ERC721TieredDrop\") | (\"ERC721ClaimConditionsV1\") | (\"ERC721ClaimConditionsV2\") | (\"ERC721ClaimPhasesV1\") | (\"ERC721ClaimPhasesV2\") | (\"ERC721ClaimCustom\") | (\"ERC721ClaimZora\") | (\"ERC721LazyMintable\") | (\"ERC721BatchMintable\") | (\"ERC721Mintable\") | (\"ERC721SignatureMintV2\") | (\"ERC721SignatureMintV1\") | (\"ERC721Enumerable\") | (\"ERC721AQueryable\") | (\"ERC721Supply\") | (\"ERC721SharedMetadata\") | (\"ERC721LoyaltyCard\") | (\"ERC721UpdatableMetadata\") | (\"ERC1155Burnable\") | (\"ERC1155ClaimConditionsV1\") | (\"ERC1155ClaimConditionsV2\") | (\"ERC1155ClaimPhasesV2\") | (\"ERC1155ClaimPhasesV1\") | (\"ERC1155ClaimCustom\") | (\"ERC1155Revealable\") | (\"ERC1155LazyMintableV2\") | (\"ERC1155LazyMintableV1\") | (\"ERC1155SignatureMintable\") | (\"ERC1155BatchMintable\") | (\"ERC1155Mintable\") | (\"ERC1155Enumerable\") | (\"ERC1155UpdatableMetadata\") | (\"ERC1155Supply\") | (\"Royalty\") | (\"PrimarySale\") | (\"PlatformFee\") | (\"PermissionsEnumerable\") | (\"Permissions\") | (\"ContractMetadata\") | (\"AppURI\") | (\"Ownable\") | (\"Gasless\") | (\"PackVRF\") | (\"PluginRouter\") | (\"DynamicContract\") | (\"DirectListings\") | (\"EnglishAuctions\") | (\"Offers\") | (\"AccountFactory\") | (\"AccountPermissionsV1\") | (\"AccountPermissions\") | (\"Account\") | (\"AirdropERC20\") | (\"AirdropERC721\") | (\"AirdropERC1155\") | (\"Fallback\")",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The feature name to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "boolean"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "use isExtensionEnabled instead"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/isFeatureEnabled.ts#L14"
		},
		{
			"kind": "function",
			"name": "isNativeToken",
			"signatures": [
				{
					"parameters": [
						{
							"name": "tokenAddress",
							"type": "string"
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/isNativeToken.ts#L4"
		},
		{
			"kind": "function",
			"name": "matchesAbiFromBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractBytecode",
							"type": "string"
						},
						{
							"name": "featureAbis",
							"type": "readonly Array<Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>"
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/hasMatchingAbi.ts#L43"
		},
		{
			"kind": "function",
			"name": "normalizeAmount",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractWrapper",
							"type": "ContractWrapper<BaseERC20>"
						},
						{
							"name": "amount",
							"type": "(string) | (number)"
						}
					],
					"returns": {
						"type": "Promise<BigNumber>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/normalizeAmount.ts#L7"
		},
		{
			"kind": "function",
			"name": "predictAddressDeterministic",
			"signatures": [
				{
					"parameters": [
						{
							"name": "bytecode",
							"type": "string"
						},
						{
							"name": "abi",
							"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "constructorArgs",
							"type": "any[]"
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L207"
		},
		{
			"kind": "function",
			"name": "predictAddressDeterministicPublished",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractName",
							"type": "string"
						},
						{
							"name": "publisherAddress",
							"type": "string"
						},
						{
							"name": "contractVersion",
							"type": "string"
						},
						{
							"name": "constructorArgs",
							"type": "any[]"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L278"
		},
		{
			"kind": "function",
			"name": "predictAddressDeterministicWithUri",
			"signatures": [
				{
					"parameters": [
						{
							"name": "publishMetadataUri",
							"type": "string"
						},
						{
							"name": "provider",
							"type": "Provider"
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
						},
						{
							"name": "constructorArgs",
							"type": "any[]"
						},
						{
							"name": "saltForCreate2",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/deployDirectDeterministic.ts#L254"
		},
		{
			"kind": "function",
			"name": "predictThirdwebContractAddress",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"parameters": [
						{
							"name": "contractName",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The name of the contract to predict the address for"
										}
									]
								}
							]
						},
						{
							"name": "chainId",
							"type": "number",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The chain id to use"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The storage to use"
										}
									]
								}
							]
						},
						{
							"name": "contractVersion",
							"type": "string"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<string>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/predictThirdwebContractAddress.ts#L20"
		},
		{
			"kind": "function",
			"name": "prepareGaslessRequest",
			"signatures": [
				{
					"parameters": [
						{
							"name": "tx",
							"type": "Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>"
						}
					],
					"returns": {
						"type": "Promise<({ body: string; headers: { \"Content-Type\": string; \"x-api-key\": string }; method: string; url: string }) | ({ body: string; method: string; url: string })>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L1313"
		},
		{
			"kind": "function",
			"name": "resolveAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "addressOrEns",
							"type": "string"
						}
					],
					"returns": {
						"type": "Promise<Address>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/ens/resolveAddress.ts#L7"
		},
		{
			"kind": "function",
			"name": "resolveContractUriAndBytecode",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string"
						},
						{
							"name": "provider",
							"type": "Provider"
						}
					],
					"returns": {
						"type": "Promise<{ bytecode: string; uri: (string) | (undefined) }>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/resolveContractUriFromAddress.ts#L18"
		},
		{
			"kind": "function",
			"name": "resolveEns",
			"signatures": [
				{
					"parameters": [
						{
							"name": "ens",
							"type": "string"
						},
						{
							"name": "depth",
							"type": "number"
						}
					],
					"returns": {
						"type": "Promise<(string) | (null)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/ens/resolveEns.ts#L14"
		},
		{
			"kind": "function",
			"name": "resolveImplementation",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Resolve the implementation address of a proxy contract and its bytecode"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "address",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the contract address"
										}
									]
								}
							]
						},
						{
							"name": "provider",
							"type": "Provider",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "RPC provider"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "Promise<{ address: string; bytecode: string }>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the implementation address and its bytecode"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/feature-detection/resolveContractUriFromAddress.ts#L32"
		},
		{
			"kind": "function",
			"name": "setErc20Allowance",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractToApprove",
							"type": "ContractWrapper<any>"
						},
						{
							"name": "value",
							"type": "BigNumber"
						},
						{
							"name": "currencyAddress",
							"type": "string"
						},
						{
							"name": "overrides",
							"type": "any"
						}
					],
					"returns": {
						"type": "Promise<any>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/setErc20Allowance.ts#L6"
		},
		{
			"kind": "function",
			"name": "toDisplayValue",
			"signatures": [
				{
					"parameters": [
						{
							"name": "amount",
							"type": "BigNumberish"
						},
						{
							"name": "decimals",
							"type": "BigNumberish"
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/toDisplayValue.ts#L3"
		},
		{
			"kind": "function",
			"name": "toEther",
			"signatures": [
				{
					"parameters": [
						{
							"name": "amount",
							"type": "BigNumberish"
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/toEther.ts#L3"
		},
		{
			"kind": "function",
			"name": "toUnits",
			"signatures": [
				{
					"parameters": [
						{
							"name": "amount",
							"type": "(string) | (number)"
						},
						{
							"name": "decimals",
							"type": "BigNumberish"
						}
					],
					"returns": {
						"type": "BigNumber"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/toUnits.ts#L5"
		},
		{
			"kind": "function",
			"name": "toWei",
			"signatures": [
				{
					"parameters": [
						{
							"name": "amount",
							"type": "(string) | (number)"
						}
					],
					"returns": {
						"type": "BigNumber"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/currency/toWei.ts#L5"
		},
		{
			"kind": "function",
			"name": "verify",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Verifies any contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Address of the contract to verify"
										}
									]
								}
							]
						},
						{
							"name": "chainId",
							"type": "number",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Chain ID of the network"
										}
									]
								}
							]
						},
						{
							"name": "explorerAPIUrl",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explorer API URL"
										}
									]
								}
							]
						},
						{
							"name": "explorerAPIKey",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explorer API Key"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Storage instance"
										}
									]
								}
							]
						},
						{
							"name": "encodedConstructorArgs",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<(string) | (string[])>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "\nconst contractAddress = \"\"\nconst explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\nconst explorerAPIKey = \"\" // Generate API key on the explorer\nconst chainId = 1 // Change according to the network\n\nawait sdk.verifier.verify(\n  contractAddress,\n  chainId,\n  explorerAPIUrl,\n  explorerAPIKey,\n  storage // this could be used from the SDK instance, e.g. sdk.storage\n);"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/verification.ts#L126"
		},
		{
			"kind": "function",
			"name": "verifyThirdwebPrebuiltImplementation",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Verifies a Thirdweb Prebuilt Contract, e.g. Marketplace, DropERC721, etc"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractName",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Name of the contract to verify"
										}
									]
								}
							]
						},
						{
							"name": "chainId",
							"type": "number",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Chain ID of the network"
										}
									]
								}
							]
						},
						{
							"name": "explorerAPIUrl",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explorer API URL"
										}
									]
								}
							]
						},
						{
							"name": "explorerAPIKey",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explorer API Key"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Storage instance"
										}
									]
								}
							]
						},
						{
							"name": "contractVersion",
							"type": "string"
						},
						{
							"name": "clientId",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "secretKey",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "constructorArgs",
							"type": "ConstructorParamMap",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<(string) | (string[])>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "\nconst explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\nconst explorerAPIKey = \"\" // Generate API key on the explorer\nconst chainId = 1 // Change according to the network\n\nawait sdk.verifier.verifyThirdwebPrebuiltImplementation(\n  \"DropERC721\",\n  chainId,\n  explorerAPIUrl,\n  explorerAPIKey,\n  storage // this could be used from the SDK instance, e.g. sdk.storage\n);"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/verification.ts#L56"
		},
		{
			"kind": "function",
			"name": "watchBlock",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Watch for new blocks on a given network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "WatchBlockParams"
						}
					],
					"returns": {
						"type": "() => void",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an unsubscribe function that will stop listening for new blocks when called"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "// this will log out the new block every time a new block is finalized\nconst unsubscribe = watchBlock({\n  network: \"ethereum\",\n  onBlock: (block) => {\n    console.log(\"new block\", block);\n  }\n});\n// later on you can call unsubscribe to stop listening for new blocks\nunsubscribe();"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L68"
		},
		{
			"kind": "function",
			"name": "watchBlockNumber",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Watch for a new block number on a given network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "params",
							"type": "WatchBlockNumberParams"
						}
					],
					"returns": {
						"type": "() => void",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an unsubscribe function that will stop listening for new blocks when called"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "// this will log out the new block number every time a new block is finalized\nconst unsubscribe = watchBlockNumber({\n  network: \"ethereum\",\n  onBlockNumber: (blockNumber) => {\n    console.log(\"new block number\", blockNumber);\n  }\n});\n// later on you can call unsubscribe to stop listening for new blocks\nunsubscribe();"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L35"
		},
		{
			"kind": "function",
			"name": "watchBlockWithTransactions",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Watch for new blocks on a given network. (Includes parsed transactions)"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "WatchBlockWithTransactionsParams"
						}
					],
					"returns": {
						"type": "() => void",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an unsubscribe function that will stop listening for new blocks when called"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "// this will log out the new block every time a new block is finalized\nconst unsubscribe = watchBlockWithTransactions({\n  network: \"ethereum\",\n  onBlock: (block) => {\n    console.log(\"new block\", block);\n    console.log(\"new transactions\", block.transactions)\n  }\n});\n// later on you can call unsubscribe to stop listening for new blocks\nunsubscribe();"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L115"
		},
		{
			"kind": "function",
			"name": "watchTransactions",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Watch for transactions to or from a given address."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "WatchTransactionsParams"
						}
					],
					"returns": {
						"type": "() => void",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an unsubscribe function that will stop listening for new transactions when called"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "// this will log out the new transactions every time a new block is finalized\nconst unsubscribe = watchTransactions({\n  network: \"ethereum\",\n  address: \"0x1234\",\n  onTransactions: (transactions) => {\n    console.log(\"new transactions\", transactions);\n  }\n});\n// later on you can call unsubscribe to stop listening for new transactions\nunsubscribe();"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchTransactions.ts#L30"
		}
	],
	"variables": [
		{
			"kind": "variable",
			"name": "ALL_ROLES",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/role.ts#L27",
			"type": "Array<(\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")>",
			"flags": {
				"isPublic": true,
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "APPROVED_IMPLEMENTATIONS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/addresses/APPROVED_IMPLEMENTATIONS.ts#L11",
			"type": "Record<SUPPORTED_CHAIN_ID, Record<DropContract, string>>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "AddressOrEnsSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/AddressOrEnsSchema.ts#L6",
			"type": "ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "AddressSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/AddressSchema.ts#L5",
			"type": "ZodType<string, ZodTypeDef, string>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "BigNumberSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/BigNumberSchema.ts#L4",
			"type": "ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "BigNumberTransformSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/BigNumberSchema.ts#L19",
			"type": "ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, string, (bigint) | (BigNumber)>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "BigNumberishSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/BigNumberSchema.ts#L16",
			"type": "ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "COMMON_FACTORY",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L8",
			"type": "\"0x4e59b44847b379578588920cA78FbF26c0B4956C\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "CONTRACTS_MAP",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L698",
			"type": "{ custom: { contractType: \"custom\"; name: \"SmartContract\"; roles: Array<(\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")>; schema: {  } }; edition: { contractType: \"edition\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Edition>; name: \"TokenERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; \"edition-drop\": { contractType: \"edition-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<EditionDrop>; name: \"DropERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; marketplace: { contractType: \"marketplace\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; name: string; outputs: never[]; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Marketplace>; name: \"Marketplace\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }; \"marketplace-v3\": { contractType: \"marketplace-v3\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>, options?: { clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<MarketplaceV3>; name: \"MarketplaceV3\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }; multiwrap: { contractType: \"multiwrap\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Multiwrap>; name: \"Multiwrap\"; roles: readonly [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; \"nft-collection\": { contractType: \"nft-collection\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTCollection>; name: \"TokenERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; \"nft-drop\": { contractType: \"nft-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTDrop>; name: \"DropERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; pack: { contractType: \"pack\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<Pack>; name: \"Pack\"; roles: readonly [\"admin\", \"minter\", \"asset\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; \"signature-drop\": { contractType: \"signature-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<SignatureDrop>; name: \"SignatureDrop\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }; split: { contractType: \"split\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Split>; name: \"Split\"; roles: readonly [\"admin\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }; token: { contractType: \"token\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Token>; name: \"TokenERC20\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> } }; \"token-drop\": { contractType: \"token-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<TokenDrop>; name: \"DropERC20\"; roles: readonly [\"admin\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }> } }; vote: { contractType: \"vote\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Vote>; name: \"VoteERC20\"; roles: readonly []; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> } } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "custom",
					"type": "{ contractType: \"custom\"; name: \"SmartContract\"; roles: Array<(\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")>; schema: {  } }"
				},
				{
					"kind": "subtype",
					"name": "edition",
					"type": "{ contractType: \"edition\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Edition>; name: \"TokenERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "edition-drop",
					"type": "{ contractType: \"edition-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<EditionDrop>; name: \"DropERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "marketplace",
					"type": "{ contractType: \"marketplace\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; name: string; outputs: never[]; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Marketplace>; name: \"Marketplace\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }"
				},
				{
					"kind": "subtype",
					"name": "marketplace-v3",
					"type": "{ contractType: \"marketplace-v3\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>, options?: { clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<MarketplaceV3>; name: \"MarketplaceV3\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }"
				},
				{
					"kind": "subtype",
					"name": "multiwrap",
					"type": "{ contractType: \"multiwrap\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Multiwrap>; name: \"Multiwrap\"; roles: readonly [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "nft-collection",
					"type": "{ contractType: \"nft-collection\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTCollection>; name: \"TokenERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "nft-drop",
					"type": "{ contractType: \"nft-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTDrop>; name: \"DropERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "pack",
					"type": "{ contractType: \"pack\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<Pack>; name: \"Pack\"; roles: readonly [\"admin\", \"minter\", \"asset\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "signature-drop",
					"type": "{ contractType: \"signature-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<SignatureDrop>; name: \"SignatureDrop\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "split",
					"type": "{ contractType: \"split\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Split>; name: \"Split\"; roles: readonly [\"admin\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }"
				},
				{
					"kind": "subtype",
					"name": "token",
					"type": "{ contractType: \"token\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Token>; name: \"TokenERC20\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "token-drop",
					"type": "{ contractType: \"token-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<TokenDrop>; name: \"DropERC20\"; roles: readonly [\"admin\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }> } }"
				},
				{
					"kind": "subtype",
					"name": "vote",
					"type": "{ contractType: \"vote\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Vote>; name: \"VoteERC20\"; roles: readonly []; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> } }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "CREATE2_FACTORY_BYTECODE",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L1",
			"type": "\"0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "CallOverrideSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/CallOverrideSchema.ts#L6",
			"type": "z.ZodType<CallOverrides>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DEFAULT_PERMISSIONS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L24",
			"type": "{ approvedCallTargets: never[]; expirationDate: BigNumber; nativeTokenLimitPerTransaction: string; startDate: BigNumber }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "approvedCallTargets",
					"type": "never[]"
				},
				{
					"kind": "subtype",
					"name": "expirationDate",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "nativeTokenLimitPerTransaction",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "startDate",
					"type": "BigNumber"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DEPLOYER_ABI",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L13",
			"type": "Array<{ inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }>",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "inputs",
					"type": "Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>"
				},
				{
					"kind": "subtype",
					"name": "stateMutability",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DEPLOYER_BYTECODE",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L11",
			"type": "\"0x60806040526040516107f33803806107f383398101604081905261002291610359565b805160005b818110156100c157828181518110610041576100416104c9565b6020026020010151600001516001600160a01b03163b600014156100af576100ad838281518110610074576100746104c9565b602002602001015160200151848381518110610092576100926104c9565b6020026020010151604001516100c960201b6100091760201c565b505b806100b9816104df565b915050610027565b505050610557565b606061011183836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061011860201b60201c565b9392505050565b6060610127848460008561012f565b949350505050565b6060824710156101955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018c565b600080866001600160a01b031685876040516102089190610508565b60006040518083038185875af1925050503d8060008114610245576040519150601f19603f3d011682016040523d82523d6000602084013e61024a565b606091505b50909250905061025b828286610266565b979650505050505050565b60608315610275575081610111565b8251156102855782518084602001fd5b8160405162461bcd60e51b815260040161018c9190610524565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156102d7576102d761029f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156103055761030561029f565b604052919050565b80516001600160a01b038116811461032457600080fd5b919050565b60005b8381101561034457818101518382015260200161032c565b83811115610353576000848401525b50505050565b6000602080838503121561036c57600080fd5b82516001600160401b038082111561038357600080fd5b818501915085601f83011261039757600080fd5b8151818111156103a9576103a961029f565b8060051b6103b88582016102dd565b91825283810185019185810190898411156103d257600080fd5b86860192505b838310156104bc578251858111156103f05760008081fd5b86016060601f19828d0381018213156104095760008081fd5b6104116102b5565b61041c8b850161030d565b8152604061042b81860161030d565b828d01529284015192898411156104425760008081fd5b83850194508e603f86011261045957600093508384fd5b8b85015193508984111561046f5761046f61029f565b61047f8c84601f870116016102dd565b92508383528e818587010111156104965760008081fd5b6104a5848d8501838801610329565b8101919091528452505091860191908601906103d8565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561050157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161051a818460208701610329565b9190910192915050565b6020815260008251806020840152610543816040850160208701610329565b601f01601f19169190910160400192915050565b61028d806105666000396000f3fe6080604052600080fd5b606061004b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610052565b9392505050565b60606100618484600085610069565b949350505050565b6060824710156100cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100c6565b600080866001600160a01b031685876040516101429190610208565b60006040518083038185875af1925050503d806000811461017f576040519150601f19603f3d011682016040523d82523d6000602084013e610184565b606091505b509150915061019482828661019f565b979650505050505050565b606083156101ae57508161004b565b8251156101be5782518084602001fd5b8160405162461bcd60e51b81526004016100c69190610224565b60005b838110156101f35781810151838201526020016101db565b83811115610202576000848401525b50505050565b6000825161021a8184602087016101d8565b9190910192915050565b60208152600082518060208401526102438160408501602087016101d8565b601f01601f1916919091016040019291505056fea26469706673582212200b524eb8ceaafe6c603273ee859fddbc2d6f1b7860c3d853dcf6f129f9d9371364736f6c634300080c0033\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc1155ContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc1155.ts#L22",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc1155ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc1155.ts#L12",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc1155ContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc1155.ts#L17",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc1155ContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc1155.ts#L27",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc721ContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc721.ts#L22",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc721ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc721.ts#L12",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc721ContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc721.ts#L17",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "DropErc721ContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/drop-erc721.ts#L27",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "EditionDropInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L63",
			"type": "{ contractType: \"edition-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<EditionDrop>; name: \"DropERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"edition-drop\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L87"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<EditionDrop>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L68"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"DropERC1155\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "EditionInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L109",
			"type": "{ contractType: \"edition\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Edition>; name: \"TokenERC1155\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"edition\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L133"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Edition>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L114"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"TokenERC1155\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "EndDateSchema",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Default to 10 years from now"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/RawDateSchema.ts#L23",
			"type": "ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "GAS_LIMIT_FOR_DEPLOYER",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L10",
			"type": "5000000",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "GenericRequest",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L277",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "LINK_TOKEN_ADDRESS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/currency.ts#L244",
			"type": "Record<number, string>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "LOCAL_NODE_PKEY",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "publicly available wallet for local nodes"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/addresses/LOCAL_NODE_PKEY.ts#L4",
			"type": "\"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/marketplace.ts#L12",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/marketplace.ts#L8",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/marketplace.ts#L10",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/marketplace.ts#L17",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L149",
			"type": "{ contractType: \"marketplace\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; name: string; outputs: never[]; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Marketplace>; name: \"Marketplace\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"marketplace\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; name: string; outputs: never[]; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L173"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Marketplace>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L154"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"Marketplace\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"lister\", \"asset\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MarketplaceV3Initializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L190",
			"type": "{ contractType: \"marketplace-v3\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>, options?: { clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<MarketplaceV3>; name: \"MarketplaceV3\"; roles: readonly [\"admin\", \"lister\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"marketplace-v3\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								},
								{
									"name": "options",
									"type": "{ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L214"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<MarketplaceV3>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L195"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"MarketplaceV3\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"lister\", \"asset\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MintRequest1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L248",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MintRequest20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L224",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MintRequest721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L235",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MintRequest721withQuantity",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L263",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "MultiwrapInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L259",
			"type": "{ contractType: \"multiwrap\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Multiwrap>; name: \"Multiwrap\"; roles: readonly [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"multiwrap\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L283"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Multiwrap>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L264"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"Multiwrap\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "NATIVE_TOKENS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/currency.ts#L15",
			"type": "Record<number, NativeToken>",
			"flags": {
				"isPublic": true,
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "NATIVE_TOKEN_ADDRESS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/currency.ts#L9",
			"type": "\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"",
			"flags": {
				"isPublic": true,
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "NFTCollectionInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L298",
			"type": "{ contractType: \"nft-collection\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTCollection>; name: \"TokenERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"nft-collection\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L323"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFTCollection>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L304"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"TokenERC721\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "NFTDropInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L339",
			"type": "{ contractType: \"nft-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<NFTDrop>; name: \"DropERC721\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"nft-drop\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: undefined; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L363"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFTDrop>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L344"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"DropERC721\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PREBUILT_CONTRACTS_APPURI_MAP",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L669",
			"type": "{ edition: \"\"; \"edition-drop\": \"ipfs://QmNm3wRzpKYWo1SRtJfgfxtvudp5p2nXD6EttcsQJHwTmk\"; marketplace: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace.html\"; \"marketplace-v3\": \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace-v3.html\"; multiwrap: \"\"; \"nft-collection\": \"\"; \"nft-drop\": \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\"; pack: \"\"; \"signature-drop\": \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\"; split: \"\"; token: \"\"; \"token-drop\": \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc20.html\"; vote: \"\" }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "edition",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "edition-drop",
					"type": "\"ipfs://QmNm3wRzpKYWo1SRtJfgfxtvudp5p2nXD6EttcsQJHwTmk\""
				},
				{
					"kind": "subtype",
					"name": "marketplace",
					"type": "\"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace.html\""
				},
				{
					"kind": "subtype",
					"name": "marketplace-v3",
					"type": "\"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace-v3.html\""
				},
				{
					"kind": "subtype",
					"name": "multiwrap",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "nft-collection",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "nft-drop",
					"type": "\"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\""
				},
				{
					"kind": "subtype",
					"name": "pack",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "signature-drop",
					"type": "\"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\""
				},
				{
					"kind": "subtype",
					"name": "split",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "token",
					"type": "\"\""
				},
				{
					"kind": "subtype",
					"name": "token-drop",
					"type": "\"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc20.html\""
				},
				{
					"kind": "subtype",
					"name": "vote",
					"type": "\"\""
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PackContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/packs.ts#L18",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PackContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/packs.ts#L10",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PackContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/packs.ts#L13",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PackContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/packs.ts#L23",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PackInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L385",
			"type": "{ contractType: \"pack\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>; initialize: (...__namedParameters: InitalizeParams) => Promise<Pack>; name: \"Pack\"; roles: readonly [\"admin\", \"minter\", \"asset\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"pack\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L410"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Pack>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L391"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"Pack\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"asset\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "PermissionSnapshotSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L50",
			"type": "ZodArray<ZodObject<{ makeAdmin: ZodBoolean; permissions: ZodObject<{ approvedCallTargets: ZodUnion<[ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">, ZodLiteral<\"*\">]>; expirationDate: ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>>; nativeTokenLimitPerTransaction: ZodDefault<ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>>; startDate: ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>> }, \"strip\", ZodTypeAny, { approvedCallTargets: Object; expirationDate: BigNumber; nativeTokenLimitPerTransaction: string; startDate: BigNumber }, { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }>; signer: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { makeAdmin: boolean; permissions: { nativeTokenLimitPerTransaction: string; startDate: BigNumber; expirationDate: BigNumber; approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); }; signer: string }, { makeAdmin: boolean; permissions: { approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); startDate?: number | Date | undefined; expirationDate?: number | Date | undefined; nativeTokenLimitPerTransaction?: string | ... 1 more ... | undefined; }; signer: string }>, \"many\">",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "ProfileSchemaOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L295",
			"type": "ZodObject<{ avatar: ZodOptional<ZodNullable<ZodString>>; bio: ZodOptional<ZodString>; discord: ZodOptional<ZodString>; facebook: ZodOptional<ZodString>; github: ZodOptional<ZodString>; linkedin: ZodOptional<ZodString>; medium: ZodOptional<ZodString>; name: ZodOptional<ZodString>; reddit: ZodOptional<ZodString>; telegram: ZodOptional<ZodString>; twitter: ZodOptional<ZodString>; website: ZodOptional<ZodString> }, \"strip\", ZodTypeAny, { avatar: (null) | (string); bio: string; discord: string; facebook: string; github: string; linkedin: string; medium: string; name: string; reddit: string; telegram: string; twitter: string; website: string }, { avatar: (null) | (string); bio: string; discord: string; facebook: string; github: string; linkedin: string; medium: string; name: string; reddit: string; telegram: string; twitter: string; website: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "ProposalOutputSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L40",
			"type": "ZodObject<{ calldatas: ZodArray<ZodString, \"many\">; description: ZodString; endBlock: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; proposalId: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; proposer: ZodString; signatures: ZodArray<ZodString, \"many\">; startBlock: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; targets: ZodArray<ZodString, \"many\">; values: ZodArray<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, \"many\"> }, \"strip\", ZodTypeAny, { calldatas: string[]; description: string; endBlock: BigNumber; proposalId: BigNumber; proposer: string; signatures: string[]; startBlock: BigNumber; targets: string[]; values: BigNumber[] }, { calldatas: string[]; description: string; endBlock: Object; proposalId: Object; proposer: string; signatures: string[]; startBlock: Object; targets: string[]; values: (string) | (number) | (bigint) | (BigNumber)[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "RawDateSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/RawDateSchema.ts#L4",
			"type": "ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SDKOptionsSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/sdk-options.ts#L8",
			"type": "ZodDefault<ZodObject<{ clientId: ZodOptional<ZodString>; gasSettings: ZodDefault<ZodObject<{ maxPriceInGwei: ZodDefault<ZodNumber>; speed: ZodDefault<ZodEnum<[\"standard\", \"fast\", \"fastest\"]>> }, \"strip\", ZodTypeAny, { maxPriceInGwei: number; speed: (\"standard\") | (\"fast\") | (\"fastest\") }, { maxPriceInGwei: number; speed: (\"standard\") | (\"fast\") | (\"fastest\") }>>; gasless: ZodOptional<ZodUnion<[ZodObject<{ experimentalChainlessSupport: ZodDefault<ZodBoolean>; openzeppelin: ZodObject<{ domainName: ZodDefault<ZodString>; domainVersion: ZodDefault<ZodString>; relayerForwarderAddress: ZodOptional<ZodString>; relayerUrl: ZodString; useEOAForwarder: ZodDefault<ZodBoolean> }, \"strip\", ZodTypeAny, { domainName: string; domainVersion: string; relayerForwarderAddress: string; relayerUrl: string; useEOAForwarder: boolean }, { domainName: string; domainVersion: string; relayerForwarderAddress: string; relayerUrl: string; useEOAForwarder: boolean }> }, \"strip\", ZodTypeAny, { experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }, { experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; } }>, ZodObject<{ biconomy: ZodObject<{ apiId: ZodString; apiKey: ZodString; deadlineSeconds: ZodDefault<ZodNumber> }, \"strip\", ZodTypeAny, { apiId: string; apiKey: string; deadlineSeconds: number }, { apiId: string; apiKey: string; deadlineSeconds: number }> }, \"strip\", ZodTypeAny, { biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }, { biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; } }>, ZodObject<{ engine: ZodObject<{ relayerUrl: ZodEffects<ZodString, string, string> }, \"strip\", ZodTypeAny, { relayerUrl: string }, { relayerUrl: string }> }, \"strip\", ZodTypeAny, { engine: { relayerUrl: string; } }, { engine: { relayerUrl: string; } }>]>>; gatewayUrls: ZodOptional<ZodArray<ZodString, \"many\">>; readonlySettings: ZodOptional<ZodObject<{ chainId: ZodOptional<ZodNumber>; rpcUrl: ZodString }, \"strip\", ZodTypeAny, { chainId: number; rpcUrl: string }, { chainId: number; rpcUrl: string }>>; secretKey: ZodOptional<ZodString>; supportedChains: ZodDefault<ZodArray<ZodObject<{ chainId: ZodNumber; nativeCurrency: ZodObject<{ decimals: ZodNumber; name: ZodString; symbol: ZodString }, \"strip\", ZodTypeAny, { decimals: number; name: string; symbol: string }, { decimals: number; name: string; symbol: string }>; rpc: ZodArray<ZodString, \"many\">; slug: ZodString }, \"strip\", ZodTypeAny, { chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; rpc: string[]; slug: string }, { chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; rpc: string[]; slug: string }>, \"many\">> }, \"strip\", ZodTypeAny, { clientId: string; gasSettings: { maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }; gasless: ({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }, { clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }>>",
			"flags": {
				"isPublic": true,
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SIGNATURE",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/constants.ts#L3",
			"type": "{ r: string; s: string; v: number }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "r",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "s",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "v",
					"type": "number"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SUPPORTED_CHAIN_IDS",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/chains/SUPPORTED_CHAIN_IDS.ts#L7",
			"type": "SUPPORTED_CHAIN_ID[]",
			"flags": {
				"isPublic": true,
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SignatureDropInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L427",
			"type": "{ contractType: \"signature-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<SignatureDrop>; name: \"SignatureDrop\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"signature-drop\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: undefined; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L452"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<SignatureDrop>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L433"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"SignatureDrop\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SignerPermissionRequest",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L85",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SignerPermissionRequestV1",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L74",
			"type": "{ name: string; type: string }[]",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "string"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SignerPermissionsSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L33",
			"type": "ZodObject<{ approvedCallTargets: ZodUnion<[ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">, ZodLiteral<\"*\">]>; expirationDate: ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>>; nativeTokenLimitPerTransaction: ZodDefault<ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>>; startDate: ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>> }, \"strip\", ZodTypeAny, { approvedCallTargets: Object; expirationDate: BigNumber; nativeTokenLimitPerTransaction: string; startDate: BigNumber }, { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SnapshotEntryInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L14",
			"type": "ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; currencyAddress: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; maxClaimable: ZodDefault<ZodDefault<ZodUnion<[ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>, ZodLiteral<\"unlimited\">]>>>; price: ZodOptional<ZodDefault<ZodUnion<[ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>, ZodLiteral<\"unlimited\">]>>> }, \"strip\", ZodTypeAny, { address: string; currencyAddress: string; maxClaimable: string; price: string }, { address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SnapshotEntryWithProofSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L61",
			"type": "ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; currencyAddress: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; maxClaimable: ZodDefault<ZodDefault<ZodUnion<[ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>, ZodLiteral<\"unlimited\">]>>>; price: ZodOptional<ZodDefault<ZodUnion<[ZodEffects<ZodUnion<[ZodString, ZodNumber]>, string, (string) | (number)>, ZodLiteral<\"unlimited\">]>>>; proof: ZodArray<ZodString, \"many\"> }, \"strip\", ZodTypeAny, { address: string; currencyAddress: string; maxClaimable: string; price: string; proof: string[] }, { address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number); proof: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SplitInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L477",
			"type": "{ contractType: \"split\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Split>; name: \"Split\"; roles: readonly [\"admin\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"split\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L502"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Split>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L483"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"Split\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SplitsContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/splits.ts#L66",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SplitsContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/splits.ts#L22",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SplitsContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/splits.ts#L61",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SplitsContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/splits.ts#L71",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "StartDateSchema",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Default to now"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/RawDateSchema.ts#L17",
			"type": "ZodDefault<ZodUnion<[ZodEffects<ZodDate, BigNumber, Date>, ZodEffects<ZodNumber, BigNumber, number>]>>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "THIRDWEB_DEPLOYER",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/any-evm-utils/fetchPublishedContractFromPolygon.ts#L14",
			"type": "\"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenDropInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L517",
			"type": "{ contractType: \"token-drop\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<TokenDrop>; name: \"DropERC20\"; roles: readonly [\"admin\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"token-drop\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: never[]; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L542"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<TokenDrop>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L523"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"DropERC20\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc1155ContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc1155.ts#L19",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc1155ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc1155.ts#L11",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc1155ContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc1155.ts#L14",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc1155ContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc1155.ts#L24",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc20ContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc20.ts#L16",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc20ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc20.ts#L10",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc20ContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc20.ts#L13",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc20ContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc20.ts#L21",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc721ContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc721.ts#L19",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc721ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc721.ts#L11",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc721ContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc721.ts#L14",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenErc721ContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/token-erc721.ts#L24",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TokenInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L561",
			"type": "{ contractType: \"token\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Token>; name: \"TokenERC20\"; roles: readonly [\"admin\", \"minter\", \"transfer\"]; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"token\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: boolean; inputs: Array<({ components: undefined; indexed: boolean; internalType: string; name: string; type: string }) | ({ components: Array<{ internalType: string; name: string; type: string }>; indexed: boolean; internalType: string; name: string; type: string })>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: Array<({ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }) | ({ components: undefined; internalType: string; name: string; type: string })>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L585"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Token>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L566"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"TokenERC20\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteContractDeploy",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L31",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L25",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteContractOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L28",
			"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteContractSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L34",
			"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deploy",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>"
				},
				{
					"kind": "subtype",
					"name": "input",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>"
				},
				{
					"kind": "subtype",
					"name": "output",
					"type": "ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteInitializer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L601",
			"type": "{ contractType: \"vote\"; getAbi: (address: string, provider: Provider, storage: ThirdwebStorage<IpfsUploadBatchOptions>) => Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>; initialize: (...__namedParameters: InitalizeParams) => Promise<Vote>; name: \"VoteERC20\"; roles: readonly []; schema: { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "\"vote\""
				},
				{
					"kind": "function",
					"name": "getAbi",
					"signatures": [
						{
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "provider",
									"type": "Provider"
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
								}
							],
							"returns": {
								"type": "Promise<(Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>) | (Array<({ anonymous: undefined; inputs: never[]; name: undefined; outputs: undefined; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: boolean; inputs: Array<{ indexed: boolean; internalType: string; name: string; type: string }>; name: string; outputs: undefined; stateMutability: undefined; type: string }) | ({ anonymous: undefined; inputs: Array<{ internalType: string; name: string; type: string }>; name: string; outputs: Array<{ internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: never[]; name: string; outputs: Array<{ components: Array<{ internalType: string; name: string; type: string }>; internalType: string; name: string; type: string }>; stateMutability: string; type: string }) | ({ anonymous: undefined; inputs: undefined; name: undefined; outputs: undefined; stateMutability: string; type: string })>)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L626"
				},
				{
					"kind": "function",
					"name": "initialize",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "InitalizeParams",
									"flags": {
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "Promise<Vote>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L607"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "\"VoteERC20\""
				},
				{
					"kind": "subtype",
					"name": "roles",
					"type": "readonly []"
				},
				{
					"kind": "subtype",
					"name": "schema",
					"type": "{ deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> }"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteSettingsInputSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L11",
			"type": "ZodObject<{ proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { proposal_token_threshold: string; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "VoteSettingsOuputSchema",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/vote.ts#L20",
			"type": "ZodObject<{ proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { proposal_token_threshold: BigNumber; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { proposal_token_threshold: Object; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>",
			"flags": {
				"isConst": true
			}
		}
	],
	"types": [
		{
			"kind": "type",
			"name": "AirdropContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying Airdrop contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L385",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "AuctionListing",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a new marketplace auction listing."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/AuctionListing.ts#L10",
			"type": "{asset : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">,assetContractAddress : string,buyoutCurrencyValuePerToken : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },buyoutPrice : BigNumber,currencyContractAddress : string,endTimeInEpochSeconds : BigNumberish,id : string,quantity : BigNumberish,reservePrice : BigNumber,reservePriceCurrencyValuePerToken : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },sellerAddress : string,startTimeInEpochSeconds : BigNumberish,tokenId : BigNumberish,type : Auction}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "asset",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutCurrencyValuePerToken",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the buyout price listing.\nUseful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutPrice",
					"type": "BigNumber",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The buyout price of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "endTimeInEpochSeconds",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Number of seconds until the auction expires."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the listing"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "reservePrice",
					"type": "BigNumber",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The reserve price is the minimum price that a bid must be in order to be accepted."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "reservePriceCurrencyValuePerToken",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the reserve price.\nUseful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "sellerAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the seller."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimeInEpochSeconds",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to list."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "Auction"
				}
			]
		},
		{
			"kind": "type",
			"name": "BaseContractInterface",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L79",
			"typeParameters": [
				{
					"name": "TFunctions",
					"extendsType": "{  }"
				}
			],
			"type": "{_deployedPromise : Promise<Contract>,_runningEvents : {  },_wrappedEmits : {  },address : string,callStatic : {  },deployTransaction : TransactionResponse,estimateGas : {  },filters : {  },functions : TFunctions,interface : Interface,populateTransaction : {  },provider : Provider,resolvedAddress : Promise<string>,signer : Signer,_checkRunningEvents : (runningEvent: RunningEvent) => void,_deployed : (blockTag?: BlockTag) => Promise<Contract>,_wrapEvent : (runningEvent: RunningEvent, log: Log, listener: Listener) => Event,attach : (addressOrName: string) => Contract,connect : (signerOrProvider: (string) | (Signer) | (Provider)) => Contract,deployed : () => Promise<Contract>,emit : (eventName: (string) | (EventFilter), ...args: any[]) => boolean,fallback : (overrides?: TransactionRequest) => Promise<TransactionResponse>,listenerCount : (eventName?: (string) | (EventFilter)) => number,listeners : (eventName?: (string) | (EventFilter)) => Listener[],off : (eventName: (string) | (EventFilter), listener: Listener) => BaseContractInterface<TFunctions>,on : (event: (string) | (EventFilter), listener: Listener) => BaseContractInterface<TFunctions>,once : (event: (string) | (EventFilter), listener: Listener) => BaseContractInterface<TFunctions>,queryFilter : (event: (string) | (EventFilter), fromBlockOrBlockhash?: BlockTag, toBlock?: BlockTag) => Promise<Event[]>,removeAllListeners : (eventName?: (string) | (EventFilter)) => BaseContractInterface<TFunctions>,removeListener : (eventName: (string) | (EventFilter), listener: Listener) => BaseContractInterface<TFunctions>}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "_deployedPromise",
					"type": "Promise<Contract>"
				},
				{
					"kind": "subtype",
					"name": "_runningEvents",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "_wrappedEmits",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "address",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "callStatic",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "deployTransaction",
					"type": "TransactionResponse"
				},
				{
					"kind": "subtype",
					"name": "estimateGas",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "filters",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "functions",
					"type": "TFunctions"
				},
				{
					"kind": "subtype",
					"name": "interface",
					"type": "Interface"
				},
				{
					"kind": "subtype",
					"name": "populateTransaction",
					"type": "{  }"
				},
				{
					"kind": "subtype",
					"name": "provider",
					"type": "Provider"
				},
				{
					"kind": "subtype",
					"name": "resolvedAddress",
					"type": "Promise<string>"
				},
				{
					"kind": "subtype",
					"name": "signer",
					"type": "Signer"
				},
				{
					"kind": "function",
					"name": "_checkRunningEvents",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "runningEvent",
									"type": "RunningEvent",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_deployed",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockTag",
									"type": "BlockTag",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Contract>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_wrapEvent",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "runningEvent",
									"type": "RunningEvent",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "log",
									"type": "Log",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Event"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "attach",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Contract"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "connect",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "signerOrProvider",
									"type": "(string) | (Signer) | (Provider)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Contract"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "deployed",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<Contract>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "any[]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "fallback",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "overrides",
									"type": "TransactionRequest",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionResponse>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Listener[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "BaseContractInterface<TFunctions>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "BaseContractInterface<TFunctions>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "BaseContractInterface<TFunctions>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "queryFilter",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fromBlockOrBlockhash",
									"type": "BlockTag",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "toBlock",
									"type": "BlockTag",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Event[]>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "BaseContractInterface<TFunctions>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "(string) | (EventFilter)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "BaseContractInterface<TFunctions>"
							}
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "BatchToReveal",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/delayed-reveal.ts#L4",
			"type": "{batchId : BigNumber,batchUri : string,placeholderMetadata : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "batchId",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "batchUri",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "placeholderMetadata",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">"
				}
			]
		},
		{
			"kind": "type",
			"name": "Bid",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplacev3/Bid.ts#L4",
			"type": "{auctionId : string,bidAmount : string,bidAmountCurrencyValue : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },bidderAddress : string,currencyContractAddress : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "auctionId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "bidAmount",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The amount of coins offered per token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "bidAmountCurrencyValue",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the listing. Useful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "bidderAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the buyer who made the offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The currency contract address of the offer token."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "DeployEvent",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-events.ts#L1",
			"type": "{contractAddress : string,status : (\"submitted\") | (\"completed\"),transactionHash : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractAddress",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "status",
					"type": "(\"submitted\") | (\"completed\")"
				},
				{
					"kind": "subtype",
					"name": "transactionHash",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "DeployEvents",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-events.ts#L7",
			"type": "{contractDeployed : [DeployEvent]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractDeployed",
					"type": "[DeployEvent]"
				}
			]
		},
		{
			"kind": "type",
			"name": "DirectListing",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a marketplace direct listing."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/DirectListing.ts#L10",
			"type": "{asset : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">,assetContractAddress : string,buyoutCurrencyValuePerToken : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },buyoutPrice : BigNumber,currencyContractAddress : string,id : string,quantity : BigNumberish,secondsUntilEnd : BigNumberish,sellerAddress : string,startTimeInSeconds : BigNumberish,tokenId : BigNumberish,type : Direct}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "asset",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutCurrencyValuePerToken",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the listing. Useful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutPrice",
					"type": "BigNumber",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The buyout price of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "secondsUntilEnd",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Number of seconds until the listing expires."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "sellerAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the seller."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimeInSeconds",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to list."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "Direct"
				}
			]
		},
		{
			"kind": "type",
			"name": "DirectListingV3",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a marketplace direct listing."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplacev3/DirectListingV3.ts#L9",
			"type": "{asset : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">,assetContractAddress : string,creatorAddress : string,currencyContractAddress : string,currencyValuePerToken : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },endTimeInSeconds : number,id : string,isReservedListing : boolean,pricePerToken : string,quantity : string,startTimeInSeconds : number,status : Status,tokenId : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "asset",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "creatorAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the creator of listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyValuePerToken",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the listing. Useful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "endTimeInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The end time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "isReservedListing",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether the listing is reserved to be bought from a specific set of buyers."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The price to pay per unit of NFTs listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimeInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "status",
					"type": "Status",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether the listing is CREATED, COMPLETED, or CANCELLED."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to list."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "EnglishAuction",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a new marketplace english-auction."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplacev3/EnglishAuction.ts#L9",
			"type": "{asset : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">,assetContractAddress : string,bidBufferBps : number,buyoutBidAmount : string,buyoutCurrencyValue : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },creatorAddress : string,currencyContractAddress : string,endTimeInSeconds : number,id : string,minimumBidAmount : string,minimumBidCurrencyValue : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },quantity : string,startTimeInSeconds : number,status : Status,timeBufferInSeconds : number,tokenId : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "asset",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The asset being auctioned."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being auctioned."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "bidBufferBps",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is a buffer in basis points e.g. x%."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "To be considered as a new winning bid, a bid must be at least x% greater than\nthe current winning bid."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutBidAmount",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The buyout price of the auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutCurrencyValue",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the buyout price.\nUseful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "creatorAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the creator of auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "endTimeInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The end time of the auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the auction"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "minimumBidAmount",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The minimum price that a bid must be in order to be accepted."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "minimumBidCurrencyValue",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the minimum bid amount.\nUseful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the auction."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimeInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the auction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "status",
					"type": "Status",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether the listing is CREATED, COMPLETED, or CANCELLED."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "timeBufferInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is a buffer e.g. x seconds."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If a new winning bid is made less than x seconds before expirationTimestamp, the\nexpirationTimestamp is increased by x seconds."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to auction."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "EventQueryOptions",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Filters for querying past events"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/events.ts#L40",
			"typeParameters": [
				{
					"name": "TFilter",
					"extendsType": "Record<string, any>"
				}
			],
			"type": "{filters : TFilter,fromBlock : (string) | (number),order : (\"asc\") | (\"desc\"),toBlock : (string) | (number)}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "filters",
					"type": "TFilter"
				},
				{
					"kind": "subtype",
					"name": "fromBlock",
					"type": "(string) | (number)"
				},
				{
					"kind": "subtype",
					"name": "order",
					"type": "(\"asc\") | (\"desc\")"
				},
				{
					"kind": "subtype",
					"name": "toBlock",
					"type": "(string) | (number)"
				}
			]
		},
		{
			"kind": "type",
			"name": "GaslessTransaction",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "transaction message contains information that's needed to execute a gasless transaction"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L93",
			"type": "{callOverrides : CallOverrides,chainId : number,data : string,from : string,functionArgs : any[],functionName : string,gasLimit : BigNumber,to : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "callOverrides",
					"type": "CallOverrides"
				},
				{
					"kind": "subtype",
					"name": "chainId",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "data",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "from",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "functionArgs",
					"type": "any[]"
				},
				{
					"kind": "subtype",
					"name": "functionName",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "gasLimit",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "MarketplaceContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying a Marketplace contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L161",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,platform_fee_basis_points : number,platform_fee_recipient : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "MarketplaceFilter",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/MarketPlaceFilter.ts#L8",
			"type": "{count : number,offeror : string,seller : string,start : number,tokenContract : string,tokenId : BigNumberish}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "count",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "offeror",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "seller",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "start",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "tokenContract",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "MarketplaceFilterWithoutOfferor",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "English auctions and Direct Listings V3 cannot be retrieved by offeror."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/MarketPlaceFilter.ts#L18",
			"type": "{count : number,seller : string,start : number,tokenContract : string,tokenId : BigNumberish}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "count",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "seller",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "start",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "tokenContract",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "MarketplaceFilterWithoutSeller",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Offers V3 cannot be retrieved by seller."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/MarketPlaceFilter.ts#L24",
			"type": "{count : number,offeror : string,start : number,tokenContract : string,tokenId : BigNumberish}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "count",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "offeror",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "start",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "tokenContract",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "MarketplaceV3ContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying a Marketplace-V3 contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L201",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,platform_fee_basis_points : number,platform_fee_recipient : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "MultiwrapContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying an Multiwrap contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L342",
			"type": "{app_uri : string,description : string,external_link : string,fee_recipient : string,image : FileOrBufferOrString,name : string,seller_fee_basis_points : number,symbol : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from secondary sales (royalties)"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "seller_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of royalties for secondary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "symbol",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Symbol for the NFTs"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "NFTContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying an NFT contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L10",
			"type": "{app_uri : string,description : string,external_link : string,fee_recipient : string,image : FileOrBufferOrString,name : string,platform_fee_basis_points : number,platform_fee_recipient : string,primary_sale_recipient : string,seller_fee_basis_points : number,symbol : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from secondary sales (royalties)"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "primary_sale_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from primary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "seller_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of royalties for secondary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "symbol",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Symbol for the NFTs"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "NativeToken",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/currency.ts#L17",
			"type": "{decimals : 18,name : string,symbol : string,wrapped : { address: string; name: string; symbol: string }}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "decimals",
					"type": "18"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "symbol",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "wrapped",
					"type": "{ address: string; name: string; symbol: string }"
				}
			]
		},
		{
			"kind": "type",
			"name": "NewAuctionListing",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a new marketplace auction listing."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/NewAuctionListing.ts#L8",
			"type": "{assetContractAddress : string,buyoutPricePerToken : (string) | (number),currencyContractAddress : string,listingDurationInSeconds : BigNumberish,quantity : BigNumberish,reservePricePerToken : (string) | (number),startTimestamp : Date,tokenId : BigNumberish,type : \"NewAuctionListing\"}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutPricePerToken",
					"type": "(string) | (number)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The buyout price of the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "So if the "
								},
								{
									"type": "inlineCode",
									"value": "quantity = 10"
								},
								{
									"type": "text",
									"value": " and the "
								},
								{
									"type": "inlineCode",
									"value": "reserve price = 1"
								},
								{
									"type": "text",
									"value": ", then the buyout price\nis 10 coins (of the configured currency)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "listingDurationInSeconds",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The duration of the listing in seconds."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "reservePricePerToken",
					"type": "(string) | (number)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The reserve price is the minimum price that a bid must be in order to be accepted,\nper token."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "So if the "
								},
								{
									"type": "inlineCode",
									"value": "quantity = 10"
								},
								{
									"type": "text",
									"value": " and the "
								},
								{
									"type": "inlineCode",
									"value": "reserve price = 1"
								},
								{
									"type": "text",
									"value": ", then the minimum bid\nis 10 coins (of the configured currency)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimestamp",
					"type": "Date",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to list."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "\"NewAuctionListing\""
				}
			]
		},
		{
			"kind": "type",
			"name": "NewDirectListing",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a new marketplace direct listing."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/NewDirectListing.ts#L8",
			"type": "{assetContractAddress : string,buyoutPricePerToken : (string) | (number),currencyContractAddress : string,listingDurationInSeconds : BigNumberish,quantity : BigNumberish,startTimestamp : Date,tokenId : BigNumberish,type : \"NewDirectListing\"}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being listed."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "buyoutPricePerToken",
					"type": "(string) | (number)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The buyout price of the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "So if the "
								},
								{
									"type": "inlineCode",
									"value": "quantity = 10"
								},
								{
									"type": "text",
									"value": " and the "
								},
								{
									"type": "inlineCode",
									"value": "reserve price = 1"
								},
								{
									"type": "text",
									"value": ", then the buyout price\nis 10 coins (of the configured currency)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency to accept for the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "listingDurationInSeconds",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The duration of the listing in seconds."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to include in the listing."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startTimestamp",
					"type": "Date",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The start time of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token to list."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "\"NewDirectListing\""
				}
			]
		},
		{
			"kind": "type",
			"name": "Offer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/Offer.ts#L5",
			"type": "{buyerAddress : string,currencyContractAddress : string,currencyValue : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },listingId : BigNumberish,pricePerToken : BigNumber,quantityDesired : BigNumberish}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "buyerAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the buyer who made the offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The currency contract address of the offer token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyValue",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the listing. Useful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the listing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "BigNumber",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The amount of coins offered per token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantityDesired",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to be bought."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "OfferV3",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a marketplace offer."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplacev3/OfferV3.ts#L8",
			"type": "{asset : objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">,assetContractAddress : string,currencyContractAddress : string,currencyValue : { decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber },endTimeInSeconds : number,id : string,offerorAddress : string,quantity : string,status : Status,tokenId : string,totalPrice : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "asset",
					"type": "objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The asset to buy."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "assetContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the asset being sought."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyContractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the currency offered for the NFTs."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyValue",
					"type": "{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "CurrencyValue"
								},
								{
									"type": "text",
									"value": " of the listing. Useful for displaying the price information."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "endTimeInSeconds",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The end time of the offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The id of the offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "offerorAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the creator of offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to buy."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "status",
					"type": "Status",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether the listing is CREATED, COMPLETED, or CANCELLED."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The ID of the token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "totalPrice",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The total offer amount for the NFTs."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "OpenEditionContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying an OpenEdition contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L66",
			"type": "{app_uri : string,description : string,external_link : string,fee_recipient : string,image : FileOrBufferOrString,name : string,primary_sale_recipient : string,seller_fee_basis_points : number,symbol : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from secondary sales (royalties)"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "primary_sale_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from primary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "seller_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of royalties for secondary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "symbol",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Symbol for the NFTs"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "Proposal",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/vote.ts#L40",
			"type": "{description : string,endBlock : BigNumber,executions : ProposalExecutable[],proposalId : BigNumber,proposer : string,startBlock : BigNumber,state : ProposalState,votes : ProposalVote[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The description of the proposal."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "endBlock",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "executions",
					"type": "ProposalExecutable[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "All executions that have been proposed for the proposal."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "proposalId",
					"type": "BigNumber",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The unique identifier of the proposal."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "proposer",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the wallet that created the proposal."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "startBlock",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "state",
					"type": "ProposalState",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The current state of the proposal."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "votes",
					"type": "ProposalVote[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "All votes that have been cast on the proposal."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ProposalExecutable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/vote.ts#L21",
			"type": "{nativeTokenValue : BigNumberish,toAddress : string,transactionData : BytesLike}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "nativeTokenValue",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The amount of a native token that may be sent if a proposal is executing a token transfer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "toAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the contract that the proposal will execute a transaction on.\nIf the proposal is sending a token to a wallet, this address should be the address\nof the wallet that will be receiving the tokens."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "transactionData",
					"type": "BytesLike",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The transaction payload that will be executed if the proposal is approved."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ProposalVote",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/vote.ts#L15",
			"type": "{count : BigNumber,label : string,type : VoteType}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "count",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "label",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "VoteType"
				}
			]
		},
		{
			"kind": "type",
			"name": "SplitContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying Split contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L307",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,recipients : SplitRecipientInput[],trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "recipients",
					"type": "SplitRecipientInput[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The list of recipients and their share of the split"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "SplitRecipient",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The SplitRecipient type represents a recipient of some royalty, indicated by their split percentage."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/SplitRecipient.ts#L6",
			"type": "{address : string,splitPercentage : number}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the recipient"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "splitPercentage",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The split of the recipient as a percentage of the total amount"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "I.e. If a recipient has a split of 50%, and the asset sells for 100 ETH,\nthe recipient will receive 50 ETH."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "SplitRecipientInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L292",
			"type": "{address : string,sharesBps : number}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The recipient address"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "sharesBps",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "the shares in basis point (5% = 500) that address is owed from the total funds"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "TokenContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying a Token contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L113",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,platform_fee_basis_points : number,platform_fee_recipient : string,primary_sale_recipient : string,symbol : string,trusted_forwarders : string[]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_basis_points",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The percentage (in basis points) of platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "platform_fee_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from platform fees"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "primary_sale_recipient",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address that will receive the proceeds from primary sales"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "symbol",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Symbol for the NFTs"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "UnmappedOffer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/marketplace/UnmappedOffer.ts#L3",
			"type": "{currency : string,expirationTimestamp : BigNumberish,listingId : BigNumberish,offeror : string,pricePerToken : BigNumberish,quantityDesired : BigNumberish,quantityWanted : BigNumberish}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "currency",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The currency contract address of the offer token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "expirationTimestamp",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The time where the offer expires"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The listing that the offer was made on"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "offeror",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The user who is making the offer."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The amount of coins offered per token."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantityDesired",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The quantity of tokens to be bought."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantityWanted",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The amount of tokens desired."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "UploadProgressEvent",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/events.ts#L1",
			"type": "{progress : number,total : number}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "progress",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The number of bytes uploaded."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "total",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The total number of bytes to be uploaded."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "UserWalletEvents",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "link",
							"title": null,
							"url": "40537",
							"children": [
								{
									"type": "text",
									"value": "UserWallet"
								}
							]
						},
						{
							"type": "text",
							"value": " events that you can subscribe to using "
						},
						{
							"type": "inlineCode",
							"value": "sdk.wallet.events"
						},
						{
							"type": "text",
							"value": "."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L39",
			"type": "{signerChanged : [(undefined) | (Signer)]}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "signerChanged",
					"type": "[(undefined) | (Signer)]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Emitted when "
								},
								{
									"type": "inlineCode",
									"value": "sdk.wallet.connect()"
								},
								{
									"type": "text",
									"value": " is called."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "VoteContractDeployMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Options for deploying a Vote contract"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L240",
			"type": "{app_uri : string,description : string,external_link : string,image : FileOrBufferOrString,name : string,proposal_token_threshold : (string) | (number) | (bigint) | (BigNumber),trusted_forwarders : string[],voting_delay_in_blocks : number,voting_period_in_blocks : number,voting_quorum_fraction : number,voting_token_address : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "app_uri",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default app for this contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional description of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "external_link",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional url for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "image",
					"type": "FileOrBufferOrString",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Optional image for the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "name of the contract"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "proposal_token_threshold",
					"type": "(string) | (number) | (bigint) | (BigNumber)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The minimum amount in governance token owned to be able to create a proposal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "trusted_forwarders",
					"type": "string[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Custom gasless trusted forwarder addresses"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "voting_delay_in_blocks",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The delay in blocks before voting can begin on proposals\nSpecified in number of blocks. Assuming block time of around 13.14 seconds, 1 day = 6570 blocks, 1 week = 45992 blocks."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "voting_period_in_blocks",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The duration in blocks of the open voting window\nSpecified in number of blocks. Assuming block time of around 13.14 seconds, 1 day = 6570 blocks, 1 week = 45992 blocks."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "voting_quorum_fraction",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The minimum fraction to be met to pass a proposal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "voting_token_address",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The address of the governance token contract representing votes"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "VoteSettings",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/vote.ts#L6",
			"type": "{proposalTokenThreshold : string,votingDelay : string,votingPeriod : string,votingQuorumFraction : string,votingTokenAddress : string,votingTokenMetadata : { decimals: number; name: string; symbol: string }}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "proposalTokenThreshold",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "votingDelay",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "votingPeriod",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "votingQuorumFraction",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "votingTokenAddress",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "votingTokenMetadata",
					"type": "{ decimals: number; name: string; symbol: string }"
				}
			]
		},
		{
			"kind": "type",
			"name": "Abi",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L107",
			"type": "z.output<typeof AbiSchema>"
		},
		{
			"kind": "type",
			"name": "AbiEvent",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L370",
			"type": "{ comment: string; inputs: z.output<typeof AbiTypeSchema>[]; name: string; outputs: z.output<typeof AbiTypeSchema>[] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "comment",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "inputs",
					"type": "z.output<typeof AbiTypeSchema>[]"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "outputs",
					"type": "z.output<typeof AbiTypeSchema>[]"
				}
			]
		},
		{
			"kind": "type",
			"name": "AbiFunction",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L362",
			"type": "{ comment: string; inputs: z.output<typeof AbiTypeSchema>[]; name: string; outputs: z.output<typeof AbiTypeSchema>[]; signature: string; stateMutability: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "comment",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "inputs",
					"type": "z.output<typeof AbiTypeSchema>[]"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "outputs",
					"type": "z.output<typeof AbiTypeSchema>[]"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "stateMutability",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "AbstractClaimConditionContractStruct",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/claim-conditions.ts#L75",
			"type": "{ currency: string; maxClaimablePerWallet: BigNumberish; maxClaimableSupply: BigNumberish; merkleRoot: string; metadata: string; pricePerToken: BigNumberish; startTimestamp: BigNumberish; supplyClaimed: BigNumberish; waitTimeInSecondsBetweenClaims: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "currency",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "maxClaimablePerWallet",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "maxClaimableSupply",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "merkleRoot",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "startTimestamp",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "supplyClaimed",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "waitTimeInSecondsBetweenClaims",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "AddContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/registry.ts#L10",
			"type": "ContractInput & { metadataURI: string }"
		},
		{
			"kind": "type",
			"name": "Address",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/Address.ts#L1",
			"type": "string"
		},
		{
			"kind": "type",
			"name": "AddressOrEns",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/AddressOrEnsSchema.ts#L13",
			"type": "z.input<typeof AddressOrEnsSchema>"
		},
		{
			"kind": "type",
			"name": "Airdrop1155Content",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L24",
			"type": "z.input<typeof Airdrop1155ContentInput>"
		},
		{
			"kind": "type",
			"name": "Airdrop1155Output",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L25",
			"type": "z.input<typeof Airdrop1155OutputSchema>"
		},
		{
			"kind": "type",
			"name": "Airdrop20Content",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L18",
			"type": "z.input<typeof Airdrop20ContentInput>"
		},
		{
			"kind": "type",
			"name": "Airdrop20Output",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L19",
			"type": "z.input<typeof Airdrop20OutputSchema>"
		},
		{
			"kind": "type",
			"name": "Airdrop721Content",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L21",
			"type": "z.input<typeof Airdrop721ContentInput>"
		},
		{
			"kind": "type",
			"name": "Airdrop721Output",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L22",
			"type": "z.input<typeof Airdrop721OutputSchema>"
		},
		{
			"kind": "type",
			"name": "AirdropInput",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Input model to pass a list of addresses + amount to transfer to each one"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/airdrop/airdrop.ts#L16",
			"type": "z.input<typeof AirdropInputSchema>"
		},
		{
			"kind": "type",
			"name": "Amount",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a currency amount already formatted. ie. \"1\" for 1 ether."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/currency.ts#L48",
			"type": "z.input<typeof AmountSchema>"
		},
		{
			"kind": "type",
			"name": "BaseContractForAddress",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L85",
			"typeParameters": [
				{
					"name": "TAddress",
					"extendsType": "ContractAddress"
				}
			],
			"type": "BaseContractInterface<ContractFunctionsFromAbi<ExtractAbiForContract<TAddress>>>"
		},
		{
			"kind": "type",
			"name": "BasicNFTInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/nft.ts#L12",
			"type": "z.input<typeof BasicNFTInput>"
		},
		{
			"kind": "type",
			"name": "ChainIdOrName",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L33",
			"type": "(ChainIdOrNumber) | (ChainOrRpc)"
		},
		{
			"kind": "type",
			"name": "ChainIdOrNumber",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L32",
			"type": "(ChainId) | (number & {  })"
		},
		{
			"kind": "type",
			"name": "ChainInfo",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/ChainInfo.ts#L4",
			"type": "z.infer<typeof ChainInfoInputSchema>"
		},
		{
			"kind": "type",
			"name": "ChainOrRpc",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L30",
			"type": "(ChainSlug) | (string & {  })"
		},
		{
			"kind": "type",
			"name": "ChainOrRpcUrl",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L34",
			"type": "(ChainIdOrName) | (Chain) | (ChainInfo)"
		},
		{
			"kind": "type",
			"name": "ClaimCondition",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a claim condition fetched from the SDK"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L20",
			"type": "z.output<typeof ClaimConditionOutputSchema>"
		},
		{
			"kind": "type",
			"name": "ClaimConditionFetchOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L84",
			"type": "{ withAllowList: boolean }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "withAllowList",
					"type": "boolean"
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimConditionInput",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Input model to create a claim condition with optional snapshot of wallets"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L42",
			"type": "z.input<typeof PartialClaimConditionInputSchema>"
		},
		{
			"kind": "type",
			"name": "ClaimConditionsForToken",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L64",
			"type": "{ claimConditions: ClaimConditionInput[]; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "claimConditions",
					"type": "ClaimConditionInput[]"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L69",
			"type": "{ checkERC20Allowance: boolean; currencyAddress: Address; pricePerToken: Price }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "checkERC20Allowance",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether to check the ERC20 allowance of the sender, defaults to true"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "currencyAddress",
					"type": "Address",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The currency to pay for each token claimed, defaults to NATIVE_TOKEN_ADDRESS for native currency"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "Price",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The price to pay for each token claimed"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimVerification",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L54",
			"type": "{ currencyAddress: Address; currencyAddressInProof: Address; maxClaimable: BigNumber; overrides: CallOverrides; price: BigNumber; priceInProof: BigNumber; proofs: BytesLike[] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "currencyAddress",
					"type": "Address"
				},
				{
					"kind": "subtype",
					"name": "currencyAddressInProof",
					"type": "Address"
				},
				{
					"kind": "subtype",
					"name": "maxClaimable",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "overrides",
					"type": "CallOverrides"
				},
				{
					"kind": "subtype",
					"name": "price",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "priceInProof",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "proofs",
					"type": "BytesLike[]"
				}
			]
		},
		{
			"kind": "type",
			"name": "CommonContractSchemaInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/index.ts#L24",
			"type": "z.input<typeof CommonContractSchema>"
		},
		{
			"kind": "type",
			"name": "ContractEvent",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standardized return type for contract events that returns event arguments"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/events.ts#L16",
			"typeParameters": [
				{
					"name": "TEvent"
				}
			],
			"type": "{ data: TEvent; eventName: string; transaction: { address: string; blockHash: string; blockNumber: number; data: string; logIndex: number; removed: boolean; topics: string[]; transactionHash: string; transactionIndex: number } }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "data",
					"type": "TEvent"
				},
				{
					"kind": "subtype",
					"name": "eventName",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "transaction",
					"type": "{ address: string; blockHash: string; blockNumber: number; data: string; logIndex: number; removed: boolean; topics: string[]; transactionHash: string; transactionIndex: number }"
				}
			]
		},
		{
			"kind": "type",
			"name": "ContractForPrebuiltContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L738",
			"typeParameters": [
				{
					"name": "TContractType",
					"extendsType": "PrebuiltContractType"
				}
			],
			"type": "PrebuiltContractsInstances[TContractType]"
		},
		{
			"kind": "type",
			"name": "ContractFunctionsFromAbi",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L72",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				}
			],
			"type": "{[TFunctionName in TAbiFunctionNames<TAbi>] : ExtractFunctionType<TAbi, TFunctionName>}"
		},
		{
			"kind": "type",
			"name": "ContractInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/registry.ts#L5",
			"type": "{ address: AddressOrEns; chainId: number }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "AddressOrEns"
				},
				{
					"kind": "subtype",
					"name": "chainId",
					"type": "number"
				}
			]
		},
		{
			"kind": "type",
			"name": "ContractParam",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L355",
			"type": "z.input<typeof AbiTypeSchema>"
		},
		{
			"kind": "type",
			"name": "ContractSource",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L376",
			"type": "{ filename: string; source: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "filename",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "source",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "ContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L742",
			"type": "keyof ContractsMap"
		},
		{
			"kind": "type",
			"name": "ContractWithMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/registry.ts#L19",
			"type": "{ address: Address; chainId: number; contractType: () => Promise<ContractType>; extensions: () => Promise<string[]>; metadata: () => Promise<{ image: string; name: string }> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "Address"
				},
				{
					"kind": "subtype",
					"name": "chainId",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "contractType",
					"type": "() => Promise<ContractType>"
				},
				{
					"kind": "subtype",
					"name": "extensions",
					"type": "() => Promise<string[]>"
				},
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "() => Promise<{ image: string; name: string }>"
				}
			]
		},
		{
			"kind": "type",
			"name": "ContractsMap",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L728",
			"type": "typeof CONTRACTS_MAP"
		},
		{
			"kind": "type",
			"name": "Currency",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/currency.ts#L15",
			"type": "z.infer<typeof CurrencySchema>"
		},
		{
			"kind": "type",
			"name": "CurrencyValue",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Currency value and display value"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/token.ts#L30",
			"type": "z.input<typeof CurrencyValueSchema>"
		},
		{
			"kind": "type",
			"name": "DeployMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-options.ts#L16",
			"type": "{ compilerMetadata: PreDeployMetadataFetched; extendedMetadata: FullPublishMetadata }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "compilerMetadata",
					"type": "PreDeployMetadataFetched"
				},
				{
					"kind": "subtype",
					"name": "extendedMetadata",
					"type": "FullPublishMetadata"
				}
			]
		},
		{
			"kind": "type",
			"name": "DeployOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-options.ts#L7",
			"type": "{ forceDirectDeploy: boolean; notifier: (status: (\"deploying\") | (\"deployed\"), contractType: (DeployedContractType) | (string)) => void; saltForProxyDeploy: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "forceDirectDeploy",
					"type": "boolean"
				},
				{
					"kind": "subtype",
					"name": "notifier",
					"type": "(status: (\"deploying\") | (\"deployed\"), contractType: (DeployedContractType) | (string)) => void"
				},
				{
					"kind": "subtype",
					"name": "saltForProxyDeploy",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "DeploySchemaForPrebuiltContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L743",
			"typeParameters": [
				{
					"name": "TContractType",
					"extendsType": "PrebuiltContractType"
				}
			],
			"type": "SchemaForPrebuiltContractType<TContractType>[\"deploy\"]"
		},
		{
			"kind": "type",
			"name": "DeployTransactionOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L64",
			"type": "TransactionContextOptions & { events: EventEmitter<DeployEvents>; factory: ContractFactory }"
		},
		{
			"kind": "type",
			"name": "DeployedContract",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/registry.ts#L14",
			"type": "{ address: Address; chainId: number }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "Address"
				},
				{
					"kind": "subtype",
					"name": "chainId",
					"type": "number"
				}
			]
		},
		{
			"kind": "type",
			"name": "DirectListingInputParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/marketplacev3/direct-listings.ts#L59",
			"type": "z.input<typeof DirectListingInputParamsSchema>"
		},
		{
			"kind": "type",
			"name": "DynamicContractExtensionMetadataOrUri",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/deploy/deploy-metadata.ts#L415",
			"type": "(CommonContractSchemaInput) | (string)"
		},
		{
			"kind": "type",
			"name": "ERC1155Wrappable",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a certain amount of ERC1155 NFTs that can be wrapped"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/multiwrap.ts#L23",
			"type": "{ contractAddress: string; quantity: Amount; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractAddress",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "ERC20Wrappable",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a certain amount of ERC20 tokens that can be wrapped"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/multiwrap.ts#L7",
			"type": "{ contractAddress: string; quantity: Amount }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractAddress",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "Amount"
				}
			]
		},
		{
			"kind": "type",
			"name": "ERC721Wrappable",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a ERC721 NFT that can be wrapped"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/multiwrap.ts#L15",
			"type": "{ contractAddress: string; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractAddress",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "EditionMetadataInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/edition.ts#L48",
			"type": "z.input<typeof EditionMetadataInputSchema>"
		},
		{
			"kind": "type",
			"name": "EditionMetadataOrUri",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/edition.ts#L53",
			"type": "z.input<typeof EditionMetadataInputOrUriSchema>"
		},
		{
			"kind": "type",
			"name": "EnglishAuctionInputParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/marketplacev3/english-auctions.ts#L75",
			"type": "z.input<typeof EnglishAuctionInputParamsSchema>"
		},
		{
			"kind": "type",
			"name": "Ens",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/shared/Ens.ts#L1",
			"type": "(`${string}.eth`) | (`${string}.cb.id`)"
		},
		{
			"kind": "type",
			"name": "Extension",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/contract-features.ts#L155",
			"type": "Feature"
		},
		{
			"kind": "type",
			"name": "ExtensionName",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/contract-features.ts#L161",
			"type": "Feature[\"name\"]"
		},
		{
			"kind": "type",
			"name": "ExtensionWithEnabled",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/contract-features.ts#L169",
			"type": "Extension & { enabled: boolean; extensions: Record<string, FeatureWithEnabled> }"
		},
		{
			"kind": "type",
			"name": "ExtraPublishMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L252",
			"type": "z.input<typeof ExtraPublishMetadataSchemaInput>"
		},
		{
			"kind": "type",
			"name": "ExtractAbiForContract",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L22",
			"typeParameters": [
				{
					"name": "TAddress",
					"extendsType": "ContractAddress"
				}
			],
			"type": "typeof GENERATED_ABI[TAddress]"
		},
		{
			"kind": "type",
			"name": "ExtractArrayElement",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L47",
			"typeParameters": [
				{
					"name": "TArray",
					"extendsType": "any[]"
				}
			],
			"type": "TArray extends [infer TElement, ...(infer TRest)] ? TRest extends [] ? TElement : TArray : never"
		},
		{
			"kind": "type",
			"name": "ExtractFunction",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L27",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "ExtractAbiFunction<TAbi, TFunctionName>"
		},
		{
			"kind": "type",
			"name": "ExtractFunctionInputs",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L32",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "ExtractFunction<TAbi, TFunctionName>[\"inputs\"]"
		},
		{
			"kind": "type",
			"name": "ExtractFunctionInputsType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L42",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "AbiParametersToPrimitiveTypes<ExtractFunctionInputs<TAbi, TFunctionName>>"
		},
		{
			"kind": "type",
			"name": "ExtractFunctionOutputs",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L37",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "ExtractFunction<TAbi, TFunctionName>[\"outputs\"]"
		},
		{
			"kind": "type",
			"name": "ExtractFunctionOutputsType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L56",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "ExtractArrayElement<AbiParametersToPrimitiveTypes<ExtractFunctionOutputs<TAbi, TFunctionName>>>"
		},
		{
			"kind": "type",
			"name": "ExtractFunctionType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L64",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				},
				{
					"name": "TFunctionName",
					"extendsType": "TAbiFunctionNames<TAbi>"
				}
			],
			"type": "(...args: ExtractFunctionInputsType<TAbi, TFunctionName>) => ExtractFunctionOutputsType<TAbi, TFunctionName>"
		},
		{
			"kind": "type",
			"name": "FilledConditionInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L49",
			"type": "z.output<typeof ClaimConditionInputSchema>"
		},
		{
			"kind": "type",
			"name": "FilledSignature721WithQuantity",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L179",
			"type": "z.output<typeof Signature721WithQuantityInput>"
		},
		{
			"kind": "type",
			"name": "FilledSignaturePayload1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L167",
			"type": "z.output<typeof Signature1155PayloadInput>"
		},
		{
			"kind": "type",
			"name": "FilledSignaturePayload1155WithTokenId",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L173",
			"type": "z.output<typeof Signature1155PayloadInputWithTokenId>"
		},
		{
			"kind": "type",
			"name": "FilledSignaturePayload20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L125",
			"type": "z.output<typeof Signature20PayloadInput>"
		},
		{
			"kind": "type",
			"name": "FilledSignaturePayload721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L145",
			"type": "z.output<typeof Signature721PayloadInput>"
		},
		{
			"kind": "type",
			"name": "ForwardRequestMessage",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Forward Request Message that's used for gasless transaction"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L64",
			"type": "{ chainid: string; data: BytesLike; from: string; gas: string; nonce: string; to: string; value: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "chainid",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "data",
					"type": "BytesLike"
				},
				{
					"kind": "subtype",
					"name": "from",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "gas",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "nonce",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "value",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "FullPublishMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L272",
			"type": "z.infer<typeof FullPublishMetadataSchemaOutput>"
		},
		{
			"kind": "type",
			"name": "GetBlockNumberParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L16",
			"type": "SharedBlockParams"
		},
		{
			"kind": "type",
			"name": "GetBlockParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L41",
			"type": "SharedBlockParams & { block: BlockTag }"
		},
		{
			"kind": "type",
			"name": "GetBlockWithTransactionsParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getBlock.ts#L92",
			"type": "SharedBlockParams & { block: BlockTag }"
		},
		{
			"kind": "type",
			"name": "GetChainIdParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getChainId.ts#L6",
			"type": "{ network: NetworkInput; sdkOptions: SDKOptions }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "network",
					"type": "NetworkInput"
				},
				{
					"kind": "subtype",
					"name": "sdkOptions",
					"type": "SDKOptions"
				}
			]
		},
		{
			"kind": "type",
			"name": "GetContractFromAbiParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getContractFromAbi.ts#L18",
			"type": "{ abi: ContractInterface; address: AddressOrEns; network: NetworkInput; sdkOptions: SDKOptions; storage: ThirdwebStorage }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "abi",
					"type": "ContractInterface"
				},
				{
					"kind": "subtype",
					"name": "address",
					"type": "AddressOrEns"
				},
				{
					"kind": "subtype",
					"name": "network",
					"type": "NetworkInput"
				},
				{
					"kind": "subtype",
					"name": "sdkOptions",
					"type": "SDKOptions"
				},
				{
					"kind": "subtype",
					"name": "storage",
					"type": "ThirdwebStorage"
				}
			]
		},
		{
			"kind": "type",
			"name": "GetContractParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/getContract.ts#L23",
			"typeParameters": [
				{
					"name": "TContractType",
					"extendsType": "PrebuiltContractType"
				}
			],
			"type": "{ address: AddressOrEns; contractTypeOrAbi: (PrebuiltContractType) | (ContractInterface) | (TContractType); network: NetworkInput; sdkOptions: SDKOptions; storage: ThirdwebStorage }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "AddressOrEns"
				},
				{
					"kind": "subtype",
					"name": "contractTypeOrAbi",
					"type": "(PrebuiltContractType) | (ContractInterface) | (TContractType)"
				},
				{
					"kind": "subtype",
					"name": "network",
					"type": "NetworkInput"
				},
				{
					"kind": "subtype",
					"name": "sdkOptions",
					"type": "SDKOptions"
				},
				{
					"kind": "subtype",
					"name": "storage",
					"type": "ThirdwebStorage"
				}
			]
		},
		{
			"kind": "type",
			"name": "InfraContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L27",
			"type": "keyof InfraContractsMap"
		},
		{
			"kind": "type",
			"name": "InfraContractsMap",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L26",
			"type": "typeof INFRA_CONTRACTS_MAP"
		},
		{
			"kind": "type",
			"name": "NFT",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/nft.ts#L72",
			"type": "{ metadata: NFTMetadata; owner: string; quantityOwned: string; supply: string; type: (\"ERC1155\") | (\"ERC721\") | (\"metaplex\") }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "NFTMetadata"
				},
				{
					"kind": "subtype",
					"name": "owner",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "quantityOwned",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "supply",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "(\"ERC1155\") | (\"ERC721\") | (\"metaplex\")"
				}
			]
		},
		{
			"kind": "type",
			"name": "NFTMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/nft.ts#L68",
			"type": "z.output<typeof CommonNFTOutput>"
		},
		{
			"kind": "type",
			"name": "NFTMetadataInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/nft.ts#L58",
			"type": "z.input<typeof CommonNFTInput>"
		},
		{
			"kind": "type",
			"name": "NFTMetadataOrUri",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/nft.ts#L62",
			"type": "z.input<typeof NFTInputOrUriSchema>"
		},
		{
			"kind": "type",
			"name": "NetworkInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L35",
			"type": "(ChainOrRpcUrl) | (Signer) | (providers.Provider)"
		},
		{
			"kind": "type",
			"name": "PackMetadataInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/pack.ts#L91",
			"type": "z.input<typeof PackMetadataInputSchema>"
		},
		{
			"kind": "type",
			"name": "PackMetadataOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/pack.ts#L96",
			"type": "z.output<typeof PackMetadataInputSchema>"
		},
		{
			"kind": "type",
			"name": "PackRewards",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/pack.ts#L101",
			"type": "z.input<typeof PackRewardsSchema>"
		},
		{
			"kind": "type",
			"name": "PackRewardsOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/pack.ts#L106",
			"type": "z.output<typeof PackRewardsOutputSchema>"
		},
		{
			"kind": "type",
			"name": "PaperCreateCheckoutLinkShardParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The parameters for creating a paper.xyz checkout link."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/integrations/thirdweb-checkout.ts#L67",
			"type": "{ cancelCallbackurl: string; description: string; email: string; expiresInMinutes: number; feeBearer: (\"BUYER\") | (\"SELLER\"); imageUrl: string; limitPerTransaction: number; metadata: Record<string, (string) | (number) | (null)>; quantity: number; redirectAfterPayment: boolean; sendEmailOnSuccess: boolean; successCallbackUrl: string; title: string; twitterHandleOverride: string; walletAddress: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "cancelCallbackurl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The URL to redirect (or prompt the user to navigate) if the checkout link is expired or the buyer is not eligible to purchase (sold out, not allowlisted, sale not started, etc.)."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "description",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The description of the checkout."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "email",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The email address of the recipient."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "expiresInMinutes",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The time in minutes that the intent will be valid for."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "feeBearer",
					"type": "(\"BUYER\") | (\"SELLER\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Determines whether the buyer or seller pays the network and service fees for this purchase. The seller will be billed if set to SELLER. (default: "
								},
								{
									"type": "inlineCode",
									"value": "BUYER"
								},
								{
									"type": "text",
									"value": ")"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "imageUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The image that will be displayed on the checkout page."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "limitPerTransaction",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The maximum quantity the buyer is allowed to purchase in one transaction."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "Record<string, (string) | (number) | (null)>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Arbitrary data that will be included in webhooks and when viewing purchases in the paper.xyz dashboard."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The number of NFTs that will be purchased through the checkout flow."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "redirectAfterPayment",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If true, the checkout flow will redirect the user to the successCallbackUrl immediately after successful payment and bypass the final receipt page."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "sendEmailOnSuccess",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If true, Paper will send buyers an email when their purchase is transferred to their wallet. (default: true)"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "successCallbackUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The URL to prompt the user to navigate after they complete their purchase."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "title",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The title of the checkout."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "twitterHandleOverride",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Override the seller's Twitter handle for this checkout."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "walletAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The wallet address that the NFT will be sent to."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ParseTransactionReceipt",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L17",
			"typeParameters": [
				{
					"name": "TResult"
				}
			],
			"type": "((receipt: providers.TransactionReceipt) => TResult) | ((receipt: providers.TransactionReceipt) => Promise<TResult>)"
		},
		{
			"kind": "type",
			"name": "PayloadToSign1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L195",
			"type": "z.input<typeof Signature1155PayloadInput>"
		},
		{
			"kind": "type",
			"name": "PayloadToSign1155WithTokenId",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L199",
			"type": "z.input<typeof Signature1155PayloadInputWithTokenId>"
		},
		{
			"kind": "type",
			"name": "PayloadToSign20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L133",
			"type": "z.input<typeof Signature20PayloadInput>"
		},
		{
			"kind": "type",
			"name": "PayloadToSign721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L155",
			"type": "z.input<typeof Signature721PayloadInput>"
		},
		{
			"kind": "type",
			"name": "PayloadToSign721withQuantity",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L205",
			"type": "z.input<typeof Signature721WithQuantityInput>"
		},
		{
			"kind": "type",
			"name": "PayloadWithUri1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L185",
			"type": "z.output<typeof Signature1155PayloadOutput>"
		},
		{
			"kind": "type",
			"name": "PayloadWithUri20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L129",
			"type": "z.output<typeof Signature20PayloadOutput>"
		},
		{
			"kind": "type",
			"name": "PayloadWithUri721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L151",
			"type": "z.output<typeof Signature721PayloadOutput>"
		},
		{
			"kind": "type",
			"name": "PayloadWithUri721withQuantity",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L189",
			"type": "z.output<typeof Signature721WithQuantityOutput>"
		},
		{
			"kind": "type",
			"name": "PermissionSnapshotInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L59",
			"type": "z.input<typeof PermissionSnapshotSchema>"
		},
		{
			"kind": "type",
			"name": "PermissionSnapshotOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L60",
			"type": "z.output<typeof PermissionSnapshotSchema>"
		},
		{
			"kind": "type",
			"name": "PermitRequestMessage",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "EIP-2612 token permit message for gasless transaction"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L78",
			"type": "{ deadline: (number) | (string); nonce: (number) | (string); owner: string; r: string; s: string; spender: string; to: string; v: number; value: (number) | (string) }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "deadline",
					"type": "(number) | (string)"
				},
				{
					"kind": "subtype",
					"name": "nonce",
					"type": "(number) | (string)"
				},
				{
					"kind": "subtype",
					"name": "owner",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "r",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "s",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "spender",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "v",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "value",
					"type": "(number) | (string)"
				}
			]
		},
		{
			"kind": "type",
			"name": "PreDeployMetadataFetched",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L351",
			"type": "z.infer<typeof PreDeployMetadataFetchedSchema>"
		},
		{
			"kind": "type",
			"name": "PrebuiltContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L54",
			"type": "keyof typeof prebuiltContractTypes"
		},
		{
			"kind": "type",
			"name": "PrebuiltContractsInstances",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L722",
			"type": "{[K in keyof PrebuiltContractsMap] : Awaited<ReturnType<typeof PREBUILT_CONTRACTS_MAP[K][\"initialize\"]>>}"
		},
		{
			"kind": "type",
			"name": "PrebuiltContractsMap",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L721",
			"type": "typeof PREBUILT_CONTRACTS_MAP"
		},
		{
			"kind": "type",
			"name": "Price",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Represents a currency price already formatted. ie. \"1\" for 1 ether."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/currency.ts#L42",
			"type": "z.input<typeof AmountSchema>"
		},
		{
			"kind": "type",
			"name": "ProfileMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L301",
			"type": "z.infer<typeof ProfileSchemaOutput>"
		},
		{
			"kind": "type",
			"name": "ProfileMetadataInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L300",
			"type": "z.infer<typeof ProfileSchemaInput>"
		},
		{
			"kind": "type",
			"name": "PublishedContract",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L356",
			"type": "z.infer<typeof PublishedContractSchema>"
		},
		{
			"kind": "type",
			"name": "PublishedContractFetched",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L357",
			"type": "{ name: string; publishedMetadata: FullPublishMetadata; publishedTimestamp: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "publishedMetadata",
					"type": "FullPublishMetadata"
				},
				{
					"kind": "subtype",
					"name": "publishedTimestamp",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "PublishedMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/custom.ts#L380",
			"type": "z.infer<typeof CompilerMetadataFetchedSchema>"
		},
		{
			"kind": "type",
			"name": "QueryAllParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Pagination Parameters"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/QueryParams.ts#L23",
			"type": "Exclude<z.input<typeof QueryAllParamsSchema>, undefined>"
		},
		{
			"kind": "type",
			"name": "Role",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/role.ts#L22",
			"type": "keyof typeof roleMap"
		},
		{
			"kind": "type",
			"name": "SDKOptions",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "All these configuration options are optional with sane defaults:"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "{\n  readonlySettings: {\n    rpcUrl, // force read calls to go through your own RPC url\n    chainId, // reduce RPC calls by sepcifying your chain ID\n  },\n  gasSettings: {\n    maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n    speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n  },\n  gasless: {\n    // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n    openzeppelin: {\n      relayerUrl, // your OZ Defender relayer URL\n      relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n    },\n    biconomy: {\n      apiId, // your Biconomy API Id\n      apiKey, // your Biconomy API Key\n      deadlineSeconds, // your Biconomy timeout preference\n    },\n  },\n}"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/sdk-options.ts#L97",
			"type": "z.input<typeof SDKOptionsSchema>"
		},
		{
			"kind": "type",
			"name": "SUPPORTED_CHAIN_ID",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/chains/SUPPORTED_CHAIN_ID.ts#L6",
			"type": "(ChainId.Mainnet) | (ChainId.Goerli) | (ChainId.Mumbai) | (ChainId.Polygon) | (ChainId.Fantom) | (ChainId.FantomTestnet) | (ChainId.Avalanche) | (ChainId.AvalancheFujiTestnet) | (ChainId.Optimism) | (ChainId.OptimismGoerli) | (ChainId.Arbitrum) | (ChainId.ArbitrumGoerli) | (ChainId.BinanceSmartChainMainnet) | (ChainId.BinanceSmartChainTestnet) | (ChainId.Hardhat) | (ChainId.Localhost)"
		},
		{
			"kind": "type",
			"name": "SchemaForPrebuiltContractType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L734",
			"typeParameters": [
				{
					"name": "TContractType",
					"extendsType": "PrebuiltContractType"
				}
			],
			"type": "PrebuiltContractsMap[TContractType][\"schema\"]"
		},
		{
			"kind": "type",
			"name": "ShardData",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L25",
			"type": "{ entries: SnapshotEntry[]; proofs: string[] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "entries",
					"type": "SnapshotEntry[]"
				},
				{
					"kind": "subtype",
					"name": "proofs",
					"type": "string[]"
				}
			]
		},
		{
			"kind": "type",
			"name": "ShardedMerkleTreeInfo",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L29",
			"type": "{ baseUri: string; isShardedMerkleTree: true; merkleRoot: string; originalEntriesUri: string; shardNybbles: number; tokenDecimals: number }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "baseUri",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "isShardedMerkleTree",
					"type": "true"
				},
				{
					"kind": "subtype",
					"name": "merkleRoot",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "originalEntriesUri",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "shardNybbles",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "tokenDecimals",
					"type": "number"
				}
			]
		},
		{
			"kind": "type",
			"name": "ShardedSnapshot",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L38",
			"type": "{ shardedMerkleInfo: ShardedMerkleTreeInfo; uri: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "shardedMerkleInfo",
					"type": "ShardedMerkleTreeInfo"
				},
				{
					"kind": "subtype",
					"name": "uri",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedPayload1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L211",
			"type": "{ payload: PayloadWithUri1155; signature: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "PayloadWithUri1155"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedPayload20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L137",
			"type": "{ payload: PayloadWithUri20; signature: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "PayloadWithUri20"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedPayload721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L159",
			"type": "{ payload: PayloadWithUri721; signature: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "PayloadWithUri721"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedPayload721WithQuantitySignature",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/signature.ts#L219",
			"type": "{ payload: PayloadWithUri721withQuantity; signature: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "PayloadWithUri721withQuantity"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedSignerPermissionsPayload",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L64",
			"type": "{ payload: IAccountPermissions.SignerPermissionRequestStruct; signature: BytesLike }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "IAccountPermissions.SignerPermissionRequestStruct"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "BytesLike"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignedSignerPermissionsPayloadV1",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L69",
			"type": "{ payload: IAccountPermissions_V1.SignerPermissionRequestStruct; signature: BytesLike }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "payload",
					"type": "IAccountPermissions_V1.SignerPermissionRequestStruct"
				},
				{
					"kind": "subtype",
					"name": "signature",
					"type": "BytesLike"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignerOrProvider",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L39",
			"type": "(Signer) | (providers.Provider)"
		},
		{
			"kind": "type",
			"name": "SignerPermissions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L11",
			"type": "{ approvedCallTargets: string[]; expirationDate: Date; nativeTokenLimitPerTransaction: BigNumber; startDate: Date }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "approvedCallTargets",
					"type": "string[]"
				},
				{
					"kind": "subtype",
					"name": "expirationDate",
					"type": "Date"
				},
				{
					"kind": "subtype",
					"name": "nativeTokenLimitPerTransaction",
					"type": "BigNumber"
				},
				{
					"kind": "subtype",
					"name": "startDate",
					"type": "Date"
				}
			]
		},
		{
			"kind": "type",
			"name": "SignerPermissionsInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L41",
			"type": "z.input<typeof SignerPermissionsSchema>"
		},
		{
			"kind": "type",
			"name": "SignerPermissionsOutput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L42",
			"type": "z.output<typeof SignerPermissionsSchema>"
		},
		{
			"kind": "type",
			"name": "SignerWithPermissions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L44",
			"type": "{ isAdmin: boolean; permissions: SignerPermissions; signer: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "isAdmin",
					"type": "boolean"
				},
				{
					"kind": "subtype",
					"name": "permissions",
					"type": "SignerPermissions"
				},
				{
					"kind": "subtype",
					"name": "signer",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "Snapshot",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L30",
			"type": "z.output<typeof SnapshotSchema>"
		},
		{
			"kind": "type",
			"name": "SnapshotEntry",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/contracts/common/snapshots.ts#L24",
			"type": "z.output<typeof SnapshotEntryInput>"
		},
		{
			"kind": "type",
			"name": "SnapshotInfo",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L25",
			"type": "z.output<typeof SnapshotInfoSchema>"
		},
		{
			"kind": "type",
			"name": "SnapshotInput",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Input model to pass a snapshot of addresses + amount claimable for a claim condition"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/claim-conditions/claim-conditions.ts#L36",
			"type": "z.input<typeof SnapshotInputSchema>"
		},
		{
			"kind": "type",
			"name": "TAbiFunctionNames",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/contract.ts#L25",
			"typeParameters": [
				{
					"name": "TAbi",
					"extendsType": "Abi"
				}
			],
			"type": "ExtractAbiFunctionNames<TAbi>"
		},
		{
			"kind": "type",
			"name": "TokenHolderBalance",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "A token holder address and its current balance"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/currency.ts#L36",
			"type": "{ balance: CurrencyValue; holder: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "balance",
					"type": "CurrencyValue"
				},
				{
					"kind": "subtype",
					"name": "holder",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "TokenMetadata",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Metadata for a token"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/core/schema/token.ts#L45",
			"type": "z.output<typeof CommonTokenOutputSchema>"
		},
		{
			"kind": "type",
			"name": "TokenMintInput",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/schema/tokens/token.ts#L17",
			"type": "z.input<typeof TokenMintInputSchema>"
		},
		{
			"kind": "type",
			"name": "TokensToWrap",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Input for wrapping any number of tokens"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/multiwrap.ts#L32",
			"type": "{ erc1155Tokens: ERC1155Wrappable[]; erc20Tokens: ERC20Wrappable[]; erc721Tokens: ERC721Wrappable[] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "erc1155Tokens",
					"type": "ERC1155Wrappable[]"
				},
				{
					"kind": "subtype",
					"name": "erc20Tokens",
					"type": "ERC20Wrappable[]"
				},
				{
					"kind": "subtype",
					"name": "erc721Tokens",
					"type": "ERC721Wrappable[]"
				}
			]
		},
		{
			"kind": "type",
			"name": "TransactionContextOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L21",
			"type": "{ args: any[]; overrides: CallOverrides; provider: providers.Provider; signer: Signer; storage: ThirdwebStorage }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "args",
					"type": "any[]"
				},
				{
					"kind": "subtype",
					"name": "overrides",
					"type": "CallOverrides"
				},
				{
					"kind": "subtype",
					"name": "provider",
					"type": "providers.Provider"
				},
				{
					"kind": "subtype",
					"name": "signer",
					"type": "Signer"
				},
				{
					"kind": "subtype",
					"name": "storage",
					"type": "ThirdwebStorage"
				}
			]
		},
		{
			"kind": "type",
			"name": "TransactionErrorInfo",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L269",
			"type": "{ contractName: string; data: string; from: string; hash: string; method: string; network: providers.Network; reason: string; rpcUrl: string; sources: ContractSource[]; to: string; value: BigNumber }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "contractName",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "data",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "from",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "hash",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "method",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "network",
					"type": "providers.Network"
				},
				{
					"kind": "subtype",
					"name": "reason",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "rpcUrl",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "sources",
					"type": "ContractSource[]"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "value",
					"type": "BigNumber"
				}
			]
		},
		{
			"kind": "type",
			"name": "TransactionOptionsWithContract",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L48",
			"typeParameters": [
				{
					"name": "TResult"
				}
			],
			"type": "Omit<TransactionOptions<TResult>, \"contract\"> & { contract: Contract; provider: providers.Provider; signer: Signer }"
		},
		{
			"kind": "type",
			"name": "TransactionOptionsWithContractInfo",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L57",
			"typeParameters": [
				{
					"name": "TResult"
				}
			],
			"type": "Omit<TransactionOptionsWithContract<TResult>, \"contract\"> & { contractAbi: ContractInterface; contractAddress: string; provider: providers.Provider }"
		},
		{
			"kind": "type",
			"name": "TransactionOptionsWithContractWrapper",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/transactions.ts#L38",
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				},
				{
					"name": "TResult"
				},
				{
					"name": "TMethod",
					"extendsType": "keyof TContract[\"functions\"]"
				}
			],
			"type": "Omit<TransactionOptions<TResult>, \"storage\"> & { args: Parameters<TContract[\"functions\"][TMethod]>; contractWrapper: ContractWrapper<TContract>; method: TMethod }"
		},
		{
			"kind": "type",
			"name": "TransactionResult",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L54",
			"typeParameters": [
				{
					"name": "T"
				}
			],
			"type": "If<Equals<T, never>, Omit<TransactionResultWithMetadata, \"data\">, TransactionResultWithMetadata<T>>"
		},
		{
			"kind": "type",
			"name": "TransactionResultWithAddress",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L50",
			"typeParameters": [
				{
					"name": "T"
				}
			],
			"type": "TransactionResult<T> & { address: string }"
		},
		{
			"kind": "type",
			"name": "TransactionResultWithId",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L46",
			"typeParameters": [
				{
					"name": "T"
				}
			],
			"type": "TransactionResult<T> & { id: BigNumber }"
		},
		{
			"kind": "type",
			"name": "ValidContractInstance",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/index.ts#L730",
			"type": "(Awaited<ReturnType<ContractsMap[keyof PrebuiltContractsMap][\"initialize\"]>>) | (SmartContractType)"
		},
		{
			"kind": "type",
			"name": "ValueOf",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/types.ts#L37",
			"typeParameters": [
				{
					"name": "T"
				}
			],
			"type": "T[keyof T]"
		},
		{
			"kind": "type",
			"name": "WatchBlockNumberParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L12",
			"type": "SharedBlockParams & { onBlockNumber: (blockNumber: number) => void }"
		},
		{
			"kind": "type",
			"name": "WatchBlockParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L45",
			"type": "SharedBlockParams & { onBlock: (block: Block) => void }"
		},
		{
			"kind": "type",
			"name": "WatchBlockWithTransactionsParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchBlock.ts#L91",
			"type": "SharedBlockParams & { onBlock: (block: BlockWithTransactions) => void }"
		},
		{
			"kind": "type",
			"name": "WatchTransactionsParams",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/functions/watchTransactions.ts#L6",
			"type": "SharedBlockParams & { onTransactions: (transactions: Transaction[]) => void } & { address: string }"
		},
		{
			"kind": "type",
			"name": "WrappedTokens",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Output for the contents of a bundle wrapped token"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/multiwrap.ts#L41",
			"type": "{ erc1155Tokens: ERC1155Wrappable[]; erc20Tokens: ERC20Wrappable[]; erc721Tokens: ERC721Wrappable[] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "erc1155Tokens",
					"type": "ERC1155Wrappable[]"
				},
				{
					"kind": "subtype",
					"name": "erc20Tokens",
					"type": "ERC20Wrappable[]"
				},
				{
					"kind": "subtype",
					"name": "erc721Tokens",
					"type": "ERC721Wrappable[]"
				}
			]
		}
	],
	"enums": [
		{
			"kind": "enum",
			"name": "AdminFlag",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/types/account.ts#L18",
			"members": [
				{
					"name": "AddAdmin",
					"value": "1"
				},
				{
					"name": "None",
					"value": "0"
				},
				{
					"name": "RemoveAdmin",
					"value": "2"
				}
			]
		},
		{
			"kind": "enum",
			"name": "ChainId",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/chains/ChainId.ts#L4",
			"members": [
				{
					"name": "Arbitrum",
					"value": "42161"
				},
				{
					"name": "ArbitrumGoerli",
					"value": "421613"
				},
				{
					"name": "Avalanche",
					"value": "43114"
				},
				{
					"name": "AvalancheFujiTestnet",
					"value": "43113"
				},
				{
					"name": "BinanceSmartChainMainnet",
					"value": "56"
				},
				{
					"name": "BinanceSmartChainTestnet",
					"value": "97"
				},
				{
					"name": "Fantom",
					"value": "250"
				},
				{
					"name": "FantomTestnet",
					"value": "4002"
				},
				{
					"name": "Goerli",
					"value": "5"
				},
				{
					"name": "Hardhat",
					"value": "31337"
				},
				{
					"name": "Localhost",
					"value": "1337"
				},
				{
					"name": "Mainnet",
					"value": "1"
				},
				{
					"name": "Mumbai",
					"value": "80001"
				},
				{
					"name": "Optimism",
					"value": "10"
				},
				{
					"name": "OptimismGoerli",
					"value": "420"
				},
				{
					"name": "Polygon",
					"value": "137"
				}
			]
		},
		{
			"kind": "enum",
			"name": "ClaimEligibility",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/enums/ClaimEligibility.ts#L1",
			"members": [
				{
					"name": "AddressNotAllowed",
					"value": "\"This address is not on the allowlist.\""
				},
				{
					"name": "AlreadyClaimed",
					"value": "\"You have already claimed the token.\""
				},
				{
					"name": "ClaimPhaseNotStarted",
					"value": "\"Claim phase has not started yet.\""
				},
				{
					"name": "NoActiveClaimPhase",
					"value": "\"There is no active claim phase at the moment. Please check back in later.\""
				},
				{
					"name": "NoClaimConditionSet",
					"value": "\"There is no claim condition set.\""
				},
				{
					"name": "NoWallet",
					"value": "\"No wallet connected.\""
				},
				{
					"name": "NotEnoughSupply",
					"value": "\"There is not enough supply to claim.\""
				},
				{
					"name": "NotEnoughTokens",
					"value": "\"There are not enough tokens in the wallet to pay for the claim.\""
				},
				{
					"name": "OverMaxClaimablePerWallet",
					"value": "\"Cannot claim more than maximum allowed quantity.\""
				},
				{
					"name": "Unknown",
					"value": "\"No claim conditions found.\""
				},
				{
					"name": "WaitBeforeNextClaimTransaction",
					"value": "\"Not enough time since last claim transaction. Please wait.\""
				},
				{
					"name": "WrongPriceOrCurrency",
					"value": "\"Incorrect price or currency.\""
				}
			]
		},
		{
			"kind": "enum",
			"name": "EventType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/constants/events.ts#L4",
			"members": [
				{
					"name": "Signature",
					"value": "\"signature\"",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The event is triggered when wallet sign message is requested and completed."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "status: \"submitted\" | \"completed\"\nmessage: message to sign\nsignature: signature of the message (only available when status is \"completed\")"
								}
							]
						}
					]
				},
				{
					"name": "Transaction",
					"value": "\"transaction\"",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The event is triggered when the transaction is submitted and completed.\nThe transaction is submitted when it is sent to the relayer or the blockchain.\nThe transaction is completed when it is confirmed by the blockchain."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "status: \"submitted\" | \"completed\"\ntransactionHash: string of the transaction hash"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "enum",
			"name": "ListingType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/enums/marketplace/ListingType.ts#L1",
			"members": [
				{
					"name": "Auction",
					"value": "1"
				},
				{
					"name": "Direct",
					"value": "0"
				}
			]
		},
		{
			"kind": "enum",
			"name": "ProposalState",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/enums/vote/ProposalState.ts#L1",
			"members": [
				{
					"name": "Active",
					"value": "1"
				},
				{
					"name": "Canceled",
					"value": "2"
				},
				{
					"name": "Defeated",
					"value": "3"
				},
				{
					"name": "Executed",
					"value": "7"
				},
				{
					"name": "Expired",
					"value": "6"
				},
				{
					"name": "Pending",
					"value": "0"
				},
				{
					"name": "Queued",
					"value": "5"
				},
				{
					"name": "Succeeded",
					"value": "4"
				}
			]
		},
		{
			"kind": "enum",
			"name": "Status",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/enums/marketplace/Status.ts#L1",
			"members": [
				{
					"name": "Active",
					"value": "4"
				},
				{
					"name": "Cancelled",
					"value": "3"
				},
				{
					"name": "Completed",
					"value": "2"
				},
				{
					"name": "Created",
					"value": "1"
				},
				{
					"name": "Expired",
					"value": "5"
				},
				{
					"name": "UNSET",
					"value": "0"
				}
			]
		},
		{
			"kind": "enum",
			"name": "VoteType",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/enums/vote/Vote.ts#L1",
			"members": [
				{
					"name": "Abstain",
					"value": "2"
				},
				{
					"name": "Against",
					"value": "0"
				},
				{
					"name": "For",
					"value": "1"
				}
			]
		}
	],
	"classes": [
		{
			"kind": "class",
			"name": "Account",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L21",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IAccountCore>"
							}
						],
						"returns": {
							"type": "Account<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "IAccountCore"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L28"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectAccountPermissions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (AccountPermissions)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L33"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L49"
				},
				{
					"kind": "function",
					"name": "getAllAdmins",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all admins of the account."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "all admins of the account."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allAdmins = await contract.account.getAllAdmins();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountPermissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L107"
				},
				{
					"kind": "function",
					"name": "getAllAdminsAndSigners",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all admins and non-admin signers with permissions to use the account."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignerWithPermissions[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "all admins and non-admin signers with permissions to use the account."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountPermissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L145"
				},
				{
					"kind": "function",
					"name": "getAllSigners",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all (non-admin) signers with permissions to use the account."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignerWithPermissions[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "all (non-admin) signers with permissions to use the account."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allSigners = await contract.account.getAllSigners();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountPermissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L126"
				},
				{
					"kind": "function",
					"name": "isAdmin",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether a signer is an admin on the account."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signerAddress",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "whether a signer is an admin on the account."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const isAdmin = await contract.account.isAdmin(signer);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountPermissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L69"
				},
				{
					"kind": "function",
					"name": "isSigner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether a signer has permissions to use the account."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signerAddress",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "whether a signer has permissions to use the account."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const isAdmin = await contract.account.isSigner(signer);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountPermissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L88"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "accountPermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L26",
					"type": "(undefined) | (AccountPermissions)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "approveTargetForSigner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L300",
					"type": "{ (...args: [signerAddress: string, target: string]) : Promise<TResult> ; prepare: (...args: [signerAddress: string, target: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "approveTargetForSigner",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Approve an address as a call target for a given signer on the account"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, target: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Approves an address as a call target for a given signer on the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.approveTargetForSigner(signer, target);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, target: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L25",
					"type": "ContractWrapper<IAccountCore>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "disapproveTargetForSigner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L325",
					"type": "{ (...args: [signerAddress: string, target: string]) : Promise<TResult> ; prepare: (...args: [signerAddress: string, target: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "disapproveTargetForSigner",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Disapprove an address as a call target for a given signer on the account"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, target: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Disapprove an address as a call target for a given signer on the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.disapproveTargetForSigner(signer, target);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, target: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L24",
					"type": "\"Account\""
				},
				{
					"kind": "variable",
					"name": "grantAdminPermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L171",
					"type": "{ (...args: [signerAddress: string]) : Promise<TResult> ; prepare: (...args: [signerAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "grantAdminPermissions",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Grant an address admin access to the account."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Grants an address admin access to the account. The admin will have complete authority over the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.grantAdminAccess(signer);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "grantPermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L220",
					"type": "{ (...args: [signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]) : Promise<TResult> ; prepare: (...args: [signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "grantPermissions",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Grant a signer permissions to use the account."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Grants a signer permissions to use the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.grantPermissions(signer, permissions);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "resetAllPermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L349",
					"type": "{ (...args: [permissionSnapshot: Array<{ makeAdmin: boolean; permissions: { approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); startDate?: number | Date | undefined; expirationDate?: number | Date | undefined; nativeTokenLimitPerTransaction?: string | ... 1 more ... | undefined; }; signer: string }>]) : Promise<TResult> ; prepare: (...args: [permissionSnapshot: Array<{ makeAdmin: boolean; permissions: { approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); startDate?: number | Date | undefined; expirationDate?: number | Date | undefined; nativeTokenLimitPerTransaction?: string | ... 1 more ... | undefined; }; signer: string }>]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "resetAllPermissions",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the account's entire snapshot of permissions."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[permissionSnapshot: Array<{ makeAdmin: boolean; permissions: { approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); startDate?: number | Date | undefined; expirationDate?: number | Date | undefined; nativeTokenLimitPerTransaction?: string | ... 1 more ... | undefined; }; signer: string }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Sets the account's entire snapshot of permissions."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.setAccess(permissionSnapshot);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[permissionSnapshot: Array<{ makeAdmin: boolean; permissions: { approvedCallTargets: (string[] | \"*\") & (string[] | \"*\" | undefined); startDate?: number | Date | undefined; expirationDate?: number | Date | undefined; nativeTokenLimitPerTransaction?: string | ... 1 more ... | undefined; }; signer: string }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "revokeAccess",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L275",
					"type": "{ (...args: [signerAddress: string]) : Promise<TResult> ; prepare: (...args: [signerAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revokeAccess",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke a scoped access address to the account"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Revokes an address' access to the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.revokeAccess(signer);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "revokeAdminPermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L195",
					"type": "{ (...args: [signerAddress: string]) : Promise<TResult> ; prepare: (...args: [signerAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revokeAdminPermissions",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke an address' admin access to the account."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Revokes an address' admin access to the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.revokeAdminAccess(signer);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "updatePermissions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account.ts#L248",
					"type": "{ (...args: [signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]) : Promise<TResult> ; prepare: (...args: [signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "updatePermissions",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update the permissions of a signer for using the account."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Updates the permissions of a signer for using the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.account.updateAccess(signer, restrictions);\nconst receipt = tx.receipt();"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountPermissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signerAddress: string, permissions: { approvedCallTargets: Object; expirationDate: (number) | (Date); nativeTokenLimitPerTransaction: (string) | (number); startDate: (number) | (Date) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "IAccountCore"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "AccountFactory",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L15",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IAccountFactory>"
							}
						],
						"returns": {
							"type": "AccountFactory<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "IAccountFactory"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L24"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L30"
				},
				{
					"kind": "function",
					"name": "getAllAccounts",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all accounts"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "all accounts created via the account factory."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allAccounts = await contract.accountFactory.getAllAccounts();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountFactory"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L90"
				},
				{
					"kind": "function",
					"name": "getAssociatedAccounts",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all accounts on which the given signer has authority"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signer",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The account address."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "all accounts on which the given signer has authority."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountFactory"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L74"
				},
				{
					"kind": "function",
					"name": "isAccountDeployed",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check if a account has been deployed for the given admin"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "admin",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The admin of the account."
												}
											]
										}
									]
								},
								{
									"name": "extraData",
									"type": "BytesLike",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "(Optional) Extra data to be passed to the account on creation."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "whether the account has been deployed for the given admin."
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L101"
				},
				{
					"kind": "function",
					"name": "predictAccountAddress",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the deterministic address of the account that will be created"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "admin",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The admin of the account."
												}
											]
										}
									]
								},
								{
									"name": "extraData",
									"type": "BytesLike",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "(Optional) Extra data to be passed to the account on creation."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the deterministic address of the account that will be created for the given admin."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const accountAddress = await contract.accountFactory.predictAccountAddress(admin);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AccountFactory"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L51"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L19",
					"type": "ContractWrapper<IAccountFactory>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createAccount",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L130",
					"type": "{ (...args: [accountAdmin: string, extraData: BytesLike]) : Promise<TResult> ; prepare: (...args: [accountAdmin: string, extraData: BytesLike]) => Promise<Transaction<TransactionResultWithAddress>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createAccount",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a account"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[accountAdmin: string, extraData: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a account for an admin. The admin will have complete authority over the account."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.accountFactory.createAccount(admin, extraData);\nconst receipt = tx.receipt();\nconst accountAddress = tx.address;"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AccountFactory"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[accountAdmin: string, extraData: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithAddress>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L22",
					"type": "ContractEvents<IAccountFactory>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/account-factory.ts#L18",
					"type": "\"AccountFactory\""
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "IAccountFactory"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractAppURI",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L29",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Have an official Application URI for this contract."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure an official Application URI for this contract."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst appURI = await contract.app.get();\nappURI = \"ipfs://some_ipfs_hash\";\n\nawait contract.app.set(appURI)"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							},
							{
								"name": "metadata",
								"type": "ContractMetadata<BaseContract, any>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "ContractAppURI<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L37"
			},
			"methods": [
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get App URI"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the appURI (typically an IPFS hash)"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const appURI = await contract.app.get();\nconsole.log(appURI) // \"ipfs://some_ipfs_hash\";"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "AppURI"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L57"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L33",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L32",
					"type": "\"AppURI\""
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L34",
					"type": "ContractMetadata<BaseContract, any>"
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L78",
					"type": "{ (...args: [appURI: string]) : Promise<TResult> ; prepare: (...args: [appURI: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set App URI"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[appURI: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const appURI = \"ipfs://some_ipfs_hash\";\nawait contract.app.set(appURI);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "AppURI"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[appURI: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-appuri.ts#L35",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractDeployer",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L909",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles deploying new contracts"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "ContractDeployer"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L932"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addDeployListener",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Listen to all deploy transactions from this deployer"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listener",
									"type": "(event: DeployEvent) => void",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listener to add"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2378"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "deployPublishedContractDeterministic",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Deploy any published contract by its name"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractName",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the name of the contract to deploy"
												}
											]
										}
									]
								},
								{
									"name": "constructorParams",
									"type": "any[]",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the constructor params to pass to the contract"
												}
											]
										}
									]
								},
								{
									"name": "publisherAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the publisher"
												}
											]
										}
									]
								},
								{
									"name": "contractVersion",
									"type": "string"
								},
								{
									"name": "saltForCreate2",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional: salt for create2 deployment, will determine deployment address"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1690"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "any[]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "(string) | (symbol)[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "fetchPublishedContractFromPolygon",
					"signatures": [
						{
							"parameters": [
								{
									"name": "publisherAddress",
									"type": "string"
								},
								{
									"name": "contractName",
									"type": "string"
								},
								{
									"name": "version",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ id: string; metadataUri: string; timestamp: string }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2399"
				},
				{
					"kind": "function",
					"name": "getFactory",
					"signatures": [
						{
							"returns": {
								"type": "Promise<(undefined) | (ContractFactory)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2027"
				},
				{
					"kind": "function",
					"name": "getProvider",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explicitly get the active provider."
										}
									]
								}
							],
							"returns": {
								"type": "Provider",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the active provider"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L68"
				},
				{
					"kind": "function",
					"name": "getSigner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explicitly get the active signer."
										}
									]
								}
							],
							"returns": {
								"type": "(undefined) | (Signer)",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the active signer, if there is one"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L60"
				},
				{
					"kind": "function",
					"name": "getSignerOrProvider",
					"signatures": [
						{
							"summary": [],
							"returns": {
								"type": "(Signer) | (Provider)",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the current signer if there is one, otherwise the active provider"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L76"
				},
				{
					"kind": "function",
					"name": "getTransactionsForDeploy",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"parameters": [
								{
									"name": "publishMetadataUri",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the uri of the publish metadata"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "DeployOptions",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the deploy options"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<DeploymentTransaction[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2259"
				},
				{
					"kind": "function",
					"name": "hasLocalFactory",
					"signatures": [
						{
							"returns": {
								"type": "boolean"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2425"
				},
				{
					"kind": "function",
					"name": "isReadOnly",
					"signatures": [
						{
							"summary": [],
							"returns": {
								"type": "boolean",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "whether or not a signer is set, "
											},
											{
												"type": "inlineCode",
												"value": "true"
											},
											{
												"type": "text",
												"value": " if there is no signer so the class is in \"read only\" mode"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L52"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "(...args: any[]) => void[]"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "predictAddressDeterministic",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Predict Create2 address of a contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractName",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the name of the contract"
												}
											]
										}
									]
								},
								{
									"name": "constructorParams",
									"type": "any[]",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the constructor params to pass to the contract"
												}
											]
										}
									]
								},
								{
									"name": "publisherAddress",
									"type": "string"
								},
								{
									"name": "contractVersion",
									"type": "string"
								},
								{
									"name": "saltForCreate2",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional: salt for create2 deployment, will determine deployment address"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1721"
				},
				{
					"kind": "function",
					"name": "removeAllDeployListeners",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all deploy listeners"
										}
									]
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2393"
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeDeployListener",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove a deploy listener"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listener",
									"type": "(event: DeployEvent) => void",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listener to remove"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2386"
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ContractDeployer"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "transactionListener",
					"signatures": [
						{
							"parameters": [
								{
									"name": "event",
									"type": "any"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L923"
				},
				{
					"kind": "function",
					"name": "updateContractSignerOrProvider",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2062"
				},
				{
					"kind": "function",
					"name": "updateSignerOrProvider",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L2057"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "deployAirdropERC1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1511",
					"type": "{ (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployAirdropERC1155",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployAirdropERC20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1449",
					"type": "{ (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployAirdropERC20",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployAirdropERC721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1480",
					"type": "{ (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: AirdropContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployAirdropERC721",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: AirdropContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployEdition",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1192",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployEdition",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Edition contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys an Edition contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployEditionDrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1221",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployEditionDrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new EditionDrop contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys an Edition Drop contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployLoyaltyCard",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1018",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployLoyaltyCard",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new LoyaltyCard contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a LoyaltyCard contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployLoyaltyCard({\n  name: \"My Loyalty Program\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployMarketplace",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1308",
					"type": "{ (...args: [metadata: MarketplaceContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: MarketplaceContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployMarketplace",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Marketplace contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MarketplaceContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Marketplace contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MarketplaceContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployMarketplaceV3",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1337",
					"type": "{ (...args: [metadata: MarketplaceV3ContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: MarketplaceV3ContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployMarketplaceV3",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Marketplace-V3 contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MarketplaceV3ContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Marketplace-V3 contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployMarketplaceV3({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MarketplaceV3ContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployMultiwrap",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1163",
					"type": "{ (...args: [metadata: MultiwrapContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: MultiwrapContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployMultiwrap",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Multiwrap contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MultiwrapContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Multiwrap contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: MultiwrapContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployNFTCollection",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L960",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployNFTCollection",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys an NFT Collection contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys an NFT Collection contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployNFTDrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L989",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployNFTDrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new NFTDrop contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys an NFT Drop contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployOpenEdition",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1077",
					"type": "{ (...args: [metadata: OpenEditionContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: OpenEditionContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployOpenEdition",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new OpenEditionERC721 contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: OpenEditionContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a OpenEdition contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployOpenEdition({\n  name: \"My Open Edition\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: OpenEditionContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployPack",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1366",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployPack",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Pack contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Pack contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployProxy",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1797",
					"type": "{ (...args: [implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[]]) : Promise<string> ; prepare: (...args: [implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[]]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployProxy",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy a proxy contract of a given implementation directly"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployPublishedContract",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1680",
					"type": "{ (...args: [publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]) : Promise<string> ; prepare: (...args: [publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployPublishedContract",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy any published contract by its name"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployReleasedContract",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1651",
					"type": "{ (...args: [publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]) : Promise<string> ; prepare: (...args: [publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployReleasedContract",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy any published contract by its name"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									},
									"blockTags": [
										{
											"tag": "@deprecated",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "use deployPublishedContract instead"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[publisherAddress: string, contractName: string, constructorParams: any[], version: any, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deploySignatureDrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1134",
					"type": "{ (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: NFTContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deploySignatureDrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new SignatureDrop contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a SignatureDrop contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deploySignatureDrop({\n  name: \"My Signature Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: NFTContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deploySplit",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1405",
					"type": "{ (...args: [metadata: SplitContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: SplitContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deploySplit",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Split contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: SplitContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Split contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: SplitContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployToken",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1250",
					"type": "{ (...args: [metadata: TokenContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: TokenContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployToken",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Token contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: TokenContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Token contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: TokenContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployTokenDrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1279",
					"type": "{ (...args: [metadata: TokenContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: TokenContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployTokenDrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Token Drop contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: TokenContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys a Token Drop contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: TokenContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployViaAutoFactory",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1828",
					"type": "{ (...args: [publishMetadataUri: string, deployMetadata: DeployMetadata, signer: Signer, initializerFunction: string, paramValues: any[], options: DeployOptions]) : Promise<string> ; prepare: (...args: [publishMetadataUri: string, deployMetadata: DeployMetadata, signer: Signer, initializerFunction: string, paramValues: any[], options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployViaAutoFactory",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy a proxy contract of a given implementation via thirdweb's Clone factory"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[publishMetadataUri: string, deployMetadata: DeployMetadata, signer: Signer, initializerFunction: string, paramValues: any[], options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[publishMetadataUri: string, deployMetadata: DeployMetadata, signer: Signer, initializerFunction: string, paramValues: any[], options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployViaCustomFactory",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1927",
					"type": "{ (...args: [constructorParamValues: any[], deployMetadata: DeployMetadata, signer: Signer, chainId: number]) : Promise<string> ; prepare: (...args: [constructorParamValues: any[], deployMetadata: DeployMetadata, signer: Signer, chainId: number]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployViaCustomFactory",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy a proxy contract of a given implementation via a custom factory"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[constructorParamValues: any[], deployMetadata: DeployMetadata, signer: Signer, chainId: number]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[constructorParamValues: any[], deployMetadata: DeployMetadata, signer: Signer, chainId: number]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployViaFactory",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1752",
					"type": "{ (...args: [factoryAddress: string, implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[], saltForProxyDeploy: string]) : Promise<TResult> ; prepare: (...args: [factoryAddress: string, implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[], saltForProxyDeploy: string]) => Promise<Transaction<string>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployViaFactory",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploy a proxy contract of a given implementation via the given factory"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[factoryAddress: string, implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[], saltForProxyDeploy: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[factoryAddress: string, implementationAddress: string, implementationAbi: ContractInterface, initializerFunction: string, initializerArgs: any[], saltForProxyDeploy: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<string>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "deployVote",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L1435",
					"type": "{ (...args: [metadata: VoteContractDeployMetadata, options: DeployOptions]) : Promise<string> ; prepare: (...args: [metadata: VoteContractDeployMetadata, options: DeployOptions]) => Promise<DeployTransaction> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "deployVote",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Deploys a new Vote contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: VoteContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<string>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the address of the deployed contract"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Deploys an Vote contract and returns the address of the deployed contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L10"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: VoteContractDeployMetadata, options: DeployOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<DeployTransaction>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L8"
						}
					]
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L921",
					"type": "EventEmitter<DeployEvents, any>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "network",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L18",
					"type": "NetworkInput",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L19",
					"type": "{ clientId: string; gasSettings: { maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }; gasless: ({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "clientId",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "gasSettings",
							"type": "{ maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }"
						},
						{
							"kind": "subtype",
							"name": "gasless",
							"type": "({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; })"
						},
						{
							"kind": "subtype",
							"name": "gatewayUrls",
							"type": "string[]"
						},
						{
							"kind": "subtype",
							"name": "readonlySettings",
							"type": "{ rpcUrl: string; chainId?: number | undefined; }"
						},
						{
							"kind": "subtype",
							"name": "secretKey",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "supportedChains",
							"type": "Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }>"
						}
					],
					"flags": {
						"isPublic": true,
						"isReadonly": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L920",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "ContractEncoder",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-encoder.ts#L8",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Encodes and decodes Contract functions"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							}
						],
						"returns": {
							"type": "ContractEncoder<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-encoder.ts#L11"
			},
			"methods": [
				{
					"kind": "function",
					"name": "decode",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Decode encoded call data for a given function"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "fn",
									"type": "keyof TContract[\"functions\"]",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the function to decode"
												}
											]
										}
									]
								},
								{
									"name": "encodedArgs",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the encoded arguments"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Result"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-encoder.ts#L34"
				},
				{
					"kind": "function",
					"name": "encode",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Encodes the given contract function with argument"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "fn",
									"type": "keyof TContract[\"functions\"]"
								},
								{
									"name": "args",
									"type": "Parameters<TContract[\"functions\"][keyof TContract[\"functions\"]]>"
								}
							],
							"returns": {
								"type": "string",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the encoded data"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-encoder.ts#L19"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-encoder.ts#L9",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				}
			]
		},
		{
			"kind": "class",
			"name": "ContractEvents",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L11",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Listen to Contract events in real time"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							}
						],
						"returns": {
							"type": "ContractEvents<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L14"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addEventListener",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Subscribe to contract events"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "eventName",
									"type": "(string & {  }) | (keyof TContract[\"filters\"])",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the event name as defined in the contract"
												}
											]
										}
									]
								},
								{
									"name": "listener",
									"type": "(event: ContractEvent<TEvent>) => void",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the callback function that will be called on every new event"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "() => void",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "a function to un-subscribe from the event"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TEvent",
									"extendsType": "Record<string, any>"
								}
							],
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "You can add a listener for any contract event to run a function when\nthe event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\nyou could do the following:"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L66"
				},
				{
					"kind": "function",
					"name": "addTransactionListener",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Subscribe to transactions in this contract."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listener",
									"type": "ListenerFn<any[]>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the callback function that will be called on every transaction"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L30"
				},
				{
					"kind": "function",
					"name": "getAllEvents",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Events"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filters",
									"type": "Omit<EventQueryOptions<Record<string, any>>, \"filters\">",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Specify the from and to block numbers to get events for, defaults to all blocks"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ContractEvent<TEvent>[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The event objects of the events emitted with event names and data for each event"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TEvent",
									"extendsType": "Record<string, any>"
								}
							],
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a list of all the events emitted from this contract during the specified time period"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L205"
				},
				{
					"kind": "function",
					"name": "getEvents",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Events"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "eventName",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The name of the event to get logs for"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "EventQueryOptions<TFilter>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Specify the from and to block numbers to get events for, defaults to all blocks."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ContractEvent<TEvent>[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The requested event objects with event data"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TEvent",
									"extendsType": "Record<string, any>"
								},
								{
									"name": "TFilter",
									"extendsType": "Record<string, any>"
								}
							],
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a list of the events of a specific type emitted from this contract during the specified time period"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n\n// Optionally pass in options to limit the blocks from which events are retrieved\nconst options = {\n  fromBlock: 0,\n  toBlock: 1000000, // can also pass \"latest\"\n  order: \"desc\",\n  // Configure event filters (filter on indexed event parameters)\n  filters: {\n    from: \"0x...\",\n    to: \"0x...\"\n  }\n};\n\nconst events = await contract.events.getEvents(eventName, options);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
										}
									]
								},
								{
									"tag": "@see",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EventQueryOptions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L256"
				},
				{
					"kind": "function",
					"name": "listenToAllEvents",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Listen to all events emitted from this contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listener",
									"type": "(event: ContractEvent<TEvent>) => void",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the callback function that will be called on every new event"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "() => void",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "A function that can be called to stop listening to events"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TEvent",
									"extendsType": "Record<string, any>"
								}
							],
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L116"
				},
				{
					"kind": "function",
					"name": "parseEvents",
					"signatures": [
						{
							"parameters": [
								{
									"name": "events",
									"type": "Event[]"
								}
							],
							"returns": {
								"type": "ContractEvent<TEvent>[]"
							},
							"typeParameters": [
								{
									"name": "TEvent"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L291"
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners on this contract"
										}
									]
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Remove all listeners from a contract"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.removeAllListeners();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L180"
				},
				{
					"kind": "function",
					"name": "removeEventListener",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove an event listener from this contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "eventName",
									"type": "(string & {  }) | (keyof TContract[\"filters\"])",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the event name as defined in the contract"
												}
											]
										}
									]
								},
								{
									"name": "listener",
									"type": "Listener",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listener to unregister"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Remove a listener that was added with addEventListener"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L159"
				},
				{
					"kind": "function",
					"name": "removeTransactionListener",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove a transaction listener"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listener",
									"type": "ListenerFn<any[]>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the callback function to remove"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Remove a listener that was added with addTransactionListener"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L46"
				},
				{
					"kind": "function",
					"name": "toContractEvent",
					"signatures": [
						{
							"parameters": [
								{
									"name": "event",
									"type": "EventFragment"
								},
								{
									"name": "args",
									"type": "readonly any[]"
								},
								{
									"name": "rawLog",
									"type": "Log"
								}
							],
							"returns": {
								"type": "ContractEvent<TEvent>"
							},
							"typeParameters": [
								{
									"name": "TEvent",
									"extendsType": "Record<string, any>"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L324"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-events.ts#L12",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isProtected": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				}
			]
		},
		{
			"kind": "class",
			"name": "ContractInterceptor",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-interceptor.ts#L8",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Allows overriding transaction behavior for this contract"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							}
						],
						"returns": {
							"type": "ContractInterceptor<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-interceptor.ts#L11"
			},
			"methods": [
				{
					"kind": "function",
					"name": "overrideNextTransaction",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The next transaction executed will add/replace any overrides passed via the passed in hook."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "hook",
									"type": "() => CallOverrides",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Overridden values will be applied to the next transaction executed."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-interceptor.ts#L27"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-interceptor.ts#L9",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				}
			]
		},
		{
			"kind": "class",
			"name": "ContractMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L42",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles metadata for a Contract"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Read and update metadata for this contract"
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst metadata = await contract.metadata.get();\nawait contract.metadata.set({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							},
							{
								"name": "schema",
								"type": "TSchema"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "ContractMetadata<TContract, TSchema>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							},
							{
								"name": "TSchema",
								"extendsType": "IGenericSchemaType"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L52"
			},
			"methods": [
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the metadata of this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<output<TSchema[\"output\"]>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the metadata of the given contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the metadata of a contract"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const metadata = await contract.metadata.get();\nconsole.log(metadata);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ContractMetadata"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L88"
				},
				{
					"kind": "function",
					"name": "supportsContractMetadata",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<IContractMetadata>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L210"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L48",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L47",
					"type": "\"ContractMetadata\""
				},
				{
					"kind": "variable",
					"name": "schema",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L49",
					"type": "TSchema",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L154",
					"type": "{ (...args: [metadata: input<TSchema[\"input\"]>]) : Promise<TResult> ; prepare: (...args: [metadata: input<TSchema[\"input\"]>]) => Promise<Transaction<If<Equals<output<TSchema[\"output\"]>, never>, Omit<TransactionResultWithMetadata<unknown>, \"data\">, TransactionResultWithMetadata<output<TSchema[\"output\"]>>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the metadata of this contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: input<TSchema[\"input\"]>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "OVERWRITE the metadata of a contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.metadata.set({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ContractMetadata"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: input<TSchema[\"input\"]>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<If<Equals<output<TSchema[\"output\"]>, never>, Omit<TransactionResultWithMetadata<unknown>, \"data\">, TransactionResultWithMetadata<output<TSchema[\"output\"]>>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L50",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "update",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-metadata.ts#L190",
					"type": "{ (...args: [metadata: Partial<input<TSchema[\"input\"]>>]) : Promise<TResult> ; prepare: (...args: [metadata: Partial<input<TSchema[\"input\"]>>]) => Promise<Transaction<If<Equals<output<TSchema[\"output\"]>, never>, Omit<TransactionResultWithMetadata<unknown>, \"data\">, TransactionResultWithMetadata<output<TSchema[\"output\"]>>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "update",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update the metadata of a contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: Partial<input<TSchema[\"input\"]>>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Update the metadata of a contract"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.metadata.update({\n  description: \"My new contract description\"\n})"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ContractMetadata"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: Partial<input<TSchema[\"input\"]>>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<If<Equals<output<TSchema[\"output\"]>, never>, Omit<TransactionResultWithMetadata<unknown>, \"data\">, TransactionResultWithMetadata<output<TSchema[\"output\"]>>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				},
				{
					"name": "TSchema",
					"extendsType": "IGenericSchemaType"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractOwner",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L15",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Encodes and decodes Contract functions"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Ownable>"
							}
						],
						"returns": {
							"type": "ContractOwner<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "Ownable"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L21"
			},
			"methods": [
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of the contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the owner address"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "await contract.owner.get();\nconsole.log(\"Owner address: \", ownerAddress);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Ownable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L35"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L19",
					"type": "ContractWrapper<Ownable>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L18",
					"type": "\"Ownable\""
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-owner.ts#L52",
					"type": "{ (...args: [address: string]) : Promise<TResult> ; prepare: (...args: [address: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the new owner of the contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Can only be called by the current owner."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const newOwnerAddress = \"{{wallet_address}}\";\nawait contract.owner.set(newOwnerAddress);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Ownable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "Ownable"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractPlatformFee",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L25",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handle platform fees and recipients"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure platform fees for a contract, which can be applied on certain paid transactions"
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst feeInfo = await contract.platformFees.get();\nawait contract.platformFees.set({\n  platform_fee_basis_points: 100, // 1% fee\n  platform_fee_recipient: \"0x...\" // the fee recipient\n})"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IPlatformFee>"
							}
						],
						"returns": {
							"type": "ContractPlatformFee<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "IPlatformFee"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L31"
			},
			"methods": [
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the platform fee recipient and basis points"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ platform_fee_basis_points: number; platform_fee_recipient: string }>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const feeInfo = await contract.platformFees.get();\nconsole.log(feeInfo.platform_fee_recipient);\nconsole.log(feeInfo.platform_fee_basis_points);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "PlatformFee"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L46"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L29",
					"type": "ContractWrapper<IPlatformFee>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L28",
					"type": "\"PlatformFee\""
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-platform-fee.ts#L69",
					"type": "{ (...args: [platformFeeInfo: { platform_fee_basis_points: number; platform_fee_recipient: string }]) : Promise<TResult> ; prepare: (...args: [platformFeeInfo: { platform_fee_basis_points: number; platform_fee_recipient: string }]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the platform fee recipient and basis points"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[platformFeeInfo: { platform_fee_basis_points: number; platform_fee_recipient: string }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.platformFees.set({\n  platform_fee_basis_points: 100, // 1% fee\n  platform_fee_recipient: \"0x...\" // the fee recipient\n})"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "PlatformFee"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[platformFeeInfo: { platform_fee_basis_points: number; platform_fee_recipient: string }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "IPlatformFee"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractPrimarySale",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L20",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handle primary sales recipients"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure primary sale recipients for an entire contract."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst salesRecipient = await contract.sales.getRecipient();\nawait contract.sales.setRecipient(recipientWalletAddress);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IPrimarySale>"
							}
						],
						"returns": {
							"type": "ContractPrimarySale"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L24"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getRecipient",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the primary sale recipient"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the wallet address."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const salesRecipient = await contract.sales.getRecipient();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "PrimarySale"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L38"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L22",
					"type": "ContractWrapper<IPrimarySale>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L21",
					"type": "\"PrimarySale\""
				},
				{
					"kind": "variable",
					"name": "setRecipient",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-sales.ts#L53",
					"type": "{ (...args: [recipient: string]) : Promise<TResult> ; prepare: (...args: [recipient: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setRecipient",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the primary sale recipient"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[recipient: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.sales.setRecipient(recipientWalletAddress);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "PrimarySale"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[recipient: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractRoles",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L32",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handle contract permissions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure roles and permissions for a contract, to restrict certain actions."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst rolesAndMembers = await contract.roles.getAll();\nawait contract.roles.grantRole(\"admin\", \"0x...\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IPermissions>"
							},
							{
								"name": "roles",
								"type": "readonly TRole[]"
							}
						],
						"returns": {
							"type": "ContractRoles<TContract, TRole>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "IPermissions"
							},
							{
								"name": "TRole",
								"extendsType": "(\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L43"
			},
			"methods": [
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all members of a specific role"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "role",
									"type": "TRole",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The Role to to get a memberlist for."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The list of addresses that are members of the specific role."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "34804",
													"children": [
														{
															"type": "text",
															"value": "ContractRoles.getAll"
														}
													]
												},
												{
													"type": "text",
													"value": " to get get a list of addresses for all supported roles on the contract."
												}
											]
										}
									]
								},
								{
									"tag": "@throws",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "If you are requesting a role that does not exist on the contract this will throw an error."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Say you want to get the list of addresses that are members of the minter role."
												}
											]
										},
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const minterAddresses = await contract.roles.get(\"minter\");"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Permissions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L93"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all members of all roles"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Record<TRole, string[]>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "A record of "
											},
											{
												"type": "link",
												"title": null,
												"url": "59",
												"children": [
													{
														"type": "text",
														"value": "Role"
													}
												]
											},
											{
												"type": "text",
												"value": "s to lists of addresses that are members of the given role."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "34806",
													"children": [
														{
															"type": "text",
															"value": "ContractRoles.get"
														}
													]
												},
												{
													"type": "text",
													"value": " to get a list of addresses that are members of a specific role."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const rolesAndMembers = await contract.roles.getAll();"
										}
									]
								},
								{
									"tag": "@throws",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "If the contract does not support roles this will throw an error."
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "PermissionsEnumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L68"
				},
				{
					"kind": "function",
					"name": "getRevokeRoleFunctionName",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<(\"renounceRole\") | (\"revokeRole\")>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L315"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L36",
					"type": "ContractWrapper<IPermissions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L35",
					"type": "\"Permissions\""
				},
				{
					"kind": "variable",
					"name": "grant",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L252",
					"type": "{ (...args: [role: TRole, address: string]) : Promise<TResult> ; prepare: (...args: [role: TRole, address: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "grant",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Grant a role to a specific address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[role: TRole, address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "The transaction receipt"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make sure you are sure you want to grant the role to the address."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.roles.grant(\"minter\", \"{{wallet_address}}\");"
												}
											]
										},
										{
											"tag": "@throws",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "If you are trying to grant does not exist on the contract this will throw an error."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Permissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[role: TRole, address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "revoke",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L292",
					"type": "{ (...args: [role: TRole, address: string]) : Promise<TResult> ; prepare: (...args: [role: TRole, address: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revoke",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke a role from a specific address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[role: TRole, address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "The transaction receipt"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "-- Caution --"
														}
													]
												},
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "This will let you remove yourself from the role, too.\nIf you remove yourself from the admin role, you will no longer be able to administer the contract.\nThere is no way to recover from this."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");"
												}
											]
										},
										{
											"tag": "@throws",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "If you are trying to revoke does not exist on the module this will throw an error."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Permissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[role: TRole, address: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setAll",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-roles.ts#L137",
					"type": "{ (...args: [rolesWithAddresses: {[key in (\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")] : string[]}]) : Promise<TResult> ; prepare: (...args: [rolesWithAddresses: {[key in (\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")] : string[]}]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setAll",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Overwrite the list of members for specific roles"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[rolesWithAddresses: {[key in (\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")] : string[]}]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Every role in the list will be overwritten with the new list of addresses provided with them.\nIf you want to add or remove addresses for a single address use "
														},
														{
															"type": "link",
															"title": null,
															"url": "34821",
															"children": [
																{
																	"type": "text",
																	"value": "ContractRoles.grant"
																}
															]
														},
														{
															"type": "text",
															"value": " and "
														},
														{
															"type": "link",
															"title": null,
															"url": "34829",
															"children": [
																{
																	"type": "text",
																	"value": "ContractRoles.revoke"
																}
															]
														},
														{
															"type": "text",
															"value": " respectively instead."
														}
													]
												}
											]
										},
										{
											"tag": "@throws",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "If you are requesting a role that does not exist on the contract this will throw an error."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Say you want to overwrite the list of addresses that are members of the minter role."
														}
													]
												},
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Permissions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[rolesWithAddresses: {[key in (\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")] : string[]}]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "IPermissions"
				},
				{
					"name": "TRole",
					"extendsType": "Role"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "ContractRoyalty",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L33",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handle contract royalties"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties for an entire contract or a particular token."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\nawait contract.roles.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 100, // 1% royalty fee\n  fee_recipient: \"0x...\", // the fee recipient\n});"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IRoyalty>"
							},
							{
								"name": "metadata",
								"type": "ContractMetadata<TContract, TSchema>"
							}
						],
						"returns": {
							"type": "ContractRoyalty<TContract, TSchema>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "IRoyalty"
							},
							{
								"name": "TSchema",
								"extendsType": "IGenericSchemaType"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L42"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getDefaultRoyaltyInfo",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the royalty recipient and fee"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ fee_recipient: string; seller_fee_basis_points: number }>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The royalty recipient and BPS"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\nconsole.log(royaltyInfo.fee_recipient);\nconsole.log(royaltyInfo.seller_fee_basis_points);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Royalty"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L62"
				},
				{
					"kind": "function",
					"name": "getTokenRoyaltyInfo",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the royalty recipient and fee of a particular token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<{ fee_recipient: string; seller_fee_basis_points: number }>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The royalty recipient and BPS"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\nconsole.log(royaltyInfo.fee_recipient);\nconsole.log(royaltyInfo.seller_fee_basis_points);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Royalty"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L86"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L39",
					"type": "ContractWrapper<IRoyalty>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L38",
					"type": "\"Royalty\""
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L40",
					"type": "ContractMetadata<TContract, TSchema>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "setDefaultRoyaltyInfo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L110",
					"type": "{ (...args: [royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]) : Promise<TResult> ; prepare: (...args: [royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]) => Promise<Transaction<TransactionResultWithMetadata<{ fee_recipient: string; seller_fee_basis_points: number }>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setDefaultRoyaltyInfo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the royalty recipient and fee"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.roles.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1% royalty fee\n  fee_recipient: \"0x...\", // the fee recipient\n});"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Royalty"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithMetadata<{ fee_recipient: string; seller_fee_basis_points: number }>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setTokenRoyaltyInfo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/contract-royalty.ts#L182",
					"type": "{ (...args: [tokenId: BigNumberish, royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]) => Promise<Transaction<{ data: () => Promise<{ fee_recipient: string; seller_fee_basis_points: number }>; receipt: TransactionReceipt }>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setTokenRoyaltyInfo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the royalty recipient and fee for a particular token"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tokenId = 0;\nawait contract.roles.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 100, // 1% royalty fee\n  fee_recipient: \"0x...\", // the fee recipient\n});"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Royalty"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, royaltyData: { fee_recipient: string; seller_fee_basis_points: number }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<{ data: () => Promise<{ fee_recipient: string; seller_fee_basis_points: number }>; receipt: TransactionReceipt }>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "IRoyalty"
				},
				{
					"name": "TSchema",
					"extendsType": "IGenericSchemaType"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "DelayedReveal",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L35",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles delayed reveal logic"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<(BaseDelayedRevealERC721) | (BaseDelayedRevealERC1155) | (DropERC721_V3) | (SignatureDrop)>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "featureName",
								"type": "(\"ERC1155\") | (\"ERC721\") | (\"ERC20ClaimConditionsV1\") | (\"ERC20ClaimConditionsV2\") | (\"ERC20ClaimPhasesV2\") | (\"ERC20ClaimPhasesV1\") | (\"ERC20Burnable\") | (\"ERC20SignatureMintable\") | (\"ERC20BatchMintable\") | (\"ERC20Mintable\") | (\"ERC20Permit\") | (\"ERC20\") | (\"ERC721Burnable\") | (\"ERC721Revealable\") | (\"ERC721TieredDrop\") | (\"ERC721ClaimConditionsV1\") | (\"ERC721ClaimConditionsV2\") | (\"ERC721ClaimPhasesV1\") | (\"ERC721ClaimPhasesV2\") | (\"ERC721ClaimCustom\") | (\"ERC721ClaimZora\") | (\"ERC721LazyMintable\") | (\"ERC721BatchMintable\") | (\"ERC721Mintable\") | (\"ERC721SignatureMintV2\") | (\"ERC721SignatureMintV1\") | (\"ERC721Enumerable\") | (\"ERC721AQueryable\") | (\"ERC721Supply\") | (\"ERC721SharedMetadata\") | (\"ERC721LoyaltyCard\") | (\"ERC721UpdatableMetadata\") | (\"ERC1155Burnable\") | (\"ERC1155ClaimConditionsV1\") | (\"ERC1155ClaimConditionsV2\") | (\"ERC1155ClaimPhasesV2\") | (\"ERC1155ClaimPhasesV1\") | (\"ERC1155ClaimCustom\") | (\"ERC1155Revealable\") | (\"ERC1155LazyMintableV2\") | (\"ERC1155LazyMintableV1\") | (\"ERC1155SignatureMintable\") | (\"ERC1155BatchMintable\") | (\"ERC1155Mintable\") | (\"ERC1155Enumerable\") | (\"ERC1155UpdatableMetadata\") | (\"ERC1155Supply\") | (\"Royalty\") | (\"PrimarySale\") | (\"PlatformFee\") | (\"PermissionsEnumerable\") | (\"Permissions\") | (\"ContractMetadata\") | (\"AppURI\") | (\"Ownable\") | (\"Gasless\") | (\"PackVRF\") | (\"PluginRouter\") | (\"DynamicContract\") | (\"DirectListings\") | (\"EnglishAuctions\") | (\"Offers\") | (\"AccountFactory\") | (\"AccountPermissionsV1\") | (\"AccountPermissions\") | (\"Account\") | (\"AirdropERC20\") | (\"AirdropERC721\") | (\"AirdropERC1155\") | (\"Fallback\")"
							},
							{
								"name": "nextTokenIdToMintFn",
								"type": "() => Promise<BigNumber>"
							}
						],
						"returns": {
							"type": "DelayedReveal<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseDelayedRevealERC721) | (BaseDelayedRevealERC1155) | (DropERC721_V3) | (SignatureDrop)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L49"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getBatchesToReveal",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Gets the list of unrevealed NFT batches."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BatchToReveal[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Gets the list of unrevealed NFT batches."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const batches = await contract.revealer.getBatchesToReveal();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L241"
				},
				{
					"kind": "function",
					"name": "getLegacyEncryptedData",
					"signatures": [
						{
							"parameters": [
								{
									"name": "index",
									"type": "BigNumber"
								}
							],
							"returns": {
								"type": "Promise<any>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L354"
				},
				{
					"kind": "function",
					"name": "getNftMetadata",
					"signatures": [
						{
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L329"
				},
				{
					"kind": "function",
					"name": "isLegacyContract",
					"signatures": [
						{
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L338"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L45",
					"type": "ContractWrapper<(BaseDelayedRevealERC721) | (BaseDelayedRevealERC1155) | (DropERC721_V3) | (SignatureDrop)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createDelayedRevealBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L99",
					"type": "{ (...args: [placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createDelayedRevealBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of encrypted NFTs that can be revealed at a later time."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a batch of encrypted NFTs that can be revealed at a later time."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L43",
					"type": "(\"ERC1155\") | (\"ERC721\") | (\"ERC20ClaimConditionsV1\") | (\"ERC20ClaimConditionsV2\") | (\"ERC20ClaimPhasesV2\") | (\"ERC20ClaimPhasesV1\") | (\"ERC20Burnable\") | (\"ERC20SignatureMintable\") | (\"ERC20BatchMintable\") | (\"ERC20Mintable\") | (\"ERC20Permit\") | (\"ERC20\") | (\"ERC721Burnable\") | (\"ERC721Revealable\") | (\"ERC721TieredDrop\") | (\"ERC721ClaimConditionsV1\") | (\"ERC721ClaimConditionsV2\") | (\"ERC721ClaimPhasesV1\") | (\"ERC721ClaimPhasesV2\") | (\"ERC721ClaimCustom\") | (\"ERC721ClaimZora\") | (\"ERC721LazyMintable\") | (\"ERC721BatchMintable\") | (\"ERC721Mintable\") | (\"ERC721SignatureMintV2\") | (\"ERC721SignatureMintV1\") | (\"ERC721Enumerable\") | (\"ERC721AQueryable\") | (\"ERC721Supply\") | (\"ERC721SharedMetadata\") | (\"ERC721LoyaltyCard\") | (\"ERC721UpdatableMetadata\") | (\"ERC1155Burnable\") | (\"ERC1155ClaimConditionsV1\") | (\"ERC1155ClaimConditionsV2\") | (\"ERC1155ClaimPhasesV2\") | (\"ERC1155ClaimPhasesV1\") | (\"ERC1155ClaimCustom\") | (\"ERC1155Revealable\") | (\"ERC1155LazyMintableV2\") | (\"ERC1155LazyMintableV1\") | (\"ERC1155SignatureMintable\") | (\"ERC1155BatchMintable\") | (\"ERC1155Mintable\") | (\"ERC1155Enumerable\") | (\"ERC1155UpdatableMetadata\") | (\"ERC1155Supply\") | (\"Royalty\") | (\"PrimarySale\") | (\"PlatformFee\") | (\"PermissionsEnumerable\") | (\"Permissions\") | (\"ContractMetadata\") | (\"AppURI\") | (\"Ownable\") | (\"Gasless\") | (\"PackVRF\") | (\"PluginRouter\") | (\"DynamicContract\") | (\"DirectListings\") | (\"EnglishAuctions\") | (\"Offers\") | (\"AccountFactory\") | (\"AccountPermissionsV1\") | (\"AccountPermissions\") | (\"Account\") | (\"AirdropERC20\") | (\"AirdropERC721\") | (\"AirdropERC1155\") | (\"Fallback\")"
				},
				{
					"kind": "variable",
					"name": "nextTokenIdToMintFn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L47",
					"type": "() => Promise<BigNumber>",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "nextTokenIdToMintFn",
							"signatures": [
								{
									"returns": {
										"type": "Promise<BigNumber>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L47"
						}
					],
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "reveal",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L203",
					"type": "{ (...args: [batchId: BigNumberish, password: string]) : Promise<TResult> ; prepare: (...args: [batchId: BigNumberish, password: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "reveal",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Reveal a batch of hidden NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[batchId: BigNumberish, password: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Reveal the NFTs of a batch using the password."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[batchId: BigNumberish, password: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					],
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/delayed-reveal.ts#L46",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(DropERC721_V3) | (BaseDelayedRevealERC721) | (SignatureDrop) | (BaseDelayedRevealERC1155)"
				}
			]
		},
		{
			"kind": "class",
			"name": "DeployTransaction",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L714",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "DeployTransactionOptions"
							}
						],
						"returns": {
							"type": "DeployTransaction"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L718"
			},
			"methods": [
				{
					"kind": "function",
					"name": "deployError",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Create a nicely formatted error message with tx metadata and solidity stack trace"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "error",
									"type": "any"
								}
							],
							"returns": {
								"type": "Promise<TransactionError>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L822"
				},
				{
					"kind": "function",
					"name": "encode",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L724"
				},
				{
					"kind": "function",
					"name": "estimateGasCost",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Estimate the total gas cost of this transaction (in both ether and wei)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ ether: string; wei: BigNumber }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L191"
				},
				{
					"kind": "function",
					"name": "estimateGasLimit",
					"signatures": [
						{
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L751"
				},
				{
					"kind": "function",
					"name": "execute",
					"signatures": [
						{
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L776"
				},
				{
					"kind": "function",
					"name": "getArgs",
					"signatures": [
						{
							"returns": {
								"type": "any[]"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L82"
				},
				{
					"kind": "function",
					"name": "getGasOverrides",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get gas overrides for the transaction"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<({ gasPrice: undefined; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined }) | ({ gasPrice: undefined; maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber }) | ({ gasPrice: BigNumber; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L221"
				},
				{
					"kind": "function",
					"name": "getGasPrice",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calculates the gas price for transactions (adding a 10% tip buffer)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L207"
				},
				{
					"kind": "function",
					"name": "getMethod",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L737"
				},
				{
					"kind": "function",
					"name": "getOverrides",
					"signatures": [
						{
							"returns": {
								"type": "CallOverrides"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L86"
				},
				{
					"kind": "function",
					"name": "getSignerAddress",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the address of the transaction signer"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L214"
				},
				{
					"kind": "function",
					"name": "getTarget",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L733"
				},
				{
					"kind": "function",
					"name": "getValue",
					"signatures": [
						{
							"returns": {
								"type": "(BigNumberish) | (Promise<BigNumberish>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L90"
				},
				{
					"kind": "function",
					"name": "populateTransaction",
					"signatures": [
						{
							"returns": {
								"type": "Promise<TransactionRequest>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L807"
				},
				{
					"kind": "function",
					"name": "send",
					"signatures": [
						{
							"returns": {
								"type": "Promise<ContractTransaction>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L767"
				},
				{
					"kind": "function",
					"name": "setAccessList",
					"signatures": [
						{
							"parameters": [
								{
									"name": "accessList",
									"type": "(undefined) | (AccessListish)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L148"
				},
				{
					"kind": "function",
					"name": "setArgs",
					"signatures": [
						{
							"parameters": [
								{
									"name": "args",
									"type": "any[]"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L94"
				},
				{
					"kind": "function",
					"name": "setCcipReadEnabled",
					"signatures": [
						{
							"parameters": [
								{
									"name": "ccipReadEnabled",
									"type": "(undefined) | (boolean)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L158"
				},
				{
					"kind": "function",
					"name": "setCustomData",
					"signatures": [
						{
							"parameters": [
								{
									"name": "customData",
									"type": "(undefined) | (Record<string, any>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L153"
				},
				{
					"kind": "function",
					"name": "setGasLimit",
					"signatures": [
						{
							"parameters": [
								{
									"name": "gasLimit",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L114"
				},
				{
					"kind": "function",
					"name": "setGasLimitMultiple",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Set a multiple to multiply the gas limit by"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "factor",
									"type": "number"
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "js",
											"meta": null,
											"value": "// Set the gas limit multiple to 1.2 (increase by 20%)\ntx.setGasLimitMultiple(1.2)"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L176"
				},
				{
					"kind": "function",
					"name": "setGasPrice",
					"signatures": [
						{
							"parameters": [
								{
									"name": "gasPrice",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L119"
				},
				{
					"kind": "function",
					"name": "setMaxFeePerGas",
					"signatures": [
						{
							"parameters": [
								{
									"name": "maxFeePerGas",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L129"
				},
				{
					"kind": "function",
					"name": "setMaxPriorityFeePerGas",
					"signatures": [
						{
							"parameters": [
								{
									"name": "maxPriorityFeePerGas",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L136"
				},
				{
					"kind": "function",
					"name": "setNonce",
					"signatures": [
						{
							"parameters": [
								{
									"name": "nonce",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L124"
				},
				{
					"kind": "function",
					"name": "setOverrides",
					"signatures": [
						{
							"parameters": [
								{
									"name": "overrides",
									"type": "CallOverrides"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L99"
				},
				{
					"kind": "function",
					"name": "setType",
					"signatures": [
						{
							"parameters": [
								{
									"name": "type",
									"type": "(undefined) | (number)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L143"
				},
				{
					"kind": "function",
					"name": "setValue",
					"signatures": [
						{
							"parameters": [
								{
									"name": "value",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L109"
				},
				{
					"kind": "function",
					"name": "sign",
					"signatures": [
						{
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L741"
				},
				{
					"kind": "function",
					"name": "simulate",
					"signatures": [
						{
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L746"
				},
				{
					"kind": "function",
					"name": "updateOverrides",
					"signatures": [
						{
							"parameters": [
								{
									"name": "overrides",
									"type": "CallOverrides"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L104"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "args",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L51",
					"type": "any[]",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L716",
					"type": "(undefined) | (EventEmitter<DeployEvents, any>)"
				},
				{
					"kind": "variable",
					"name": "factory",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L715",
					"type": "ContractFactory"
				},
				{
					"kind": "variable",
					"name": "gasMultiple",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L56",
					"type": "number",
					"flags": {
						"isProtected": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "overrides",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L52",
					"type": "CallOverrides",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "provider",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L53",
					"type": "Provider",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "signer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L54",
					"type": "Signer",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L55",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "getProvider",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L74",
					"returns": {
						"type": "Provider"
					},
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "accessor",
					"name": "getSigner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L70",
					"returns": {
						"type": "Signer"
					},
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "accessor",
					"name": "getStorage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L78",
					"returns": {
						"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
					},
					"flags": {
						"isPublic": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "DropClaimConditions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L64",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Manages claim conditions for NFT Drop contracts"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<(BaseDropERC20) | (BaseClaimConditionERC721) | (PrebuiltTokenDrop) | (PrebuiltNFTDrop)>"
							},
							{
								"name": "metadata",
								"type": "ContractMetadata<TContract, any>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "DropClaimConditions<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "(BaseDropERC20) | (BaseClaimConditionERC721) | (PrebuiltTokenDrop) | (PrebuiltNFTDrop)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L75"
			},
			"methods": [
				{
					"kind": "function",
					"name": "canClaim",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Can Claim"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "quantity",
									"type": "(string) | (number)"
								},
								{
									"name": "addressToCheck",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Check if the drop can currently be claimed."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Quantity of tokens to check claimability of\nconst quantity = 1;\nconst canClaim = await contract.canClaim(quantity);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L209"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"parameters": [
								{
									"name": "conditionId",
									"type": "BigNumberish",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<AbstractClaimConditionContractStruct>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L117"
				},
				{
					"kind": "function",
					"name": "getActive",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the currently active claim condition"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "options",
									"type": "ClaimConditionFetchOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<{ availableSupply: string; currencyAddress: string; currencyMetadata: { symbol: string; value: BigNumber; name: string; decimals: number; displayValue: string; }; currentMintSupply: string; maxClaimablePerWallet: string; maxClaimableSupply: string; merkleRootHash: Object; metadata: objectOutputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: BigNumber; snapshot: (null) | (Array<{ address: string; currencyAddress: string; maxClaimable: string; price: string }>); startTime: Date; waitInSeconds: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the claim condition metadata"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L99"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all the claim conditions"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "options",
									"type": "ClaimConditionFetchOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Array<{ availableSupply: string; currencyAddress: string; currencyMetadata: { symbol: string; value: BigNumber; name: string; decimals: number; displayValue: string; }; currentMintSupply: string; maxClaimablePerWallet: string; maxClaimableSupply: string; merkleRootHash: Object; metadata: objectOutputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: BigNumber; snapshot: (null) | (Array<{ address: string; currencyAddress: string; maxClaimable: string; price: string }>); startTime: Date; waitInSeconds: BigNumber }>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the claim conditions metadata"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L158"
				},
				{
					"kind": "function",
					"name": "getClaimArguments",
					"signatures": [
						{
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string"
								},
								{
									"name": "quantity",
									"type": "BigNumberish"
								},
								{
									"name": "claimVerification",
									"type": "ClaimVerification"
								}
							],
							"returns": {
								"type": "Promise<any[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L849"
				},
				{
					"kind": "function",
					"name": "getClaimIneligibilityReasons",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "For any claim conditions that a particular wallet is violating,\nthis function returns human readable information about the\nbreaks in the condition that can be used to inform the user."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "quantity",
									"type": "(string) | (number)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The desired quantity that would be claimed."
												}
											]
										}
									]
								},
								{
									"name": "addressToCheck",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The wallet address, defaults to the connected wallet."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ClaimEligibility[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L233"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The address to claim to"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The quantity to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Options to override the claim transaction"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L901"
				},
				{
					"kind": "function",
					"name": "getClaimerProofs",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns allow list information and merkle proofs for the given address."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "claimerAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the claimer address"
												}
											]
										}
									]
								},
								{
									"name": "claimConditionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional the claim condition id to get the proofs for"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | ({ address: string; currencyAddress: string; maxClaimable: string; price: string; proof: string[] })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L530"
				},
				{
					"kind": "function",
					"name": "getSnapshotFormatVersion",
					"signatures": [
						{
							"returns": {
								"type": "SnapshotFormatVersion"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L988"
				},
				{
					"kind": "function",
					"name": "getSupplyClaimedByWallet",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total supply claimed by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to check"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply claimed"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L560"
				},
				{
					"kind": "function",
					"name": "getTokenDecimals",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "Promise<number>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L812"
				},
				{
					"kind": "function",
					"name": "isLegacyMultiPhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<(DropERC20_V2) | (DropERC721_V3)>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L973"
				},
				{
					"kind": "function",
					"name": "isLegacySinglePhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropSinglePhase_V1>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L958"
				},
				{
					"kind": "function",
					"name": "isNewMultiphaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<Drop>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L949"
				},
				{
					"kind": "function",
					"name": "isNewSinglePhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropSinglePhase>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L934"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L71",
					"type": "ContractWrapper<(BaseDropERC20) | (BaseClaimConditionERC721) | (PrebuiltTokenDrop) | (PrebuiltNFTDrop)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L72",
					"type": "ContractMetadata<TContract, any>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L624",
					"type": "{ (...args: [claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]) : Promise<TResult> ; prepare: (...args: [claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set public mint conditions"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Sets the public mint conditions that need to be fullfiled by users to claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n\n// Optionally specify addresses that can claim\nconst snapshots = ['0x...', '0x...']\n\n// Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n// const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxClaimableSupply: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: snapshots, // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nawait dropContract.claimConditions.set(claimConditions);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L73",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "update",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-claim-conditions.ts#L793",
					"type": "{ (...args: [index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]) : Promise<TResult> ; prepare: (...args: [index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "update",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update a single claim condition with new data."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "(PrebuiltNFTDrop) | (PrebuiltTokenDrop) | (BaseClaimConditionERC721) | (BaseDropERC20)"
				}
			]
		},
		{
			"kind": "class",
			"name": "DropErc1155ClaimConditions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L58",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Manages claim conditions for Edition Drop contracts"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<(BaseClaimConditionERC1155) | (PrebuiltEditionDrop)>"
							},
							{
								"name": "metadata",
								"type": "ContractMetadata<TContract, any>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "DropErc1155ClaimConditions<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "(BaseClaimConditionERC1155) | (PrebuiltEditionDrop)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L65"
			},
			"methods": [
				{
					"kind": "function",
					"name": "canClaim",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Can Claim"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "quantity",
									"type": "BigNumberish"
								},
								{
									"name": "addressToCheck",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Check if a particular NFT can currently be claimed by a given user."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Quantity of tokens to check claimability of\nconst quantity = 1;\nconst canClaim = await contract.canClaim(quantity);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L198"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "conditionId",
									"type": "BigNumberish",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<AbstractClaimConditionContractStruct>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L102"
				},
				{
					"kind": "function",
					"name": "getActive",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the currently active claim condition"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "options",
									"type": "ClaimConditionFetchOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<{ availableSupply: string; currencyAddress: string; currencyMetadata: { symbol: string; value: BigNumber; name: string; decimals: number; displayValue: string; }; currentMintSupply: string; maxClaimablePerWallet: string; maxClaimableSupply: string; merkleRootHash: Object; metadata: objectOutputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: BigNumber; snapshot: (null) | (Array<{ address: string; currencyAddress: string; maxClaimable: string; price: string }>); startTime: Date; waitInSeconds: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the claim condition metadata"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L86"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all the claim conditions"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "options",
									"type": "ClaimConditionFetchOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Array<{ availableSupply: string; currencyAddress: string; currencyMetadata: { symbol: string; value: BigNumber; name: string; decimals: number; displayValue: string; }; currentMintSupply: string; maxClaimablePerWallet: string; maxClaimableSupply: string; merkleRootHash: Object; metadata: objectOutputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: BigNumber; snapshot: (null) | (Array<{ address: string; currencyAddress: string; maxClaimable: string; price: string }>); startTime: Date; waitInSeconds: BigNumber }>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the claim conditions metadata"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L151"
				},
				{
					"kind": "function",
					"name": "getClaimArguments",
					"signatures": [
						{
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "destinationAddress",
									"type": "string"
								},
								{
									"name": "quantity",
									"type": "BigNumberish"
								},
								{
									"name": "claimVerification",
									"type": "ClaimVerification"
								}
							],
							"returns": {
								"type": "Promise<any[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L888"
				},
				{
					"kind": "function",
					"name": "getClaimIneligibilityReasons",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "For any claim conditions that a particular wallet is violating,\nthis function returns human-readable information about the\nbreaks in the condition that can be used to inform the user."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the token id to check"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The desired quantity that would be claimed."
												}
											]
										}
									]
								},
								{
									"name": "addressToCheck",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The wallet address, defaults to the connected wallet."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ClaimEligibility[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L229"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Id of the token you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc1155.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L944"
				},
				{
					"kind": "function",
					"name": "getClaimerProofs",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns allow list information and merkle proofs for the given address."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the token ID to check"
												}
											]
										}
									]
								},
								{
									"name": "claimerAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the claimer address"
												}
											]
										}
									]
								},
								{
									"name": "claimConditionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional the claim condition id to get the proofs for"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | ({ address: string; currencyAddress: string; maxClaimable: string; price: string; proof: string[] })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L515"
				},
				{
					"kind": "function",
					"name": "getSnapshotFormatVersion",
					"signatures": [
						{
							"returns": {
								"type": "SnapshotFormatVersion"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L1011"
				},
				{
					"kind": "function",
					"name": "getSupplyClaimedByWallet",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total supply claimed by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to check"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply claimed"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L544"
				},
				{
					"kind": "function",
					"name": "isLegacyMultiPhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropERC1155_V2>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L1002"
				},
				{
					"kind": "function",
					"name": "isLegacySinglePhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropSinglePhase1155_V1>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L993"
				},
				{
					"kind": "function",
					"name": "isNewMultiphaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<Drop1155>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L984"
				},
				{
					"kind": "function",
					"name": "isNewSinglePhaseDrop",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropSinglePhase1155>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L975"
				},
				{
					"kind": "function",
					"name": "prepareClaim",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns proofs and the overrides required for the transaction."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								},
								{
									"name": "quantity",
									"type": "BigNumberish"
								},
								{
									"name": "checkERC20Allowance",
									"type": "boolean"
								},
								{
									"name": "address",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ClaimVerification>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "inlineCode",
																"value": "overrides"
															},
															{
																"type": "text",
																"value": " and "
															},
															{
																"type": "inlineCode",
																"value": "proofs"
															},
															{
																"type": "text",
																"value": " as an object."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L866"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L61",
					"type": "ContractWrapper<(BaseClaimConditionERC1155) | (PrebuiltEditionDrop)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L62",
					"type": "ContractMetadata<TContract, any>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "set",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L610",
					"type": "{ (...args: [tokenId: BigNumberish, claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "set",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set claim conditions on a single NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n\n// Optionally specify addresses that can claim\nconst snapshots = ['0x...', '0x...']\n\n// Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n// const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxClaimableSupply: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: snapshots, // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nconst tokenId = 0; // the id of the NFT to set claim conditions on\nawait dropContract.claimConditions.set(tokenId, claimConditions);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, claimConditionInputs: Array<{ currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }>, resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "setBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L660",
					"type": "{ (...args: [claimConditionsForToken: ClaimConditionsForToken[], resetClaimEligibilityForAll: any]) : Promise<TResult> ; prepare: (...args: [claimConditionsForToken: ClaimConditionsForToken[], resetClaimEligibilityForAll: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set claim conditions on multiple NFTs at once"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[claimConditionsForToken: ClaimConditionsForToken[], resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const claimConditionsForTokens = [\n  {\n    tokenId: 0,\n    claimConditions: [{\n      startTime: new Date(), // start the claim phase now\n      maxClaimableSupply: 2, // limit how many mints for this tokenId\n      price: 0.01, // price for this tokenId\n      snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n    }]\n  },\n  {\n    tokenId: 1,\n    claimConditions: [{\n      startTime: new Date(),\n      price: 0.08, // different price for this tokenId\n    }]\n  },\n];\n\nawait dropContract.claimConditions.setBatch(claimConditionsForTokens);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[claimConditionsForToken: ClaimConditionsForToken[], resetClaimEligibilityForAll: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L63",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "update",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-claim-conditions.ts#L845",
					"type": "{ (...args: [tokenId: BigNumberish, index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "update",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update a single claim condition with new data."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, index: number, claimConditionInput: { currencyAddress: string; maxClaimablePerWallet: (string) | (number); maxClaimableSupply: (string) | (number); merkleRootHash: (string) | (number[]); metadata: objectInputType<{ name: ZodOptional<ZodString> }, ZodUnknown, \"strip\">; price: (string) | (number); snapshot: (null) | (string[]) | (Array<{ address: string; currencyAddress: string; maxClaimable: (string) | (number); price: (string) | (number) }>); startTime: (number) | (Date); waitInSeconds: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "(PrebuiltEditionDrop) | (BaseClaimConditionERC1155)"
				}
			]
		},
		{
			"kind": "class",
			"name": "DropErc1155History",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-history.ts#L9",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Manages history for Edition Drop contracts"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "events",
								"type": "ContractEvents<PrebuiltEditionDrop>"
							}
						],
						"returns": {
							"type": "DropErc1155History"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-history.ts#L12"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getAllClaimerAddresses",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all claimer addresses"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to get the addresses of*"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "A unique list of addresses that claimed the token"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a list of all the addresses that have claimed a token"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = \"0\";\nconst allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-history.ts#L28"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/drop-erc1155-history.ts#L10",
					"type": "ContractEvents<PrebuiltEditionDrop>",
					"flags": {
						"isPrivate": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Edition",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L46",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create a collection of NFTs that lets you mint multiple copies of each NFT."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TokenERC1155>"
							}
						],
						"returns": {
							"type": "Edition"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L103"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L110"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L100"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nft = await contract.get(\"0\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L74"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L153"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L175"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it.\nThis is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "receiver",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "metadataWithSupply",
									"type": "{ metadata: Object; supply: Object }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The metadata of the NFT you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "inlineCode",
													"value": "contract.mint.prepare(...args)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L282"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L193"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L205"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L119"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer NFTs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L212"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns the total supply of a specific token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The token ID to get the total supply of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L83"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L49",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "airdrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L194",
					"type": "{ (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "airdrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Airdrop multiple NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Airdrop one or multiple NFTs to the provided wallet addresses."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L54",
					"type": "ContractAppURI<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L394",
					"type": "{ (...args: [tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a specified amount of a NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.burnTokens(tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L31",
					"type": "ContractWrapper<TokenERC1155>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L61",
					"type": "ContractEncoder<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L33",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L62",
					"type": "GasCostEstimator<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L63",
					"type": "ContractEvents<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L100",
					"type": "ContractInterceptor<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L50",
					"type": "ContractMetadata<TokenERC1155, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L229",
					"type": "{ (...args: [metadataWithSupply: { metadata: Object; supply: Object }]) : Promise<TResult> ; prepare: (...args: [metadataWithSupply: { metadata: Object; supply: Object }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint NFT for the connected wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "852",
															"children": [
																{
																	"type": "text",
																	"value": "Edition.mintTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintAdditionalSupply",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L295",
					"type": "{ (...args: [tokenId: BigNumberish, additionalSupply: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, additionalSupply: BigNumberish]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintAdditionalSupply",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Increase the supply of an existing NFT and mint it to the connected wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintAdditionalSupplyTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L314",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintAdditionalSupplyTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Increase the supply of an existing NFT and mint it to a given wallet address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L333",
					"type": "{ (...args: [metadatas: { metadata: Object; supply: Object }[]]) : Promise<TResult> ; prepare: (...args: [metadatas: { metadata: Object; supply: Object }[]]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many NFTs for the connected wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "903",
															"children": [
																{
																	"type": "text",
																	"value": "Edition.mintBatchTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L374",
					"type": "{ (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) : Promise<TResult> ; prepare: (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many NFTs with limited supplies"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many different NFTs with limited supplies to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L265",
					"type": "{ (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }]) : Promise<TResult> ; prepare: (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT with a limited supply"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint an NFT with a limited supply to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L101",
					"type": "ContractOwner<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L60",
					"type": "ContractPlatformFee<TokenERC1155>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L55",
					"type": "ContractRoles<TokenERC1155, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L81",
					"type": "ContractRoyalty<TokenERC1155, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L59",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "signature",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Signature Minting"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L99",
					"type": "Erc1155SignatureMintable",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L140",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition.ts#L47",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L36",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "EditionDrop",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L47",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<PrebuiltEditionDrop>"
							}
						],
						"returns": {
							"type": "EditionDrop"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L122"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L110"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L100"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nft = await contract.get(\"0\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L74"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L177"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L201"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Id of the token you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "checkERC20Allowance",
									"type": "boolean",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc1155.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L298"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L219"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L231"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L119"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer NFTs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L238"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns the total supply of a specific token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The token ID to get the total supply of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L83"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L50",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "airdrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L194",
					"type": "{ (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "airdrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Airdrop multiple NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Airdrop one or multiple NFTs to the provided wallet addresses."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L60",
					"type": "ContractAppURI<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burnTokens",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L392",
					"type": "{ (...args: [tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnTokens",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a specified amount of a NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.burnTokens(tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "checkout",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Checkout"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L116",
					"type": "PaperCheckout<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L365",
					"type": "{ (...args: [tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim a token to the connected wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "Receipt for the transaction"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "2478",
															"children": [
																{
																	"type": "text",
																	"value": "EditionDrop.claimTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimConditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions for each NFT"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L110",
					"type": "DropErc1155ClaimConditions<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L335",
					"type": "{ (...args: [destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "Receipt for the transaction"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.claimTo(address, tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L31",
					"type": "ContractWrapper<PrebuiltEditionDrop>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "createBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L276",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of NFTs to be claimed in the future"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L53",
					"type": "ContractEncoder<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L33",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L54",
					"type": "GasCostEstimator<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L55",
					"type": "ContractEvents<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "history",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L118",
					"type": "DropErc1155History",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L119",
					"type": "ContractInterceptor<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L56",
					"type": "ContractMetadata<PrebuiltEditionDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L120",
					"type": "ContractOwner<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L52",
					"type": "ContractPlatformFee<PrebuiltEditionDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L61",
					"type": "ContractRoles<PrebuiltEditionDrop, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L82",
					"type": "ContractRoyalty<PrebuiltEditionDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L51",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L140",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/edition-drop.ts#L48",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isPrivate": true,
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L36",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Erc1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L79",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC1155 NFT functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC1155 contract that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.erc1155.transfer(walletAddress, tokenId, quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "Erc1155<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC1155) | (DropERC1155) | (TokenERC1155)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L103"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT balance for the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L218"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT balance of a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.erc1155.balanceOf(walletAddress, tokenId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L204"
				},
				{
					"kind": "function",
					"name": "detectErc1155Burnable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155Burnable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1185"
				},
				{
					"kind": "function",
					"name": "detectErc1155Claimable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ERC1155Claimable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1227"
				},
				{
					"kind": "function",
					"name": "detectErc1155ClaimableWithConditions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155ClaimableWithConditions)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1239"
				},
				{
					"kind": "function",
					"name": "detectErc1155Enumerable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155Enumerable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1162"
				},
				{
					"kind": "function",
					"name": "detectErc1155LazyMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155LazyMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1197"
				},
				{
					"kind": "function",
					"name": "detectErc1155Mintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155Mintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1173"
				},
				{
					"kind": "function",
					"name": "detectErc1155SignatureMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155SignatureMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1213"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.erc1155.get(tokenId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L145"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L127"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.erc1155.getAll();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L443"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Id of the token you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional claim verification data (e.g. price, currency, etc...)"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc1155.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L936"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it.\nThis is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "receiver",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "metadataWithSupply",
									"type": "{ metadata: Object; supply: Object }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The metadata of the NFT you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc1155.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155Mintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L602"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.erc1155.getOwned(address);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L497"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L230"
				},
				{
					"kind": "function",
					"name": "totalCirculatingSupply",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total supply of a specific NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This is "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the sum of supply of all NFTs in the contract."
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L473"
				},
				{
					"kind": "function",
					"name": "totalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This returns the total number of NFTs minted in this contract, "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the total supply of a given token."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const count = await contract.erc1155.totalCount();\nconsole.log(count);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L461"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total supply of a specific token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The token ID to get the total supply of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.erc1155.totalSupply(tokenId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L179"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L98",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "airdrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L365",
					"type": "{ (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "airdrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Airdrop multiple NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Airdrop one or multiple NFTs to the provided wallet addresses."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.erc1155.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.erc1155.airdrop(tokenId, addresses);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155BatchTransferable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L774",
					"type": "{ (...args: [tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the specified NFTs from the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of the NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.erc1155.burn(tokenId, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L837",
					"type": "{ (...args: [tokenIds: BigNumberish[], amounts: BigNumberish[]]) : Promise<TResult> ; prepare: (...args: [tokenIds: BigNumberish[], amounts: BigNumberish[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a batch of NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the batch NFTs from the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.erc1155.burnBatch(tokenIds, amounts);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnBatchFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L868",
					"type": "{ (...args: [account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]) : Promise<TResult> ; prepare: (...args: [account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnBatchFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a batch of NFTs from a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the batch NFTs from the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L805",
					"type": "{ (...args: [account: string, tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [account: string, tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn NFTs from a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the specified NFTs from a specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of this NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.erc1155.burnFrom(account, tokenId, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L89",
					"type": "(undefined) | (Erc1155Burnable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L984",
					"type": "{ (...args: [tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "Receipt for the transaction"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the connected wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.erc1155.claim(tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimCustom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L93",
					"type": "(undefined) | (ERC1155Claimable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1022",
					"type": "{ (...args: [destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "Receipt for the transaction"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.erc1155.claimTo(address, tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, tokenId: BigNumberish, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimWithConditions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L92",
					"type": "(undefined) | (Erc1155ClaimableWithConditions)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L95",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L86",
					"type": "\"ERC1155\""
				},
				{
					"kind": "variable",
					"name": "lazyMint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L910",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "lazyMint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Lazy mint NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155LazyMintableV1 | ERC1155LazyMintableV2"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "lazyMintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L90",
					"type": "(undefined) | (Erc1155LazyMintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L541",
					"type": "{ (...args: [metadataWithSupply: { metadata: Object; supply: Object }]) : Promise<TResult> ; prepare: (...args: [metadataWithSupply: { metadata: Object; supply: Object }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint an NFT with a limited supply to the connected wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintAdditionalSupply",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L626",
					"type": "{ (...args: [tokenId: BigNumberish, additionalSupply: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, additionalSupply: BigNumberish]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintAdditionalSupply",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Increase the supply of an existing NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Increase the supply of an existing NFT and mint it to the connected wallet address"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tokenId = 0;\nconst additionalSupply = 1000;\nawait contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintAdditionalSupplyTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L650",
					"type": "{ (...args: [receiver: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) : Promise<TResult> ; prepare: (...args: [receiver: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintAdditionalSupplyTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Increase the supply of an existing NFT and mint it to a given wallet address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L696",
					"type": "{ (...args: [metadataWithSupply: { metadata: Object; supply: Object }[]]) : Promise<TResult> ; prepare: (...args: [metadataWithSupply: { metadata: Object; supply: Object }[]]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint multiple NFTs at once"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint multiple different NFTs with limited supplies to the connected wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.erc1155.mintBatch(metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155BatchMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L741",
					"type": "{ (...args: [receiver: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) : Promise<TResult> ; prepare: (...args: [receiver: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint multiple NFTs at once to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint multiple different NFTs with limited supplies to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155BatchMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L581",
					"type": "{ (...args: [receiver: string, metadataWithSupply: { metadata: Object; supply: Object }]) : Promise<TResult> ; prepare: (...args: [receiver: string, metadataWithSupply: { metadata: Object; supply: Object }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint an NFT with a limited supply to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L88",
					"type": "(undefined) | (Erc1155Mintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "query",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L87",
					"type": "(undefined) | (Erc1155Enumerable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "setApprovalForAll",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L324",
					"type": "{ (...args: [operator: string, approved: boolean]) : Promise<TResult> ; prepare: (...args: [operator: string, approved: boolean]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setApprovalForAll",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set approval for all NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[operator: string, approved: boolean]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const operator = \"{{wallet_address}}\";\nawait contract.erc1155.setApprovalForAll(operator, true);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[operator: string, approved: boolean]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "signatureMintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L91",
					"type": "(undefined) | (Erc1155SignatureMintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L96",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L259",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.erc1155.transfer(toAddress, tokenId, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L290",
					"type": "{ (...args: [from: string, to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT from a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from a specific wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.erc1155.transfer(toAddress, tokenId, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L99",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "claimConditions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1069",
					"returns": {
						"type": "DropErc1155ClaimConditions<BaseClaimConditionERC1155>"
					}
				},
				{
					"kind": "accessor",
					"name": "revealer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1134",
					"returns": {
						"type": "DelayedReveal<BaseDelayedRevealERC1155>"
					}
				},
				{
					"kind": "accessor",
					"name": "signature",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155.ts#L1093",
					"returns": {
						"type": "Erc1155SignatureMintable"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(DropERC1155) | (TokenERC1155) | (BaseERC1155)"
				}
			],
			"implements": ["UpdateableNetwork", "DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155BatchMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L30",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint Many ERC1155 NFTs at once"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "NFT batch minting functionality that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc1155",
								"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC1155 & IMulticall>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc1155BatchMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L36"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L32",
					"type": "ContractWrapper<IMintableERC1155 & IMulticall>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L33",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L31",
					"type": "\"ERC1155BatchMintable\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L34",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-batch-mintable.ts#L79",
					"type": "{ (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) : Promise<TResult> ; prepare: (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many NFTs with limited supplies"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many different NFTs with limited supplies to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155Burnable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L11",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IBurnableERC1155>"
							}
						],
						"returns": {
							"type": "Erc1155Burnable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L16"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "batch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L98",
					"type": "{ (...args: [tokenIds: BigNumberish[], amounts: BigNumberish[]]) : Promise<TResult> ; prepare: (...args: [tokenIds: BigNumberish[], amounts: BigNumberish[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "batch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a batch of NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the batch NFTs from the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.edition.burn.batch(tokenIds, amounts);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "batchFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L126",
					"type": "{ (...args: [account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]) : Promise<TResult> ; prepare: (...args: [account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "batchFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a batch of NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the batch NFTs from the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token IDs to burn NFTs of\nconst tokenIds = [0, 1];\n// The amounts of each NFT you want to burn\nconst amounts = [2, 2];\n\nconst result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenIds: BigNumberish[], amounts: BigNumberish[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L14",
					"type": "ContractWrapper<IBurnableERC1155>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L12",
					"type": "\"ERC1155Burnable\""
				},
				{
					"kind": "variable",
					"name": "from",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L66",
					"type": "{ (...args: [account: string, tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [account: string, tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "from",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a specified amount of a NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the specified NFTs from a specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The address of the wallet to burn NFTS from\nconst account = \"0x...\";\n// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of this NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.edition.burn.from(account, tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[account: string, tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "tokens",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-burnable.ts#L38",
					"type": "{ (...args: [tokenId: BigNumberish, amount: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, amount: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "tokens",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a specified amount of a NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn the specified NFTs from the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID to burn NFTs of\nconst tokenId = 0;\n// The amount of the NFT you want to burn\nconst amount = 2;\n\nconst result = await contract.edition.burn.tokens(tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155Enumerable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L27",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "List ERC1155 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Easily list all the NFTs in a ERC1155 contract."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst nfts = await contract.edition.query.all();"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc1155",
								"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IERC1155 & IERC1155Metadata & IERC1155Supply & IERC1155Enumerable>"
							}
						],
						"returns": {
							"type": "Erc1155Enumerable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L32"
			},
			"methods": [
				{
					"kind": "function",
					"name": "all",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.edition.query.all();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L54"
				},
				{
					"kind": "function",
					"name": "owned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.edition.query.owned(address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L105"
				},
				{
					"kind": "function",
					"name": "totalCirculatingSupply",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the supply of token for a given tokenId."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This is "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the sum of supply of all NFTs in the contract."
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L85"
				},
				{
					"kind": "function",
					"name": "totalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This returns the total number of NFTs minted in this contract, "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the total supply of a given token."
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L74"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L29",
					"type": "ContractWrapper<IERC1155 & IERC1155Metadata & IERC1155Supply & IERC1155Enumerable>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L30",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-enumerable.ts#L28",
					"type": "\"ERC1155Enumerable\""
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155LazyMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L23",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc1155",
								"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<BaseDropERC1155>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc1155LazyMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L63"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectErc1155Revealable",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "(undefined) | (DelayedReveal<BaseDelayedRevealERC1155>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L179"
				},
				{
					"kind": "function",
					"name": "isLegacyEditionDropContract",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractWrapper",
									"type": "ContractWrapper<any>"
								},
								{
									"name": "info",
									"type": "(undefined) | ({ type: string; version: number })"
								}
							],
							"returns": {
								"type": "contractWrapper is (ContractWrapper<DropERC1155_V2>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L198"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L59",
					"type": "ContractWrapper<BaseDropERC1155>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L60",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L24",
					"type": "\"ERC1155LazyMintableV2\""
				},
				{
					"kind": "variable",
					"name": "lazyMint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L101",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "lazyMint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of NFTs to be claimed in the future"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "revealer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Delayed reveal"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L57",
					"type": "(undefined) | (DelayedReveal<BaseDelayedRevealERC1155>)",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-lazy-mintable.ts#L61",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155Mintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L32",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint ERC1155 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "NFT minting functionality that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.edition.mint.to(walletAddress, nftMetadata);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc1155",
								"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC1155>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc1155Mintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L43"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectErc1155BatchMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155BatchMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L178"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [],
							"parameters": [
								{
									"name": "to",
									"type": "string"
								},
								{
									"name": "metadataWithSupply",
									"type": "{ metadata: Object; supply: Object }"
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc1155.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L114"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "additionalSupplyTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L151",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "additionalSupplyTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Increase the supply of an existing NFT and mint it to a given wallet address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\nconst tokenId = 0;\nconst additionalSupply = 1000;\n\nconst tx = await contract.edition.mint.additionalSupplyTo(toAddress, tokenId, additionalSupply);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, additionalSupply: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "batch",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Batch mint Tokens to many addresses"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L41",
					"type": "(undefined) | (Erc1155BatchMintable)",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L34",
					"type": "ContractWrapper<IMintableERC1155>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L35",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L33",
					"type": "\"ERC1155Mintable\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-mintable.ts#L83",
					"type": "{ (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }]) : Promise<TResult> ; prepare: (...args: [to: string, metadataWithSupply: { metadata: Object; supply: Object }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT with a limited supply"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint an NFT with a limited supply to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithSupply: { metadata: Object; supply: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc1155SignatureMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L40",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<(BaseSignatureMintERC1155) | (TokenERC1155)>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "roles",
								"type": "ContractRoles<TokenERC1155, (\"transfer\") | (\"minter\") | (\"admin\")>",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "Erc1155SignatureMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L51"
			},
			"methods": [
				{
					"kind": "function",
					"name": "generate",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a signature that can be used to mint an NFT dynamically."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadToSign",
									"type": "{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: Object; royaltyBps: number; royaltyRecipient: string; to: string; uid: string }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload1155>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the signed payload and the corresponding signature"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nftMetadata = {\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  metadata: nftMetadata, // The NFT to mint\n  to: {{wallet_address}}, // Who will receive the NFT\n  quantity: 2, // the quantity of NFTs to mint\n  price: 0.5, // the price per NFT\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now\n  royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n  royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n};\n\nconst signedPayload = await contract.erc1155.signature.generate(payload);\n// now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L271"
				},
				{
					"kind": "function",
					"name": "generateBatch",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a batch of signatures that can be used to mint many new NFTs dynamically."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadsToSign",
									"type": "Array<{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: Object; royaltyBps: number; royaltyRecipient: string; to: string; uid: string }>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payloads to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload1155[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an array of payloads and signatures"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "38909",
													"children": [
														{
															"type": "text",
															"value": "Erc1155SignatureMintable.generate"
														}
													]
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L332"
				},
				{
					"kind": "function",
					"name": "generateBatchFromTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a batch of signatures that can be used to mint new NFTs or additionally supply to existing NFTs dynamically."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadsToSign",
									"type": "Array<{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: Object; royaltyBps: number; royaltyRecipient: string; to: string; tokenId: Object; uid: string }>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payloads to sign with tokenIds specified"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload1155[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an array of payloads and signatures"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "38924",
													"children": [
														{
															"type": "text",
															"value": "Erc1155SignatureMintable.generateFromTokenId"
														}
													]
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L351"
				},
				{
					"kind": "function",
					"name": "generateFromTokenId",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a signature that can be used to mint additionally supply to an existing NFT."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadToSign",
									"type": "{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: Object; royaltyBps: number; royaltyRecipient: string; to: string; tokenId: Object; uid: string }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload1155>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the signed payload and the corresponding signature"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nftMetadata = {\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  tokenId: 0, // Instead of metadata, we specify the token ID of the NFT to mint supply to\n  to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n  quantity: 2, // the quantity of NFTs to mint\n  price: 0.5, // the price per NFT\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now\n  royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n  royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n};\n\nconst signedPayload = await contract.erc1155.signature.generateFromTokenId(payload);\n// now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L316"
				},
				{
					"kind": "function",
					"name": "verify",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Verify that a payload is correctly signed"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signedPayload",
									"type": "SignedPayload1155",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to verify"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC1155SignatureMintable"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nftMetadata = {\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  metadata: nftMetadata, // The NFT to mint\n  to: {{wallet_address}}, // Who will receive the NFT\n  quantity: 2, // the quantity of NFTs to mint\n  price: 0.5, // the price per NFT\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now\n  royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n  royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n};\n\nconst signedPayload = contract.erc1155.signature.generate(payload);\n// Now you can verify that the payload is valid\nconst isValid = await contract.erc1155.signature.verify(signedPayload);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L225"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L43",
					"type": "ContractWrapper<(BaseSignatureMintERC1155) | (TokenERC1155)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L41",
					"type": "\"ERC1155SignatureMintable\""
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L80",
					"type": "{ (...args: [signedPayload: SignedPayload1155]) : Promise<TResult> ; prepare: (...args: [signedPayload: SignedPayload1155]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint a dynamically generated NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload1155]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a dynamic NFT with a previously generated signature."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// see how to craft a payload to sign in the `generate()` documentation\nconst signedPayload = contract.erc1155.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.erc1155.signature.mint(signedPayload);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155SignatureMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload1155]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L137",
					"type": "{ (...args: [signedPayloads: SignedPayload1155[]]) : Promise<TResult> ; prepare: (...args: [signedPayloads: SignedPayload1155[]]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint any number of dynamically generated NFT at once"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload1155[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// see how to craft a batch of payloads to sign in the `generateBatch()` documentation\nconst signedPayloads = contract.erc1155.signature.generateBatch(payloads);\n\n// now anyone can mint the NFT\nconst tx = contract.erc1155.signature.mintBatch(signedPayloads);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155SignatureMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload1155[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L47",
					"type": "(undefined) | (ContractRoles<TokenERC1155, (\"transfer\") | (\"minter\") | (\"admin\")>)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-signature-mintable.ts#L46",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L56",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC20 Token functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC20 contract that handles all unit transformation for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.erc20.transfer(walletAddress, amount);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "Erc20<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC20) | (DropERC20) | (TokenERC20)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L79"
			},
			"methods": [
				{
					"kind": "function",
					"name": "allowance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get token allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet is allowed to spend on behalf of the connected wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.erc20.allowance(spenderAddress);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L199"
				},
				{
					"kind": "function",
					"name": "allowanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get token allowance of a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "owner",
									"type": "string"
								},
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.erc20.allowanceOf(owner, spender);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L224"
				},
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get token balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.erc20.balance();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L139"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get token balance for a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.erc20.balanceOf(walletAddress);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L157"
				},
				{
					"kind": "function",
					"name": "detectErc20Burnable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20Burnable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L665"
				},
				{
					"kind": "function",
					"name": "detectErc20Droppable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20Droppable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L677"
				},
				{
					"kind": "function",
					"name": "detectErc20Mintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20Mintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L658"
				},
				{
					"kind": "function",
					"name": "detectErc20SignatureMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20SignatureMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L701"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the token metadata"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; name: string; symbol: string }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The token metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "name, symbol, etc..."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const token = await contract.erc20.get();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L119"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "receiver",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "amount",
									"type": "(string) | (number)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The amount of tokens you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
												}
											]
										}
									]
								},
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc20.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20Mintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L423"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total supply for this token"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get how much supply has been minted"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.erc20.totalSupply();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L175"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L74",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L483",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.erc20.burn(amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L506",
					"type": "{ (...args: [holder: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [holder: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn tokens from a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.erc20.burnFrom(holderAddress, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L68",
					"type": "(undefined) | (Erc20Burnable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L538",
					"type": "{ (...args: [amount: (string) | (number), options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number), options: ClaimOptions]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "The transaction receipt"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim Tokens."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.erc20.claim(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L569",
					"type": "{ (...args: [destinationAddress: string, amount: (string) | (number), options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, amount: (string) | (number), options: ClaimOptions]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim tokens to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "The transaction receipt"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim Tokens."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.erc20.claim(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L71",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "droppable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L69",
					"type": "(undefined) | (Erc20Droppable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L63",
					"type": "\"ERC20\""
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L385",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to the connected wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.erc20.mint(amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L458",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint tokens to many wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to many wallets in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20BatchMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L405",
					"type": "{ (...args: [receiver: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [receiver: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint tokens to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to a specified address."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.erc20.mintTo(toAddress, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintable",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Mint tokens"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L67",
					"type": "(undefined) | (Erc20Mintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "setAllowance",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L313",
					"type": "{ (...args: [spender: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [spender: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setAllowance",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set token allowance"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Allows the specified "
														},
														{
															"type": "inlineCode",
															"value": "spender"
														},
														{
															"type": "text",
															"value": " wallet to transfer the given "
														},
														{
															"type": "inlineCode",
															"value": "amount"
														},
														{
															"type": "text",
															"value": " of tokens to another wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.erc20.setAllowance(spenderAddress, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "signatureMintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L70",
					"type": "(undefined) | (Erc20SignatureMintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L72",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L255",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.erc20.transfer(toAddress, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L348",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer tokens to many wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens from the connected wallet to many wallets"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.erc20.transferBatch(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L286",
					"type": "{ (...args: [from: string, to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer tokens from a specific address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from one wallet to another"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.erc20.transferFrom(fromAddress, toAddress, amount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L75",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "claimConditions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L605",
					"returns": {
						"type": "DropClaimConditions<BaseDropERC20>"
					}
				},
				{
					"kind": "accessor",
					"name": "signature",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20.ts#L627",
					"returns": {
						"type": "Erc20SignatureMintable"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(TokenERC20) | (DropERC20) | (BaseERC20)"
				}
			],
			"implements": ["UpdateableNetwork", "DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20BatchMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L23",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint Many ERC20 Tokens at once"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Token batch minting functionality that handles unit parsing for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc20",
								"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC20 & IMulticall>"
							}
						],
						"returns": {
							"type": "Erc20BatchMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L28"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L25",
					"type": "ContractWrapper<IMintableERC20 & IMulticall>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L26",
					"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L24",
					"type": "\"ERC20BatchMintable\""
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-batch-mintable.ts#L58",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Tokens To Many Wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to many wallets in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.token.mint.batch(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20Burnable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L12",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc20",
								"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IBurnableERC20>"
							}
						],
						"returns": {
							"type": "Erc20Burnable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L18"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L16",
					"type": "ContractWrapper<IBurnableERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L15",
					"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L13",
					"type": "\"ERC20Burnable\""
				},
				{
					"kind": "variable",
					"name": "from",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L60",
					"type": "{ (...args: [holder: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [holder: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "from",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.token.burn.from(holderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "tokens",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-burnable.ts#L36",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "tokens",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.token.burn.tokens(amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20ClaimableWithConditions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L25",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Configure and claim ERC20 tokens"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Manage claim phases and claim ERC20 tokens that have been lazily minted."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.token.drop.claim.to(\"0x...\", quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc20",
								"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<BaseDropERC20>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc20ClaimableWithConditions"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L54"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "conditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L49",
					"type": "DropClaimConditions<BaseDropERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L50",
					"type": "ContractWrapper<BaseDropERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L51",
					"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L26",
					"type": "\"ERC20ClaimConditionsV2\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L52",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-claim-conditions.ts#L95",
					"type": "{ (...args: [destinationAddress: string, amount: (string) | (number), options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, amount: (string) | (number), options: ClaimOptions]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim a certain amount of tokens to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "The transaction receipt"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim Tokens."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.token.drop.claim.to(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20Droppable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L17",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Configure and claim ERC20 tokens"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Manage claim phases and claim ERC20 tokens that have been lazily minted."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.token.drop.claim.to(\"0x...\", quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc20",
								"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<BaseDropERC20>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc20Droppable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L45"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "claim",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L40",
					"type": "Erc20ClaimableWithConditions",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L41",
					"type": "ContractWrapper<BaseDropERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L42",
					"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-droppable.ts#L43",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Erc20Mintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L25",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint ERC20 Tokens"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Token minting functionality that handles unit parsing for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.nft.mint.to(walletAddress, nftMetadata);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc20",
								"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC20>"
							}
						],
						"returns": {
							"type": "Erc20Mintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L35"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectErc20BatchMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20BatchMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L76"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [],
							"parameters": [
								{
									"name": "to",
									"type": "string"
								},
								{
									"name": "amount",
									"type": "(string) | (number)"
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc20.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L62"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "batch",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Batch mint Tokens to many addresses"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L33",
					"type": "(undefined) | (Erc20BatchMintable)",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L27",
					"type": "ContractWrapper<IMintableERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L28",
					"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L26",
					"type": "\"ERC20Mintable\""
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-mintable.ts#L53",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to a specified address."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.token.mint.to(toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc20SignatureMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L30",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TokenERC20>"
							},
							{
								"name": "roles",
								"type": "ContractRoles<TokenERC20, (\"transfer\") | (\"minter\") | (\"admin\")>",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "Erc20SignatureMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L38"
			},
			"methods": [
				{
					"kind": "function",
					"name": "generate",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a signature that can be used to mint a certain amount of tokens"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "mintRequest",
									"type": "{ currencyAddress: string; mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number); to: string; uid: string }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload20>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the signed payload and the corresponding signature"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  quantity: 4.2, // The quantity of tokens to be minted\n  to: {{wallet_address}}, // Who will receive the tokens\n  price: 0.5, // the price to pay for minting those tokens\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now,\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n};\n\nconst signedPayload = await contract.erc20.signature.generate(payload);\n// now anyone can use these to mint the NFT using `contract.erc20.signature.mint(signedPayload)`"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L187"
				},
				{
					"kind": "function",
					"name": "generateBatch",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a batch of signatures that can be used to mint many token signatures."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadsToSign",
									"type": "Array<{ currencyAddress: string; mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number); to: string; uid: string }>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payloads to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload20[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an array of payloads and signatures"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "35734",
													"children": [
														{
															"type": "text",
															"value": "Erc20SignatureMintable.generate"
														}
													]
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20SignatureMintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L202"
				},
				{
					"kind": "function",
					"name": "verify",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Verify that a payload is correctly signed"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signedPayload",
									"type": "SignedPayload20",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to verify"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC20SignatureMintable"
												}
											]
										},
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  quantity: 4.2, // The quantity of tokens to be minted\n  to: {{wallet_address}}, // Who will receive the tokens\n  price: 0.5, // the price to pay for minting those tokens\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now,\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n};\n\nconst signedPayload = await contract.erc20.signature.generate(payload);\n// Now you can verify if the signed payload is valid\nconst isValid = await contract.erc20.signature.verify(signedPayload);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L150"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L33",
					"type": "ContractWrapper<TokenERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L31",
					"type": "\"ERC20SignatureMintable\""
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L62",
					"type": "{ (...args: [signedPayload: SignedPayload20]) : Promise<TResult> ; prepare: (...args: [signedPayload: SignedPayload20]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint tokens from a signature"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload20]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a certain amount of tokens from a previously generated signature."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// see how to craft a payload to sign in the `generate()` documentation\nconst signedPayload = contract.erc20.signature.generate(payload);\n\n// Use the signed payload to mint the tokens\nconst tx = contract.erc20.signature.mint(signedPayload);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20SignatureMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload20]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L92",
					"type": "{ (...args: [signedPayloads: SignedPayload20[]]) : Promise<TResult> ; prepare: (...args: [signedPayloads: SignedPayload20[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint any number of generated tokens signatures at once"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload20[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)"
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC20SignatureMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload20[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-signature-mintable.ts#L34",
					"type": "(undefined) | (ContractRoles<TokenERC20, (\"transfer\") | (\"minter\") | (\"admin\")>)",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L92",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC721 NFT functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC721 contract that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.erc721.transfer(walletAddress, tokenId);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "Erc721<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC721) | (DropERC721) | (SignatureDrop) | (TokenERC721) | (Multiwrap)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L123"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L219"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT balance of a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.erc721.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L209"
				},
				{
					"kind": "function",
					"name": "detectErc721Burnable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721Burnable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1133"
				},
				{
					"kind": "function",
					"name": "detectErc721Claimable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721Claimable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1220"
				},
				{
					"kind": "function",
					"name": "detectErc721ClaimableWithConditions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721ClaimableWithConditions)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1190"
				},
				{
					"kind": "function",
					"name": "detectErc721ClaimableZora",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721ClaimableZora)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1232"
				},
				{
					"kind": "function",
					"name": "detectErc721Enumerable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721Supply)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1108"
				},
				{
					"kind": "function",
					"name": "detectErc721LazyMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721LazyMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1145"
				},
				{
					"kind": "function",
					"name": "detectErc721LoyaltyCard",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721LoyaltyCard)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1256"
				},
				{
					"kind": "function",
					"name": "detectErc721Mintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721Mintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1121"
				},
				{
					"kind": "function",
					"name": "detectErc721SharedMetadata",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721SharedMetadata)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1244"
				},
				{
					"kind": "function",
					"name": "detectErc721SignatureMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721WithQuantitySignatureMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1169"
				},
				{
					"kind": "function",
					"name": "detectErc721TieredDrop",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721TieredDrop)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1157"
				},
				{
					"kind": "function",
					"name": "detectErc721UpdatableMetadata",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721UpdatableMetadata)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1268"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.erc721.get(tokenId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L170"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L152"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.erc721.getAll();\nconsole.log(nfts);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721Supply | ERC721Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L361"
				},
				{
					"kind": "function",
					"name": "getAllOwners",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFT owners"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ owner: string; tokenId: number }[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an array of token ids and owners"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const owners = await contract.erc721.getAllOwners();\nconsole.log(owners);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721Supply | ERC721Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L375"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional claim options"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L858"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it.\nThis is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "receiver",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "metadata",
									"type": "(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The metadata of the NFT you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721Mintable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L550"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.erc721.getOwned(address);\nconsole.log(nfts);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721Supply | ERC721Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L425"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all token ids of NFTs owned by a specific wallet."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L458"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L228"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of an NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L189"
				},
				{
					"kind": "function",
					"name": "totalCirculatingSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total count NFTs minted in this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721Supply | ERC721Enumerable"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L399"
				},
				{
					"kind": "function",
					"name": "totalClaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the claimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the unclaimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of claimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed: ${claimedNFTCount}`);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L891"
				},
				{
					"kind": "function",
					"name": "totalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This returns the total number of NFTs minted in this contract, "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the total supply of a given token."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const count = await contract.erc721.totalCount();\nconsole.log(count);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L391"
				},
				{
					"kind": "function",
					"name": "totalUnclaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the unclaimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the unclaimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of unclaimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L923"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L118",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L642",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a single NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.erc721.burn(tokenId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721Burnable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L105",
					"type": "(undefined) | (Erc721Burnable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "cancel",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L666",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancel",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel loyalty card NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel loyalty card NFTs held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the loyalty card you want to cancel\nconst tokenId = 0;\n\nconst result = await contract.erc721.cancel(tokenId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721LoyaltyCard"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L790",
					"type": "{ (...args: [quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.erc721.claim(quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimCustom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L110",
					"type": "(undefined) | (Erc721Claimable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L822",
					"type": "{ (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.erc721.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimWithConditions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L109",
					"type": "(undefined) | (Erc721ClaimableWithConditions)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "claimZora",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L112",
					"type": "(undefined) | (Erc721ClaimableZora)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L115",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721SharedMetadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L111",
					"type": "(undefined) | (Erc721SharedMetadata)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L102",
					"type": "\"ERC721\""
				},
				{
					"kind": "variable",
					"name": "lazyMint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L727",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "lazyMint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Lazy mint NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many unique NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721LazyMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "lazyMintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L106",
					"type": "(undefined) | (Erc721LazyMintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "loyaltyCard",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L113",
					"type": "(undefined) | (Erc721LoyaltyCard)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L499",
					"type": "{ (...args: [metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint an NFT to the connected wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.erc721.mint(metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L584",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint many NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many unique NFTs at once to the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.erc721.mintBatch(metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721BatchMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L621",
					"type": "{ (...args: [receiver: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) : Promise<TResult> ; prepare: (...args: [receiver: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint many NFTs to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many unique NFTs at once to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721BatchMintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L532",
					"type": "{ (...args: [receiver: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [receiver: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint an NFT to a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a unique NFT to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.erc721.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721Mintable"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[receiver: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L104",
					"type": "(undefined) | (Erc721Mintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "query",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L103",
					"type": "(undefined) | (Erc721Supply)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "revoke",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L689",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revoke",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke loyalty card NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Revoke loyalty card NFTs held by some owner."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the loyalty card you want to revoke\nconst tokenId = 0;\n\nconst result = await contract.erc721.revoke(tokenId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721LoyaltyCard"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "setApprovalForAll",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L309",
					"type": "{ (...args: [operator: string, approved: boolean]) : Promise<TResult> ; prepare: (...args: [operator: string, approved: boolean]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setApprovalForAll",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set approval for all NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[operator: string, approved: boolean]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const operator = \"{{wallet_address}}\";\nawait contract.erc721.setApprovalForAll(operator, true);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[operator: string, approved: boolean]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "signatureMintable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L108",
					"type": "(undefined) | (Erc721WithQuantitySignatureMintable)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L116",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "tieredDropable",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L107",
					"type": "(undefined) | (Erc721TieredDrop)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L255",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.erc721.transfer(walletAddress, tokenId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L283",
					"type": "{ (...args: [from: string, to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT from a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the given wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const fromWalletAddress = \"{{wallet_address}}\";\nconst toWalletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.erc721.transferFrom(fromWalletAddress, toWalletAddress, tokenId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "updatableMetadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L114",
					"type": "(undefined) | (Erc721UpdatableMetadata)",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "update",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L759",
					"type": "{ (...args: [tokenId: BigNumberish, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "update",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update the metadata of an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Update the metadata of an NFT"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT whose metadata you want to update\nconst tokenId = 0;\n// The new metadata\nconst metadata = { name: \"My NFT\", description: \"My NFT description\"\"}\n\nawait contract.erc721.update(tokenId, metadata);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721UpdatableMetadata"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L119",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "claimConditions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L954",
					"returns": {
						"type": "DropClaimConditions<BaseClaimConditionERC721>"
					}
				},
				{
					"kind": "accessor",
					"name": "revealer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1030",
					"returns": {
						"type": "DelayedReveal<BaseDelayedRevealERC721>"
					}
				},
				{
					"kind": "accessor",
					"name": "sharedMetadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L1052",
					"returns": {
						"type": "Erc721SharedMetadata"
					}
				},
				{
					"kind": "accessor",
					"name": "signature",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L989",
					"returns": {
						"type": "Erc721WithQuantitySignatureMintable"
					}
				},
				{
					"kind": "accessor",
					"name": "tieredDrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721.ts#L968",
					"returns": {
						"type": "Erc721TieredDrop"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(Multiwrap) | (SignatureDrop) | (DropERC721) | (TokenERC721) | (BaseERC721)"
				}
			],
			"implements": ["UpdateableNetwork", "DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721BatchMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L28",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint Many ERC721 NFTs at once"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "NFT batch minting functionality that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC721 & IMulticall>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721BatchMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L34"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L30",
					"type": "ContractWrapper<IMintableERC721 & IMulticall>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L32",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L29",
					"type": "\"ERC721BatchMintable\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L31",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-batch-mintable.ts#L71",
					"type": "{ (...args: [to: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) : Promise<TResult> ; prepare: (...args: [to: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many unique NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many unique NFTs at once to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mint.batch.to(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721Burnable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-burnable.ts#L9",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IBurnableERC721>"
							}
						],
						"returns": {
							"type": "Erc721Burnable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-burnable.ts#L14"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-burnable.ts#L12",
					"type": "ContractWrapper<IBurnableERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-burnable.ts#L10",
					"type": "\"ERC721Burnable\""
				},
				{
					"kind": "variable",
					"name": "token",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-burnable.ts#L31",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "token",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn NFTs held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to burn\nconst tokenId = 0;\n\nawait contract.nft.burn.token(tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721Claimable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L26",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Configure and claim ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Manage claim phases and claim ERC721 NFTs that have been lazily minted."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.erc721.claim(tokenId, quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IClaimableERC721>"
							}
						],
						"returns": {
							"type": "Erc721Claimable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L32"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Options for claiming the NFTs"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L50"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L30",
					"type": "ContractWrapper<IClaimableERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L29",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L27",
					"type": "\"ERC721ClaimCustom\""
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claimable.ts#L94",
					"type": "{ (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "Receipt for the transaction"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.erc721.claimTo(address, quantity);\nconst receipt = tx[0].receipt; // the transaction receipt"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721ClaimableWithConditions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L30",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Configure and claim ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Manage claim phases and claim ERC721 NFTs that have been lazily minted."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.erc721.claim(quantity);\nawait contract.erc721.claimConditions.getActive();"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<BaseClaimConditionERC721>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721ClaimableWithConditions"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L60"
			},
			"properties": [
				{
					"kind": "variable",
					"name": "conditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L55",
					"type": "DropClaimConditions<BaseClaimConditionERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L56",
					"type": "ContractWrapper<BaseClaimConditionERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L57",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L31",
					"type": "\"ERC721ClaimConditionsV2\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L58",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-claim-conditions.ts#L102",
					"type": "{ (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim unique NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.erc721.claimTo(address, quantity);\nconst receipt = tx[0].receipt; // the transaction receipt\nconst claimedTokenId = tx[0].id; // the id of the first NFT claimed\nconst claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721Enumerable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L28",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "List owned ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Easily list all the NFTs from a ERC721 contract, owned by a certain wallet."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst walletAddress = \"0x...\";\nconst ownedNFTs = await contract.nft.query.owned.all(walletAddress);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IERC721 & IERC721Metadata & IERC721Enumerable>"
							}
						],
						"returns": {
							"type": "Erc721Enumerable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L33"
			},
			"methods": [
				{
					"kind": "function",
					"name": "all",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.nft.query.owned.all(address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L56"
				},
				{
					"kind": "function",
					"name": "tokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all token ids of NFTs owned by a specific wallet."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L75"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L30",
					"type": "ContractWrapper<IERC721 & IERC721Metadata & IERC721Enumerable>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L31",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-enumerable.ts#L29",
					"type": "\"ERC721Enumerable\""
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721LazyMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L32",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Lazily mint and claim ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Manage claim phases and claim ERC721 NFTs that have been lazily minted."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.drop.claim(quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<BaseDropERC721>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721LazyMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L72"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectErc721Revealable",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "(undefined) | (DelayedReveal<BaseDelayedRevealERC721>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L159"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L68",
					"type": "ContractWrapper<BaseDropERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L69",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L33",
					"type": "\"ERC721LazyMintable\""
				},
				{
					"kind": "variable",
					"name": "lazyMint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L110",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "lazyMint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of unique NFTs to be claimed in the future"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many unique NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "revealer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Delayed reveal"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L66",
					"type": "(undefined) | (DelayedReveal<BaseDelayedRevealERC721>)",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-lazy-mintable.ts#L70",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721Mintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L30",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Mint ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "NFT minting functionality that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.nft.mint.to(walletAddress, nftMetadata);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IMintableERC721>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721Mintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L38"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectErc721BatchMintable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721BatchMintable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L114"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [],
							"parameters": [
								{
									"name": "to",
									"type": "string"
								},
								{
									"name": "metadata",
									"type": "(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)"
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L107"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "batch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L36",
					"type": "(undefined) | (Erc721BatchMintable)",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L32",
					"type": "ContractWrapper<IMintableERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L34",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L31",
					"type": "\"ERC721Mintable\""
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L33",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "to",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-mintable.ts#L72",
					"type": "{ (...args: [to: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [to: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "to",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint a unique NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a unique NFT to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.nft.mint.to(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721Supply",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L32",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "List ERC721 NFTs"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Easily list all the NFTs in a ERC721 contract."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst nfts = await contract.nft.query.all();"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<IERC721 & IERC721Metadata & IERC721Supply>"
							}
						],
						"returns": {
							"type": "Erc721Supply"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L39"
			},
			"methods": [
				{
					"kind": "function",
					"name": "all",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.nft.query.all();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L62"
				},
				{
					"kind": "function",
					"name": "allOwners",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return all the owners of each token id in this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ owner: string; tokenId: number }[]>",
								"summary": []
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L90"
				},
				{
					"kind": "function",
					"name": "detectErc721Owned",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721Enumerable) | (Erc721AQueryable)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L138"
				},
				{
					"kind": "function",
					"name": "totalCirculatingSupply",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of NFTs of this contract currently owned by end users"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs of this contract in circulation (minted & not burned)"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L134"
				},
				{
					"kind": "function",
					"name": "totalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of NFTs minted"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of NFTs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This returns the total number of NFTs minted in this contract, "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "not"
														}
													]
												},
												{
													"type": "text",
													"value": " the total supply of a given token."
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L125"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L34",
					"type": "ContractWrapper<IERC721 & IERC721Metadata & IERC721Supply>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L35",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L33",
					"type": "\"ERC721Supply\""
				},
				{
					"kind": "variable",
					"name": "owned",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-supply.ts#L37",
					"type": "(undefined) | (Erc721Enumerable) | (Erc721AQueryable)",
					"flags": {
						"isPublic": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721TieredDrop",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L32",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "erc721",
								"type": "Erc721<BaseERC721>"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TieredDrop>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721TieredDrop"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L39"
			},
			"methods": [
				{
					"kind": "function",
					"name": "claimWithSignature",
					"signatures": [
						{
							"parameters": [
								{
									"name": "signedPayload",
									"type": "TieredDropPayloadWithSignature"
								}
							],
							"returns": {
								"type": "Promise<TransactionResultWithId<NFT>[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L335"
				},
				{
					"kind": "function",
					"name": "generate",
					"signatures": [
						{
							"parameters": [
								{
									"name": "payloadToSign",
									"type": "{ currencyAddress: string; mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number) | (bigint) | (BigNumber); royaltyBps: number; royaltyRecipient: string; tierPriority: string[]; to: string; uid: string }"
								}
							],
							"returns": {
								"type": "Promise<TieredDropPayloadWithSignature>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L284"
				},
				{
					"kind": "function",
					"name": "generateBatch",
					"signatures": [
						{
							"parameters": [
								{
									"name": "payloadsToSign",
									"type": "Array<{ currencyAddress: string; mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number) | (bigint) | (BigNumber); royaltyBps: number; royaltyRecipient: string; tierPriority: string[]; to: string; uid: string }>"
								}
							],
							"returns": {
								"type": "Promise<TieredDropPayloadWithSignature[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L291"
				},
				{
					"kind": "function",
					"name": "getMetadataInTier",
					"signatures": [
						{
							"parameters": [
								{
									"name": "tier",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<Array<Omit<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, \"id\">>>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L49"
				},
				{
					"kind": "function",
					"name": "getTokensInTier",
					"signatures": [
						{
							"parameters": [
								{
									"name": "tier",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<NFT[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L84"
				},
				{
					"kind": "function",
					"name": "mapPayloadToContractStruct",
					"signatures": [
						{
							"parameters": [
								{
									"name": "payload",
									"type": "{ currencyAddress: string; mintEndTime: BigNumber; mintStartTime: BigNumber; price: string; primarySaleRecipient: string; quantity: BigNumber; royaltyBps: number; royaltyRecipient: string; tierPriority: string[]; to: string; uid: string }"
								}
							],
							"returns": {
								"type": "Promise<GenericRequestStruct>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L378"
				},
				{
					"kind": "function",
					"name": "verify",
					"signatures": [
						{
							"parameters": [
								{
									"name": "signedPayload",
									"type": "TieredDropPayloadWithSignature"
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L322"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L35",
					"type": "ContractWrapper<TieredDrop>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createBatchWithTier",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L115",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createBatchWithTier",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createDelayedRevealBatchWithTier",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L164",
					"type": "{ (...args: [placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createDelayedRevealBatchWithTier",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[placeholder: objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, metadatas: Array<objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, password: string, tier: string, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L36",
					"type": "Erc721<BaseERC721>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L33",
					"type": "\"ERC721TieredDrop\""
				},
				{
					"kind": "variable",
					"name": "reveal",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L251",
					"type": "{ (...args: [batchId: BigNumberish, password: string]) : Promise<TResult> ; prepare: (...args: [batchId: BigNumberish, password: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "reveal",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[batchId: BigNumberish, password: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[batchId: BigNumberish, password: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-tiered-drop.ts#L37",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Erc721WithQuantitySignatureMintable",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L38",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<(SignatureMintERC721) | (TokenERC721)>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "Erc721WithQuantitySignatureMintable"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L45"
			},
			"methods": [
				{
					"kind": "function",
					"name": "generate",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Generate a signature that can be used to mint a dynamic NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "mintRequest",
									"type": "{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number) | (bigint) | (BigNumber); royaltyBps: number; royaltyRecipient: string; to: string; uid: string }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload721WithQuantitySignature>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the signed payload and the corresponding signature"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nftMetadata = {\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  metadata: nftMetadata, // The NFT to mint\n  to: {{wallet_address}}, // Who will receive the NFT\n  quantity: 2, // the quantity of NFTs to mint\n  price: 0.5, // the price per NFT\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now\n  royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n  royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n};\n\nconst signedPayload = await contract.erc721.signature.generate(payload);\n// now anyone can use these to mint the NFT using `contract.erc721.signature.mint(signedPayload)`"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721SignatureMint"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L309"
				},
				{
					"kind": "function",
					"name": "generateBatch",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Genrate a batch of signatures that can be used to mint many dynamic NFTs."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "payloadsToSign",
									"type": "Array<{ currencyAddress: string; metadata: (string) | (objectInputType<{ name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; ... 5 more ...; attributes: ZodNullable<...>; }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">); mintEndTime: (number) | (Date); mintStartTime: (number) | (Date); price: (string) | (number); primarySaleRecipient: string; quantity: (string) | (number) | (bigint) | (BigNumber); royaltyBps: number; royaltyRecipient: string; to: string; uid: string }>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payloads to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignedPayload721WithQuantitySignature[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an array of payloads and signatures"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "See "
												},
												{
													"type": "link",
													"title": null,
													"url": "38022",
													"children": [
														{
															"type": "text",
															"value": "Erc721WithQuantitySignatureMintable.generate"
														}
													]
												}
											]
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721SignatureMint"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L324"
				},
				{
					"kind": "function",
					"name": "isLegacyNFTContract",
					"signatures": [
						{
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L439"
				},
				{
					"kind": "function",
					"name": "mapLegacyPayloadToContractStruct",
					"signatures": [
						{
							"parameters": [
								{
									"name": "mintRequest",
									"type": "{ currencyAddress: string; metadata: Object; mintEndTime: BigNumber; mintStartTime: BigNumber; price: string; primarySaleRecipient: string; quantity: BigNumber; royaltyBps: BigNumber; royaltyRecipient: string; to: string; uid: string; uri: string }"
								}
							],
							"returns": {
								"type": "Promise<MintRequestStructOutput>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L417"
				},
				{
					"kind": "function",
					"name": "verify",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Verify that a payload is correctly signed"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signedPayload",
									"type": "SignedPayload721WithQuantitySignature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the payload to verify"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ERC721SignatureMint"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nftMetadata = {\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst startTime = new Date();\nconst endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst payload = {\n  metadata: nftMetadata, // The NFT to mint\n  to: {{wallet_address}}, // Who will receive the NFT\n  quantity: 2, // the quantity of NFTs to mint\n  price: 0.5, // the price per NFT\n  currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n  mintStartTime: startTime, // can mint anytime from now\n  mintEndTime: endTime, // to 24h from now\n  royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n  royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n  primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n};\n\nconst signedPayload = await contract.erc721.signature.generate(payload);\n// Now you can verify if the signed payload is valid\nconst isValid = await contract.erc721.signature.verify(signedPayload);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L246"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L41",
					"type": "ContractWrapper<(SignatureMintERC721) | (TokenERC721)>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L39",
					"type": "\"ERC721SignatureMintV2\""
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L71",
					"type": "{ (...args: [signedPayload: SignedPayload721WithQuantitySignature]) : Promise<TResult> ; prepare: (...args: [signedPayload: SignedPayload721WithQuantitySignature]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint a dynamically generated NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload721WithQuantitySignature]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a dynamic NFT with a previously generated signature."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// see how to craft a payload to sign in the `generate()` documentation\nconst signedPayload = contract.erc721.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.erc721.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721SignatureMint"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayload: SignedPayload721WithQuantitySignature]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L145",
					"type": "{ (...args: [signedPayloads: SignedPayload721WithQuantitySignature[]]) : Promise<TResult> ; prepare: (...args: [signedPayloads: SignedPayload721WithQuantitySignature[]]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint any number of dynamically generated NFT at once"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload721WithQuantitySignature[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)"
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC721SignatureMint"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[signedPayloads: SignedPayload721WithQuantitySignature[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-with-quantity-signature-mintable.ts#L43",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "GasCostEstimator",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L8",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Estimates the gas cost of Contract calls"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							}
						],
						"returns": {
							"type": "GasCostEstimator<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContract"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L11"
			},
			"methods": [
				{
					"kind": "function",
					"name": "currentGasPriceInGwei",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns the current gas price in gwei"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the current gas price in gwei"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the current gas price in gwei"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L81"
				},
				{
					"kind": "function",
					"name": "gasCostOf",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Estimates the cost of gas in native token of the current chain\nPass in the same parameters as the contract's function."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "fn",
									"type": "(string & {  }) | (keyof TContract[\"functions\"])"
								},
								{
									"name": "args",
									"type": "(any[]) | (Parameters<TContract[\"functions\"][(string & {  }) | (keyof TContract[\"functions\"])]>)"
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the estimated price in native currency (ETH, MATIC, etc) of calling this function"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Estimate the cost of gas in native token of the current chain"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L33"
				},
				{
					"kind": "function",
					"name": "gasLimitOf",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Estimates the gas limit of a transaction\nPass in the same parameters as the contract's function."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "fn",
									"type": "(string & {  }) | (keyof TContract[\"functions\"])"
								},
								{
									"name": "args",
									"type": "(any[]) | (Parameters<TContract[\"functions\"][(string & {  }) | (keyof TContract[\"functions\"])]>)"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the estimated gas limit of the transaction"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Estimates the gas limit of a transaction"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L63"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/gas-cost-estimator.ts#L9",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContract"
				}
			]
		},
		{
			"kind": "class",
			"name": "Marketplace",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L55",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Marketplace>"
							}
						],
						"returns": {
							"type": "Marketplace"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L155"
			},
			"methods": [
				{
					"kind": "function",
					"name": "applyFilter",
					"signatures": [
						{
							"parameters": [
								{
									"name": "listings",
									"type": "(AuctionListing) | (DirectListing)[]"
								},
								{
									"name": "filter",
									"type": "MarketplaceFilter",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "(AuctionListing) | (DirectListing)[]"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L640"
				},
				{
					"kind": "function",
					"name": "getActiveListings",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all active listings"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilter",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<(AuctionListing) | (DirectListing)[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listings = await contract.getActiveListings();\nconst priceOfFirstActiveListing = listings[0].price;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L254"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L202"
				},
				{
					"kind": "function",
					"name": "getAllListings",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all the listings"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilter",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<(AuctionListing) | (DirectListing)[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the listings from this marketplace contract, including sold ones."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listings = await contract.getAllListings();\nconst priceOfFirstListing = listings[0].price;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L282"
				},
				{
					"kind": "function",
					"name": "getAllListingsNoFilter",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"parameters": [
								{
									"name": "filterInvalidListings",
									"type": "boolean"
								}
							],
							"returns": {
								"type": "Promise<(AuctionListing) | (DirectListing)[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L596"
				},
				{
					"kind": "function",
					"name": "getBidBufferBps",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the buffer in basis points between offers"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L317"
				},
				{
					"kind": "function",
					"name": "getListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Convenience function to get either a direct or auction listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<(AuctionListing) | (DirectListing)>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "either a direct or auction listing"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a listing by its listing id"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst listing = await contract.getListing(listingId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L223"
				},
				{
					"kind": "function",
					"name": "getOffers",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all the offers for a listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the id of the listing to fetch offers for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Offer[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the offers for a specified direct or auction listing."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const offers = await marketplaceContract.getOffers(listingId);\nconst firstOffer = offers[0];"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L340"
				},
				{
					"kind": "function",
					"name": "getTimeBufferInSeconds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "get the buffer time in seconds between offers"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L324"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of Listings"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number listings on the marketplace"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L299"
				},
				{
					"kind": "function",
					"name": "isRestrictedToListerRoleOnly",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether listing is restricted only to addresses with the Lister role"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L306"
				},
				{
					"kind": "function",
					"name": "onNetworkUpdated",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L198"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L150",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L58",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "allowListingFromAnyAsset",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L568",
					"type": "{ (...args: []) : Promise<TResult> ; prepare: (...args: []) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "allowListingFromAnyAsset",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Allow listings from any NFT contract"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "allowListingFromSpecificAssetOnly",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L538",
					"type": "{ (...args: [contractAddress: string]) : Promise<TResult> ; prepare: (...args: [contractAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "allowListingFromSpecificAssetOnly",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Restrict listing NFTs only from the specified NFT contract address.\nIt is possible to allow listing from multiple contract addresses."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[contractAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[contractAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L70",
					"type": "ContractAppURI<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "auction",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Auctions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L148",
					"type": "MarketplaceAuction",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "buyoutListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L390",
					"type": "{ (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "buyoutListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Purchase NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Buy a Direct or Auction listing on your marketplace."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutListing(listingId, quantityDesired);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L59",
					"type": "ContractWrapper<Marketplace>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "direct",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Direct listings"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L112",
					"type": "MarketplaceDirect",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L62",
					"type": "ContractEncoder<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L64",
					"type": "GasCostEstimator<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L63",
					"type": "ContractEvents<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "makeOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L442",
					"type": "{ (...args: [listingId: BigNumberish, pricePerToken: (string) | (number), quantity: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, pricePerToken: (string) | (number), quantity: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "makeOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Make an offer for a Direct or Auction Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, pricePerToken: (string) | (number), quantity: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make an offer on a direct or auction listing"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 0.5;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n\nawait contract.makeOffer(\n  listingId,\n  pricePerToken,\n  quantity,\n);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, pricePerToken: (string) | (number), quantity: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L66",
					"type": "ContractMetadata<Marketplace, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L65",
					"type": "ContractPlatformFee<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L71",
					"type": "ContractRoles<Marketplace, (\"admin\") | (\"lister\") | (\"asset\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setBidBufferBps",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L488",
					"type": "{ (...args: [bufferBps: BigNumberish]) : Promise<TResult> ; prepare: (...args: [bufferBps: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setBidBufferBps",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the Auction bid buffer"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[bufferBps: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "A percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// the bid buffer in basis points\nconst bufferBps = 5_00; // 5%\nawait contract.setBidBufferBps(bufferBps);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[bufferBps: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "setTimeBufferInSeconds",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L516",
					"type": "{ (...args: [bufferInSeconds: BigNumberish]) : Promise<TResult> ; prepare: (...args: [bufferInSeconds: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setTimeBufferInSeconds",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Set the Auction Time buffer:"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[bufferInSeconds: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Measured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// the time buffer in seconds\nconst bufferInSeconds = 60;\nawait contract.setTimeBufferInSeconds(bufferInSeconds);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[bufferInSeconds: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L60",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L56",
					"type": "readonly [\"admin\", \"lister\", \"asset\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplace.ts#L151",
					"returns": {
						"type": "number"
					}
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "MarketplaceAuction",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L44",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles auction listings"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Marketplace>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "MarketplaceAuction"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L49"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L58"
				},
				{
					"kind": "function",
					"name": "getBidBufferBps",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the buffer in basis points between offers"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L561"
				},
				{
					"kind": "function",
					"name": "getListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an Auction listing by id"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing Id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<AuctionListing>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Auction listing object"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L72"
				},
				{
					"kind": "function",
					"name": "getMinimumNextBid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "returns the minimum bid a user can place to outbid the previous highest bid"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id of the auction"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L569"
				},
				{
					"kind": "function",
					"name": "getWinner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Auction Winner"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<string>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the winner of the auction after an auction ends."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L137"
				},
				{
					"kind": "function",
					"name": "getWinningBid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Highest Bid"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<(undefined) | (Offer)>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the current highest bid of an active auction."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L106"
				},
				{
					"kind": "function",
					"name": "validateListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Throws error if listing could not be found"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Listing to check for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<AuctionListing>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L608"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "buyoutListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L325",
					"type": "{ (...args: [listingId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "buyoutListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Buyout Auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Buy a specific direct listing from the marketplace."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "cancelListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L427",
					"type": "{ (...args: [listingId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancelListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel Auction Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel an auction listing on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "closeListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L465",
					"type": "{ (...args: [listingId: BigNumberish, closeFor: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, closeFor: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "closeListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Close the Auction for the buyer or the seller"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, closeFor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Closes the Auction and executes the sale for the buyer or the seller."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, closeFor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L45",
					"type": "ContractWrapper<Marketplace>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L199",
					"type": "{ (...args: [listing: NewAuctionListing]) : Promise<TResult> ; prepare: (...args: [listing: NewAuctionListing]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create Auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listing: NewAuctionListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new auction where people can bid on an asset."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listing: NewAuctionListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createListingsBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L282",
					"type": "{ (...args: [listings: NewAuctionListing[]]) : Promise<TResult> ; prepare: (...args: [listings: NewAuctionListing[]]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListingsBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of new auctions"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listings: NewAuctionListing[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a batch of new auctions on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const auctions = [...];\nconst tx = await contract.auction.createListingsBatch(auctions);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listings: NewAuctionListing[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L47",
					"type": "ContractEncoder<Marketplace>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "executeSale",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L504",
					"type": "{ (...args: [listingId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "executeSale",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Execute the Auction Sale"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Closes the Auction and executes the sale for both parties."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.executeSale(listingId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "makeBid",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L356",
					"type": "{ (...args: [listingId: BigNumberish, pricePerToken: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, pricePerToken: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "makeBid",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Bid On Auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, pricePerToken: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make a bid on an auction listing"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 1;\n\nawait contract.auction.makeBid(listingId, pricePerToken);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, pricePerToken: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L46",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "updateListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-auction.ts#L540",
					"type": "{ (...args: [listing: AuctionListing]) : Promise<TResult> ; prepare: (...args: [listing: AuctionListing]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "updateListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update an Auction listing with new metadata"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listing: AuctionListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listing: AuctionListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			]
		},
		{
			"kind": "class",
			"name": "MarketplaceDirect",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L54",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles direct listings"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Marketplace>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "MarketplaceDirect"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L58"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getActiveOffer",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the active offer on a listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								},
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address that made the offer"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<(undefined) | (Offer)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L104"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L66"
				},
				{
					"kind": "function",
					"name": "getListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a direct listing by id"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<DirectListing>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Direct listing object"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L80"
				},
				{
					"kind": "function",
					"name": "validateListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Throws error if listing could not be found"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Listing to check for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<DirectListing>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L502"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "acceptOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L363",
					"type": "{ (...args: [listingId: BigNumberish, addressOfOfferor: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, addressOfOfferor: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "acceptOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Accept an offer on a direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, addressOfOfferor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Accept an offer on a direct listing"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, addressOfOfferor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "buyoutListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L403",
					"type": "{ (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "buyoutListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Buy a Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Buy a specific direct listing from the marketplace."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.direct.buyoutListing(listingId, quantityDesired);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "cancelListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L483",
					"type": "{ (...args: [listingId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancelListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel Direct Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel a direct listing on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L55",
					"type": "ContractWrapper<Marketplace>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L158",
					"type": "{ (...args: [listing: NewDirectListing]) : Promise<TResult> ; prepare: (...args: [listing: NewDirectListing]) => Promise<Transaction<{ id: BigNumber; receipt: TransactionReceipt }>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create Direct Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listing: NewDirectListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new listing on the marketplace where people can buy an asset directly."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listing: NewDirectListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<{ id: BigNumber; receipt: TransactionReceipt }>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createListingsBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L233",
					"type": "{ (...args: [listings: NewDirectListing[]]) : Promise<TResult> ; prepare: (...args: [listings: NewDirectListing[]]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListingsBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of new listings"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listings: NewDirectListing[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a batch of new listings on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const listings = [...];\nconst tx = await contract.direct.createListingsBatch(listings);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listings: NewDirectListing[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "makeOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L289",
					"type": "{ (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, currencyContractAddress: string, pricePerToken: (string) | (number), expirationDate: Date]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, currencyContractAddress: string, pricePerToken: (string) | (number), expirationDate: Date]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "makeOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Make an offer for a Direct Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, currencyContractAddress: string, pricePerToken: (string) | (number), expirationDate: Date]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make an offer on a direct listing"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, currencyContractAddress: string, pricePerToken: (string) | (number), expirationDate: Date]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L56",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "updateListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplace-direct.ts#L452",
					"type": "{ (...args: [listing: DirectListing]) : Promise<TResult> ; prepare: (...args: [listing: DirectListing]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "updateListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update a Direct listing with new metadata."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Note: cannot update a listing with a new quantity of 0. Use "
												},
												{
													"type": "inlineCode",
													"value": "cancelDirectListing"
												},
												{
													"type": "text",
													"value": " to remove a listing instead."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listing: DirectListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listing: DirectListing]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			]
		},
		{
			"kind": "class",
			"name": "MarketplaceV3",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L51",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<MarketplaceV3>"
							}
						],
						"returns": {
							"type": "MarketplaceV3"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L205"
			},
			"methods": [
				{
					"kind": "function",
					"name": "detectDirectListings",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "FEATURE DETECTION"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "(undefined) | (MarketplaceV3DirectListings<MarketplaceV3 & DirectListingsLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L291"
				},
				{
					"kind": "function",
					"name": "detectEnglishAuctions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (MarketplaceV3EnglishAuctions<MarketplaceV3 & EnglishAuctionsLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L306"
				},
				{
					"kind": "function",
					"name": "detectOffers",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (MarketplaceV3Offers<MarketplaceV3 & OffersLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L321"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L250"
				},
				{
					"kind": "function",
					"name": "onNetworkUpdated",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L246"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L200",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L54",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L67",
					"type": "ContractAppURI<MarketplaceV3>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L55",
					"type": "ContractWrapper<MarketplaceV3>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L58",
					"type": "ContractEncoder<MarketplaceV3>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L60",
					"type": "GasCostEstimator<MarketplaceV3>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L59",
					"type": "ContractEvents<MarketplaceV3>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L62",
					"type": "ContractMetadata<MarketplaceV3, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L61",
					"type": "ContractPlatformFee<MarketplaceV3>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L68",
					"type": "ContractRoles<MarketplaceV3, (\"admin\") | (\"lister\") | (\"asset\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L56",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L52",
					"type": "readonly [\"admin\", \"lister\", \"asset\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L201",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "directListings",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L113",
					"returns": {
						"type": "MarketplaceV3DirectListings<DirectListingsLogic>"
					}
				},
				{
					"kind": "accessor",
					"name": "englishAuctions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L158",
					"returns": {
						"type": "MarketplaceV3EnglishAuctions<EnglishAuctionsLogic>"
					}
				},
				{
					"kind": "accessor",
					"name": "offers",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/marketplacev3.ts#L196",
					"returns": {
						"type": "MarketplaceV3Offers<OffersLogic>"
					}
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "MarketplaceV3DirectListings",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L54",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles direct listings"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "MarketplaceV3DirectListings<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "DirectListingsLogic"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L67"
			},
			"methods": [
				{
					"kind": "function",
					"name": "applyFilter",
					"signatures": [
						{
							"parameters": [
								{
									"name": "listings",
									"type": "ListingStructOutput[]"
								},
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ListingStructOutput[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L956"
				},
				{
					"kind": "function",
					"name": "currencyPriceForListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check price per token for an approved currency"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								},
								{
									"name": "currencyContractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "currency contract address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumberish>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst currencyContractAddress = '0x1234';\nconst price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L274"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L80"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all direct listings"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<DirectListingV3[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Direct listing object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listings = await contract.directListings.getAll();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L116"
				},
				{
					"kind": "function",
					"name": "getAllValid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all valid direct listings"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<DirectListingV3[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Direct listing object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listings = await contract.directListings.getAllValid();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L155"
				},
				{
					"kind": "function",
					"name": "getListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single direct listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<DirectListingV3>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Direct listing object"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst listing = await contract.directListings.getListing(listingId);"
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst listing = await contract.directListings.getListing(listingId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L199"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of direct listings"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "Returns the total number of direct listings created."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const totalListings = await contract.directListings.getTotalCount();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L100"
				},
				{
					"kind": "function",
					"name": "isBuyerApprovedForListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check if a buyer is approved for a specific direct listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								},
								{
									"name": "buyer",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "buyer address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, \"{{wallet_address}}\");"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L218"
				},
				{
					"kind": "function",
					"name": "isCurrencyApprovedForListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check if a currency is approved for a specific direct listing"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								},
								{
									"name": "currency",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "currency address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const listingId = 0;\nconst currencyContractAddress = '0x1234';\nconst isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "DirectListings"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L248"
				},
				{
					"kind": "function",
					"name": "validateListing",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Throws error if listing could not be found"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "listingId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Listing to check for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<DirectListingV3>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L796"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "approveBuyerForReservedListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L640",
					"type": "{ (...args: [listingId: BigNumberish, buyer: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, buyer: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "approveBuyerForReservedListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Approve buyer for a reserved direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, buyer: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Approve a buyer to buy from a reserved listing."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to approve buyer for\nconst listingId = \"0\";\n\nawait contract.directListings.approveBuyerForReservedListing(listingId, \"{{wallet_address}}\");"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, buyer: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "approveCurrencyForListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L711",
					"type": "{ (...args: [listingId: BigNumberish, currencyContractAddress: string, pricePerTokenInCurrency: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, currencyContractAddress: string, pricePerTokenInCurrency: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "approveCurrencyForListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Approve a currency for a direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, currencyContractAddress: string, pricePerTokenInCurrency: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to approve currency for\nconst listingId = \"0\";\n\nawait contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, currencyContractAddress: string, pricePerTokenInCurrency: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "buyFromListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L577",
					"type": "{ (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "buyFromListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Buy direct listing for a specific wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Buy from a specific direct listing from the marketplace."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the listing you want to buy from\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.directListings.buyFromListing(listingId, quantityDesired, \"{{wallet_address}}\");"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, quantityDesired: BigNumberish, receiver: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "cancelListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L547",
					"type": "{ (...args: [listingId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancelListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel Direct Listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel a direct listing on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to cancel\nconst listingId = 0;\n\nawait contract.directListings.cancelListing(listingId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L58",
					"type": "ContractWrapper<DirectListingsLogic>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L341",
					"type": "{ (...args: [listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]) : Promise<TResult> ; prepare: (...args: [listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create new direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new listing on the marketplace where people can buy an asset directly."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // The price to pay per unit of NFTs listed.\n  pricePerToken: 1.5,\n  // when should the listing open up for offers\n  startTimestamp: new Date(Date.now()),\n  // how long the listing will be open for\n  endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n  // Whether the listing is reserved for a specific set of buyers.\n  isReservedListing: false\n}\n\nconst tx = await contract.directListings.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createListingsBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L411",
					"type": "{ (...args: [listings: Array<{ assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }>]) : Promise<TResult> ; prepare: (...args: [listings: Array<{ assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }>]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createListingsBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of new listings"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listings: Array<{ assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a batch of new listings on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const listings = [...];\nconst tx = await contract.directListings.createListingsBatch(listings);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listings: Array<{ assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L64",
					"type": "ContractEncoder<DirectListingsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L65",
					"type": "GasCostEstimator<DirectListingsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L62",
					"type": "ContractEvents<DirectListingsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L57",
					"type": "\"DirectListings\""
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L63",
					"type": "ContractInterceptor<DirectListingsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "revokeBuyerApprovalForReservedListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L672",
					"type": "{ (...args: [listingId: BigNumberish, buyer: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, buyer: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revokeBuyerApprovalForReservedListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke approval of a buyer for a reserved direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, buyer: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to approve buyer for\nconst listingId = \"0\";\n\nawait contract.directListings.revokeBuyerApprovalForReservedListing(listingId, \"{{wallet_address}}\");"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, buyer: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "revokeCurrencyApprovalForListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L762",
					"type": "{ (...args: [listingId: BigNumberish, currencyContractAddress: string]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, currencyContractAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "revokeCurrencyApprovalForListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Revoke approval of a currency for a direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, currencyContractAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The listing ID of the direct listing you want to revoke currency for\nconst listingId = \"0\";\n\nawait contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, currencyContractAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L59",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "updateListing",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-direct-listings.ts#L478",
					"type": "{ (...args: [listingId: BigNumberish, listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]) : Promise<TResult> ; prepare: (...args: [listingId: BigNumberish, listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "updateListing",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Update a direct listing"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the listing you want to update\n\nconst listingId = 0; // ID of the listing you want to update\n\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\", // should be same as original listing\n  // token ID of the asset you want to list\n  tokenId: \"0\", // should be same as original listing\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // The price to pay per unit of NFTs listed.\n  pricePerToken: 1.5,\n  // when should the listing open up for offers\n  startTimestamp: new Date(Date.now()), // can't change this if listing already active\n  // how long the listing will be open for\n  endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n  // Whether the listing is reserved for a specific set of buyers.\n  isReservedListing: false\n}\n\nconst tx = await contract.directListings.updateListing(listingId, listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "DirectListings"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listingId: BigNumberish, listing: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); isReservedListing: boolean; pricePerToken: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "DirectListingsLogic"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "MarketplaceV3EnglishAuctions",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L46",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles auctions"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "MarketplaceV3EnglishAuctions<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "EnglishAuctionsLogic"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L60"
			},
			"methods": [
				{
					"kind": "function",
					"name": "applyFilter",
					"signatures": [
						{
							"parameters": [
								{
									"name": "auctions",
									"type": "AuctionStructOutput[]"
								},
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<AuctionStructOutput[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L877"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L72"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all english auctions"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<EnglishAuction[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Auction object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const auctions = await contract.englishAuctions.getAll();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L108"
				},
				{
					"kind": "function",
					"name": "getAllValid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all valid english auctions"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutOfferor",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<EnglishAuction[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Auction object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const auctions = await contract.englishAuctions.getAllValid();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L145"
				},
				{
					"kind": "function",
					"name": "getAuction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single english auction"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the auction Id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<EnglishAuction>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Auction object"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const auctionId = 0;\nconst auction = await contract.englishAuctions.getAuction(auctionId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L183"
				},
				{
					"kind": "function",
					"name": "getBidBufferBps",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the buffer for an english auction"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "id of the auction"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<number>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the buffer in basis points"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The ID of the auction you want to get the buffer for\nconst auctionId = \"0\";\nconst buffer = await contract.englishAuctions.getBidBufferBps(auctionId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L717"
				},
				{
					"kind": "function",
					"name": "getMinimumNextBid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the minimum next bid for an english auction"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "id of the auction"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the minimum bid a user can place to outbid the previous highest bid"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The ID of the auction you want to get the minimum next bid for\nconst auctionId = \"0\";\nconst minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L735"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of english auctions"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "Returns the total number of auctions created."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const totalAuctions = await contract.englishAuctions.getTotalCount();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L92"
				},
				{
					"kind": "function",
					"name": "getWinner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the winner for a specific english auction"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the auction Id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the auction winner"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the winner of the auction after an auction ends."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The auction ID of a closed english auction\nconst auctionId = 0;\nconst auctionWinner = await contract.englishAuctions.getWinner(auctionId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L259"
				},
				{
					"kind": "function",
					"name": "getWinningBid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get winning bid of an english auction"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the auction Id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<(undefined) | (Bid)>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the current highest bid of an active auction."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The ID of the auction\nconst auctionId = 0;\nconst winningBid = await contract.englishAuctions.getWinningBid(auctionId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L203"
				},
				{
					"kind": "function",
					"name": "isWinningBid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check if a bid is or will be a winning bid"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Auction Id"
												}
											]
										}
									]
								},
								{
									"name": "bidAmount",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Amount to bid"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "true if the bid is or will be a winning bid"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const auctionId = 0;\nconst bidAmount = 100;\nconst isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "EnglishAuctions"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L234"
				},
				{
					"kind": "function",
					"name": "validateAuction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Throws error if auction could not be found"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "auctionId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Auction to check for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<EnglishAuction>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L774"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "buyoutAuction",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L451",
					"type": "{ (...args: [auctionId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "buyoutAuction",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Buyout an english auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Buy a specific auction from the marketplace."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The auction ID you want to buy\nconst auctionId = 0;\n\nawait contract.englishAuctions.buyoutAuction(auctionId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "cancelAuction",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L561",
					"type": "{ (...args: [auctionId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancelAuction",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel an english auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel an auction on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the auction you want to cancel\nconst auctionId = \"0\";\n\nawait contract.englishAuctions.cancelAuction(auctionId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "closeAuctionForBidder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L593",
					"type": "{ (...args: [auctionId: BigNumberish, closeFor: string]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish, closeFor: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "closeAuctionForBidder",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Close the english auction for the bidder"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish, closeFor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Closes the Auction and executes the sale for the buyer."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the auction you want to close\nconst auction = \"0\";\nawait contract.englishAuctions.closeAuctionForBidder(auctionId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish, closeFor: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "closeAuctionForSeller",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L634",
					"type": "{ (...args: [auctionId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "closeAuctionForSeller",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Close the english auction for the seller"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Closes the Auction and executes the sale for the seller."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the auction you want to close\nconst auctionId = \"0\";\nawait contract.englishAuctions.closeAuctionForSeller(auctionId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L51",
					"type": "ContractWrapper<EnglishAuctionsLogic>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "createAuction",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L328",
					"type": "{ (...args: [auction: { assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }]) : Promise<TResult> ; prepare: (...args: [auction: { assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createAuction",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create an english auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auction: { assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction hash and the auction id"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new auction where people can bid on an asset."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract of the asset you want to auction\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to auction\n  tokenId: \"0\",\n  // how many of the asset you want to auction\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the auctioned tokens\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // the minimum bid that will be accepted for the token\n  minimumBidAmount: \"1.5\",\n  // how much people would have to bid to instantly buy the asset\n  buyoutBidAmount: \"10\",\n  // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n  timeBufferInSeconds: \"900\", // 15 minutes by default\n  // A bid must be at least this much bps greater than the current winning bid\n  bidBufferBps: \"500\", // 5% by default\n  // when should the auction open up for bidding\n  startTimestamp: new Date(Date.now()),\n  // end time of auction\n  endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n}\n\nconst tx = await contract.englishAuctions.createAuction(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created auction"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auction: { assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createAuctionsBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L404",
					"type": "{ (...args: [listings: Array<{ assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }>]) : Promise<TResult> ; prepare: (...args: [listings: Array<{ assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }>]) => Promise<Transaction<TransactionResultWithId[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createAuctionsBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of new auctions"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[listings: Array<{ assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a batch of new auctions on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const auctions = [...];\nconst tx = await contract.englishAuctions.createAuctionsBatch(auctions);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[listings: Array<{ assetContractAddress: string; bidBufferBps: (string) | (number) | (bigint) | (BigNumber); buyoutBidAmount: (string) | (number); currencyContractAddress: string; endTimestamp: (number) | (Date); minimumBidAmount: (string) | (number); quantity: (string) | (number) | (bigint) | (BigNumber); startTimestamp: (number) | (Date); timeBufferInSeconds: (string) | (number) | (bigint) | (BigNumber); tokenId: Object }>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L57",
					"type": "ContractEncoder<EnglishAuctionsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L58",
					"type": "GasCostEstimator<EnglishAuctionsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L55",
					"type": "ContractEvents<EnglishAuctionsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "executeSale",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L672",
					"type": "{ (...args: [auctionId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "executeSale",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Close the english auction for both the seller and the bidder"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Closes the Auction and executes the sale for both parties."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the auction you want to close\nconst auction = \"0\";\nawait contract.englishAuctions.executeSale(auctionId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L50",
					"type": "\"EnglishAuctions\""
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L56",
					"type": "ContractInterceptor<EnglishAuctionsLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "makeBid",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L486",
					"type": "{ (...args: [auctionId: BigNumberish, bidAmount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [auctionId: BigNumberish, bidAmount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "makeBid",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Bid on an english auction"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish, bidAmount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction result"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make a bid on an auction"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The auction ID of the asset you want to bid on\nconst auctionId = 0;\n// The total amount you are willing to bid for auctioned tokens\nconst bidAmount = 1;\n\nawait contract.englishAuctions.makeBid(auctionId, bidAmount);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "EnglishAuctions"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[auctionId: BigNumberish, bidAmount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-english-auction.ts#L52",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "EnglishAuctionsLogic"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "MarketplaceV3Offers",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L36",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Handles marketplace offers"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "MarketplaceV3Offers<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "OffersLogic"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L49"
			},
			"methods": [
				{
					"kind": "function",
					"name": "applyFilter",
					"signatures": [
						{
							"parameters": [
								{
									"name": "offers",
									"type": "OfferStructOutput[]"
								},
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutSeller",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<OfferStructOutput[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L466"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L62"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all offers"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutSeller",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<OfferV3[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Offer object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const offers = await contract.offers.getAll();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Offers"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L98"
				},
				{
					"kind": "function",
					"name": "getAllValid",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all valid offers"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "filter",
									"type": "MarketplaceFilterWithoutSeller",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filter parameters"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<OfferV3[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Offer object array"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const offers = await contract.offers.getAllValid();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Offers"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L135"
				},
				{
					"kind": "function",
					"name": "getOffer",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single offer"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "offerId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the listing id"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<OfferV3>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the Direct listing object"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const offerId = 0;\nconst offer = await contract.offers.getOffer(offerId);"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Offers"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L173"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total number of offers"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "Returns the total number of offers created."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const totalOffers = await contract.offers.getTotalCount();"
										}
									]
								},
								{
									"tag": "@twfeature",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Offers"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L82"
				},
				{
					"kind": "function",
					"name": "validateOffer",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Throws error if offer could not be found"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "offerId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "offer to check for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<OfferV3>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L342"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "acceptOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L307",
					"type": "{ (...args: [offerId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [offerId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "acceptOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Accept an offer"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[offerId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction receipt"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the offer you want to accept\nconst offerId = 0;\n\nawait contract.offers.acceptOffer(offerId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Offers"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[offerId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "cancelOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L282",
					"type": "{ (...args: [offerId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [offerId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "cancelOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Cancel an offer"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[offerId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction receipt"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Cancel an offer on the marketplace"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The ID of the offer you want to cancel\nconst offerId = \"0\";\n\nawait contract.offers.cancelOffer(offerId);"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Offers"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[offerId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L40",
					"type": "ContractWrapper<OffersLogic>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L46",
					"type": "ContractEncoder<OffersLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L47",
					"type": "GasCostEstimator<OffersLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L44",
					"type": "ContractEvents<OffersLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "featureName",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L39",
					"type": "\"Offers\""
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L45",
					"type": "ContractInterceptor<OffersLogic>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "makeOffer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L214",
					"type": "{ (...args: [offer: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); quantity: (string) | (number) | (bigint) | (BigNumber); tokenId: Object; totalPrice: (string) | (number) }]) : Promise<TResult> ; prepare: (...args: [offer: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); quantity: (string) | (number) | (bigint) | (BigNumber); tokenId: Object; totalPrice: (string) | (number) }]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "makeOffer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Make an offer"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[offer: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); quantity: (string) | (number) | (bigint) | (BigNumber); tokenId: Object; totalPrice: (string) | (number) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "the transaction receipt and the id of the newly created offer"
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Make an offer on the marketplace for an asset."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the offer you want to make\nconst offer = {\n  // address of the contract the asset you want to make an offer for\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to buy\n  tokenId: \"0\",\n  // how many of the asset you want to buy\n  quantity: 1,\n  // address of the currency contract that you offer to pay in\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // Total price you offer to pay for the mentioned token(s)\n  totalPrice: \"1.5\",\n  // Offer valid until\n  endTimestamp: new Date(),\n}\n\nconst tx = await contract.offers.makeOffer(offer);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created offer"
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Offers"
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[offer: { assetContractAddress: string; currencyContractAddress: string; endTimestamp: (number) | (Date); quantity: (string) | (number) | (bigint) | (BigNumber); tokenId: Object; totalPrice: (string) | (number) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/marketplacev3-offers.ts#L41",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "OffersLogic"
				}
			],
			"implements": ["DetectableFeature"]
		},
		{
			"kind": "class",
			"name": "Multiwrap",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L55",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Multiwrap>"
							}
						],
						"returns": {
							"type": "Multiwrap"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L95"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L175"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L168"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.get(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L142"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L62"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L81"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L101"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Token Ids"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the token ids of NFTs owned by a specific wallet (no metadata)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L115"
				},
				{
					"kind": "function",
					"name": "getWrappedContents",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the contents of a wrapped token bundle"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "wrappedTokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the id of the wrapped token bundle"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<WrappedTokens>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const contents = await contract.getWrappedContents(wrappedTokenId);\nconsole.log(contents.erc20Tokens);\nconsole.log(contents.erc721Tokens);\nconsole.log(contents.erc1155Tokens);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L149"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L184"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of a given NFT within this Contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L152"
				},
				{
					"kind": "function",
					"name": "toTokenStructList",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"parameters": [
								{
									"name": "contents",
									"type": "TokensToWrap"
								}
							],
							"returns": {
								"type": "Promise<TokenStruct[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L303"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get total minted supply count"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L127"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L58",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L65",
					"type": "ContractAppURI<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L35",
					"type": "ContractWrapper<Multiwrap>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L59",
					"type": "ContractEncoder<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L37",
					"type": "Erc721<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L60",
					"type": "GasCostEstimator<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L66",
					"type": "ContractEvents<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L61",
					"type": "ContractMetadata<Multiwrap, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L93",
					"type": "ContractOwner<Multiwrap>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L67",
					"type": "ContractRoles<Multiwrap, (\"transfer\") | (\"minter\") | (\"admin\") | (\"asset\") | (\"unwrap\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L89",
					"type": "ContractRoyalty<Multiwrap, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L203",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "unwrap",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L283",
					"type": "{ (...args: [wrappedTokenId: BigNumberish, recipientAddress: string]) : Promise<TResult> ; prepare: (...args: [wrappedTokenId: BigNumberish, recipientAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "unwrap",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Unwrap a wrapped token bundle, and retrieve its contents"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[wrappedTokenId: BigNumberish, recipientAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.unwrap(wrappedTokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[wrappedTokenId: BigNumberish, recipientAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "wrap",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L235",
					"type": "{ (...args: [contents: TokensToWrap, wrappedTokenMetadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">), recipientAddress: string]) : Promise<TResult> ; prepare: (...args: [contents: TokensToWrap, wrappedTokenMetadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">), recipientAddress: string]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "wrap",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[contents: TokensToWrap, wrappedTokenMetadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">), recipientAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tx = await contract.wrap({\n  erc20Tokens: [{\n    contractAddress: \"0x...\",\n    quantity: \"0.8\"\n  }],\n  erc721Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"0\"\n  }],\n  erc1155Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"1\",\n    quantity: \"2\"\n  }]\n}, {\n    name: \"Wrapped bundle\",\n    description: \"This is a wrapped bundle of tokens and NFTs\",\n    image: \"ipfs://...\",\n});\nconst receipt = tx.receipt(); // the transaction receipt\nconst wrappedTokenId = tx.id; // the id of the wrapped token bundle"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[contents: TokensToWrap, wrappedTokenMetadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">), recipientAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/multiwrap.ts#L56",
					"type": "readonly [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L40",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "NFTCollection",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L44",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create a collection of one-of-one NFTs."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TokenERC721>"
							}
						],
						"returns": {
							"type": "NFTCollection"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L107"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L175"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L168"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.get(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L142"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L161"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L81"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it.\nThis is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "receiver",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "metadata",
									"type": "(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The metadata of the NFT you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L252"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L101"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Token Ids"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the token ids of NFTs owned by a specific wallet (no metadata)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L115"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L184"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer NFTs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L172"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of a given NFT within this Contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L152"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get total minted supply count"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L127"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L47",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L53",
					"type": "ContractAppURI<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L336",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a single NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.burnToken(tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L35",
					"type": "ContractWrapper<TokenERC721>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L58",
					"type": "ContractEncoder<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L37",
					"type": "Erc721<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L59",
					"type": "GasCostEstimator<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L60",
					"type": "ContractEvents<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L48",
					"type": "ContractMetadata<TokenERC721, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L204",
					"type": "{ (...args: [metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint a unique NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a unique NFT to a  specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mint(metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L283",
					"type": "{ (...args: [metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) : Promise<TResult> ; prepare: (...args: [metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many unique NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many unique NFTs at once to the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatch(metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L318",
					"type": "{ (...args: [walletAddress: string, metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) : Promise<TResult> ; prepare: (...args: [walletAddress: string, metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Many unique NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint many unique NFTs at once to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "typescript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, metadata: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L235",
					"type": "{ (...args: [walletAddress: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) : Promise<TResult> ; prepare: (...args: [walletAddress: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint a unique NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint a unique NFT to a specified wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, metadata: (string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L84",
					"type": "ContractOwner<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L62",
					"type": "ContractPlatformFee<TokenERC721>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L54",
					"type": "ContractRoles<TokenERC721, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L80",
					"type": "ContractRoyalty<TokenERC721, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L61",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "signature",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Signature Minting"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L100",
					"type": "Erc721WithQuantitySignatureMintable",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L203",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-collection.ts#L45",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L40",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "NFTDrop",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L52",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Setup a collection of one-of-one NFTs that are minted as users claim them."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<PrebuiltNFTDrop>"
							}
						],
						"returns": {
							"type": "NFTDrop"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L159"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L527"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L520"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.get(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L494"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L217"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L81"
				},
				{
					"kind": "function",
					"name": "getAllClaimed",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Claimed NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata and their ownersfor all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the NFTs (and their owners) that have been claimed in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L250"
				},
				{
					"kind": "function",
					"name": "getAllUnclaimed",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Unclaimed NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Array<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the NFTs that have been not been claimed yet in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L278"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "checkERC20Allowance",
									"type": "boolean",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L398"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L101"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Token Ids"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the token ids of NFTs owned by a specific wallet (no metadata)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L115"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L536"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer NFTs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L340"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of a given NFT within this Contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L504"
				},
				{
					"kind": "function",
					"name": "totalClaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the claimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the unclaimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of claimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L317"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total count NFTs in this drop contract, both claimed and unclaimed"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L228"
				},
				{
					"kind": "function",
					"name": "totalUnclaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the unclaimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the unclaimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of unclaimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L333"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L55",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L62",
					"type": "ContractAppURI<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L473",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a single NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.burnToken(tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "checkout",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Checkout"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L155",
					"type": "PaperCheckout<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L449",
					"type": "{ (...args: [quantity: BigNumberish, checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [quantity: BigNumberish, checkERC20Allowance: any]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to the connected wallet."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "10716",
															"children": [
																{
																	"type": "text",
																	"value": "NFTDrop.claimTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimConditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L117",
					"type": "DropClaimConditions<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L430",
					"type": "{ (...args: [destinationAddress: string, quantity: BigNumberish, checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, quantity: BigNumberish, checkERC20Allowance: any]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim unique NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx[0].receipt; // the transaction receipt\nconst claimedTokenId = tx[0].id; // the id of the NFT claimed\nconst claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L35",
					"type": "ContractWrapper<PrebuiltNFTDrop>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "createBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L378",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of unique NFTs to be claimed in the future"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many unique NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L56",
					"type": "ContractEncoder<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L37",
					"type": "Erc721<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L57",
					"type": "GasCostEstimator<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L65",
					"type": "ContractEvents<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L58",
					"type": "ContractMetadata<PrebuiltNFTDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L157",
					"type": "ContractOwner<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L64",
					"type": "ContractPlatformFee<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "revealer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Delayed reveal"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L149",
					"type": "DelayedReveal<PrebuiltNFTDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L66",
					"type": "ContractRoles<PrebuiltNFTDrop, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L91",
					"type": "ContractRoyalty<PrebuiltNFTDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L63",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L555",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/nft-drop.ts#L53",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L40",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Pack",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L74",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create lootboxes of NFTs with rarity based open mechanics."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Pack>"
							}
						],
						"returns": {
							"type": "Pack"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L121"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L110"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L100"
				},
				{
					"kind": "function",
					"name": "detectVrf",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (PackVRF)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L804"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single Pack"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<NFT>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every pack in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 packs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const pack = await contract.get(0);\nconsole.log(packs;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L198"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L177"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Packs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The pack metadata for all packs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every pack in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 packs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const packs = await contract.getAll();\nconsole.log(packs;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L217"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Packs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The pack metadata for all the owned packs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the packs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the packs of\nconst address = \"{{wallet_address}}\";\nconst packss = await contract.getOwned(address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L235"
				},
				{
					"kind": "function",
					"name": "getPackContents",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Pack Contents"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "packId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The id of the pack to get the contents of."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: string; tokenId: string; totalRewards: string }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string; totalRewards: string }>; erc721Rewards: { contractAddress: string; tokenId: string }[] }>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The contents of the pack."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the rewards contained inside a pack."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const packId = 0;\nconst contents = await contract.getPackContents(packId);\nconsole.log(contents.erc20Rewards);\nconsole.log(contents.erc721Rewards);\nconsole.log(contents.erc1155Rewards);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L275"
				},
				{
					"kind": "function",
					"name": "getTotalCount",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of packs created"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total number of packs minted in this contract"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L244"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L119"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer packs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L251"
				},
				{
					"kind": "function",
					"name": "toPackContentArgs",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"parameters": [
								{
									"name": "metadataWithRewards",
									"type": "{ erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: string; tokenId: string; totalRewards: string }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string; totalRewards: string }>; erc721Rewards: { contractAddress: string; tokenId: string }[] }"
								}
							],
							"returns": {
								"type": "Promise<{ contents: TokenStruct[]; numOfRewardUnits: string[] }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L665"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns the total supply of a specific token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The token ID to get the total supply of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L83"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_vrf",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L112",
					"type": "PackVRF",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L77",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "addPackContents",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L435",
					"type": "{ (...args: [packId: BigNumberish, packContents: { erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }]) : Promise<TResult> ; prepare: (...args: [packId: BigNumberish, packContents: { erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }]) => Promise<Transaction<{ data: () => Promise<NFT>; id: BigNumber; receipt: TransactionReceipt }>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "addPackContents",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Add Pack Contents"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[packId: BigNumberish, packContents: { erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Add contents to an existing pack. See "
														},
														{
															"type": "link",
															"title": null,
															"url": "13534",
															"children": [
																{
																	"type": "text",
																	"value": "Pack.addPackContents"
																}
															]
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const packContents = {\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      contractAddress: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n}\n\nconst tx = await contract.addPackContents(packId, packContents);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[packId: BigNumberish, packContents: { erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<{ data: () => Promise<NFT>; id: BigNumber; receipt: TransactionReceipt }>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "airdrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L194",
					"type": "{ (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "airdrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Airdrop multiple NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Airdrop one or multiple NFTs to the provided wallet addresses."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L79",
					"type": "ContractAppURI<Pack>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L31",
					"type": "ContractWrapper<Pack>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "create",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L389",
					"type": "{ (...args: [metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]) : Promise<TResult> ; prepare: (...args: [metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "create",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create Pack"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new pack with the given metadata and rewards and mint it to the connected wallet. See "
														},
														{
															"type": "link",
															"title": null,
															"url": "13576",
															"children": [
																{
																	"type": "text",
																	"value": "Pack.createTo"
																}
															]
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      contractAddress: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.create(pack);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "createTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L517",
					"type": "{ (...args: [to: string, metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]) : Promise<TResult> ; prepare: (...args: [to: string, metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]) => Promise<Transaction<TransactionResultWithId<NFT>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create Pack To Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new pack with the given metadata and rewards and mint it to the specified address."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      contractAddress: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      contractAddress: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.createTo(\"0x...\", pack);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, metadataWithRewards: { erc1155Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; quantityPerReward: (string | number | bigint | BigNumber) & (string | ... 3 more ... | undefined); totalRewards?: string | ... 3 more ... | undefined; }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: string | number; totalRewards?: string | number | bigint | BigNumber | undefined; }>; erc721Rewards: Array<{ tokenId: (string | number | bigint | BigNumber) & (string | number | bigint | BigNumber | undefined); contractAddress: string; }>; openStartTime: (number) | (Date); packMetadata: Object; rewardsPerPack: (string) | (number) | (bigint) | (BigNumber) }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L84",
					"type": "ContractEncoder<Pack>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L33",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L86",
					"type": "GasCostEstimator<Pack>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L85",
					"type": "ContractEvents<Pack>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L78",
					"type": "ContractMetadata<Pack, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "open",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L584",
					"type": "{ (...args: [tokenId: BigNumberish, amount: BigNumberish, gasLimit: any]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, amount: BigNumberish, gasLimit: any]) => Promise<Transaction<Promise<{ erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "open",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Open Pack"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish, gasLimit: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "list",
													"ordered": false,
													"start": null,
													"spread": false,
													"children": [
														{
															"type": "listItem",
															"spread": false,
															"checked": null,
															"children": [
																{
																	"type": "paragraph",
																	"children": [
																		{
																			"type": "text",
																			"value": "Open a pack to reveal the contained rewards. This will burn the specified pack and\nthe contained assets will be transferred to the opening users wallet."
																		}
																	]
																}
															]
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const tokenId = 0\nconst amount = 1\nconst tx = await contract.open(tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, amount: BigNumberish, gasLimit: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Promise<{ erc1155Rewards: Array<{ contractAddress: string; quantityPerReward: Object; tokenId: Object }>; erc20Rewards: Array<{ contractAddress: string; quantityPerReward: (string) | (number) }>; erc721Rewards: { contractAddress: string; tokenId: Object }[] }>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L110",
					"type": "ContractOwner<Pack>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L80",
					"type": "ContractRoles<Pack, (\"transfer\") | (\"minter\") | (\"admin\") | (\"asset\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L104",
					"type": "ContractRoyalty<Pack, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L140",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L75",
					"type": "readonly [\"admin\", \"minter\", \"asset\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L36",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "vrf",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/pack.ts#L117",
					"returns": {
						"type": "PackVRF"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "SignatureDrop",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L56",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Setup a collection of NFTs where when it comes to minting, you can authorize\nsome external party to mint tokens on your contract, and specify what exactly\nwill be minted by that external party.."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<SignatureDrop>"
							}
						],
						"returns": {
							"type": "SignatureDrop"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L170"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L175"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L168"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.get(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L142"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L240"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L81"
				},
				{
					"kind": "function",
					"name": "getAllClaimed",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Claimed NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata and their ownersfor all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the NFTs (and their owners) that have been claimed in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L273"
				},
				{
					"kind": "function",
					"name": "getAllUnclaimed",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Unclaimed NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Array<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Fetch all the NFTs that have been not been claimed yet in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L301"
				},
				{
					"kind": "function",
					"name": "getClaimTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a claim transaction without executing it.\nThis is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "destinationAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Address you want to send the token to"
												}
											]
										}
									]
								},
								{
									"name": "quantity",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Quantity of the tokens you want to claim"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "ClaimOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.erc721.claim.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L418"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L101"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Token Ids"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the token ids of NFTs owned by a specific wallet (no metadata)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L115"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L184"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer NFTs from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L360"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of a given NFT within this Contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L152"
				},
				{
					"kind": "function",
					"name": "totalClaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the claimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the claimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of claimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L337"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the total count NFTs in this drop contract, both claimed and unclaimed"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L251"
				},
				{
					"kind": "function",
					"name": "totalUnclaimedSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the unclaimed supply"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the unclaimed supply"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the number of unclaimed NFTs in this Drop."
												}
											]
										},
										{
											"type": "list",
											"ordered": false,
											"start": null,
											"spread": false,
											"children": [
												{
													"type": "listItem",
													"spread": false,
													"checked": null,
													"children": []
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L353"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L59",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L67",
					"type": "ContractAppURI<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L486",
					"type": "{ (...args: [tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn a single NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const result = await contract.burnToken(tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "checkout",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Checkout"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L168",
					"type": "PaperCheckout<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L469",
					"type": "{ (...args: [quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim NFTs to the connected wallet."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "10716",
															"children": [
																{
																	"type": "text",
																	"value": "NFTDrop.claimTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimConditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L115",
					"type": "DropClaimConditions<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L452",
					"type": "{ (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]) => Promise<Transaction<TransactionResultWithId<NFT>[]>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim unique NFTs to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim NFTs."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, quantity: BigNumberish, options: ClaimOptions]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId<NFT>[]>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L35",
					"type": "ContractWrapper<SignatureDrop>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "createBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L398",
					"type": "{ (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) : Promise<TResult> ; prepare: (...args: [metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]) => Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "createBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create a batch of unique NFTs to be claimed in the future"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create batch allows you to create a batch of many unique NFTs in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[metadatas: Array<(string) | (objectInputType<{ animation_url: ZodNullable<ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; image: ZodOptional<ZodNullable<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>> }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">)>, options: { onProgress: (event: UploadProgressEvent) => void }]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Array<TransactionResultWithId<objectOutputType<{ animation_url: ZodOptional<ZodNullable<ZodString>>; attributes: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; background_color: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodEffects<ZodString, string, string>, ZodString]>>>; description: ZodNullable<ZodOptional<ZodNullable<ZodString>>>; external_url: ZodOptional<ZodNullable<ZodString>>; id: ZodString; image: ZodOptional<ZodNullable<ZodString>>; name: ZodNullable<ZodOptional<ZodUnion<[ZodString, ZodNumber]>>>; properties: ZodNullable<ZodOptional<ZodUnion<[ZodArray<ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>, \"many\">, ZodObject<{  }, \"strip\", ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">, objectInputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>]>>>; uri: ZodString }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BN) | (BigNumber)>, ZodUnknown]>, \"strip\">>>>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L61",
					"type": "ContractEncoder<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L37",
					"type": "Erc721<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L62",
					"type": "GasCostEstimator<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L70",
					"type": "ContractEvents<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L63",
					"type": "ContractMetadata<SignatureDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L60",
					"type": "ContractOwner<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L69",
					"type": "ContractPlatformFee<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "revealer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Delayed reveal"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L147",
					"type": "DelayedReveal<SignatureDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L71",
					"type": "ContractRoles<SignatureDrop, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "royalties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure royalties"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L96",
					"type": "ContractRoyalty<SignatureDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; seller_fee_basis_points: ZodDefault<ZodNumber>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: string; merkle: Record<string, string>; name: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L68",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "signature",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Signature Minting"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L162",
					"type": "Erc721WithQuantitySignatureMintable",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L203",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/signature-drop.ts#L57",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L40",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "SmartContract",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L109",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Custom contract dynamic class with feature detection"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(provider);\nconst contract = await sdk.getContract(\"{{contract_address}}\");\n\n// call any function in your contract\nawait contract.call(\"myCustomFunction\", [param1, param2]);\n\n// if your contract follows the ERC721 standard, contract.nft will be present\nconst allNFTs = await contract.erc721.query.all()\n\n// if your contract extends IMintableERC721, contract.nft.mint() will be available\nconst tx = await contract.erc721.mint({\n    name: \"Cool NFT\",\n    image: readFileSync(\"some_image.png\"),\n  });"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TContract>"
							}
						],
						"returns": {
							"type": "SmartContract<TContract>"
						},
						"typeParameters": [
							{
								"name": "TContract",
								"extendsType": "BaseContractInterface<{  }>"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L373"
			},
			"methods": [
				{
					"kind": "function",
					"name": "call",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Call any function on this contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "functionName",
									"type": "string & TMethod",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the name of the function to call"
												}
											]
										}
									]
								},
								{
									"name": "args",
									"type": "Parameters<TContract[\"functions\"][TMethod]>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the arguments of the function"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "overrides",
									"type": "CallOverrides",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ReturnType<TContract[\"functions\"][TMethod]>>"
							},
							"typeParameters": [
								{
									"name": "TMethod",
									"extendsType": "(string) | (number) | (symbol)"
								}
							],
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// read functions will return the data from the contract\nconst myValue = await contract.call(\"myReadFunction\");\nconsole.log(myValue);\n\n// write functions will return the transaction receipt\nconst tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\nconst receipt = tx.receipt;\n\n// Optionally override transaction options\nawait contract.call(\"myWriteFunction\", [arg1, arg2], {\n gasLimit: 1000000, // override default gas limit\n value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n};"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L455"
				},
				{
					"kind": "function",
					"name": "detectAccount",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Account<IAccountCore>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L654"
				},
				{
					"kind": "function",
					"name": "detectAccountFactory",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (AccountFactory<IAccountFactory>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L642"
				},
				{
					"kind": "function",
					"name": "detectAirdrop1155",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Airdrop1155<TContract & AirdropERC1155>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L628"
				},
				{
					"kind": "function",
					"name": "detectAirdrop20",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Airdrop20<TContract & AirdropERC20>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L607"
				},
				{
					"kind": "function",
					"name": "detectAirdrop721",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Airdrop721<TContract & AirdropERC721>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L616"
				},
				{
					"kind": "function",
					"name": "detectApp",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ContractAppURI<TContract & IAppURI>) | (ContractAppURI<TContract & IContractMetadata>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L538"
				},
				{
					"kind": "function",
					"name": "detectBaseRouter",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ExtensionManager)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L595"
				},
				{
					"kind": "function",
					"name": "detectDirectListings",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (MarketplaceV3DirectListings<TContract & DirectListingsLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L558"
				},
				{
					"kind": "function",
					"name": "detectEnglishAuctions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (MarketplaceV3EnglishAuctions<TContract & EnglishAuctionsLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L573"
				},
				{
					"kind": "function",
					"name": "detectErc1155",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc1155<TContract & IERC1155 & IERC1155Metadata & IERC1155Supply>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L524"
				},
				{
					"kind": "function",
					"name": "detectErc20",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc20<TContract & IERC20 & IERC20Metadata>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L510"
				},
				{
					"kind": "function",
					"name": "detectErc721",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (Erc721<TContract & IERC721 & IERC721Metadata>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L517"
				},
				{
					"kind": "function",
					"name": "detectOffers",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (MarketplaceV3Offers<TContract & OffersLogic>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L588"
				},
				{
					"kind": "function",
					"name": "detectOwnable",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ContractOwner<Ownable>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L531"
				},
				{
					"kind": "function",
					"name": "detectPlatformFees",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ContractPlatformFee<IPlatformFee>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L501"
				},
				{
					"kind": "function",
					"name": "detectPrimarySales",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ContractPrimarySale)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L492"
				},
				{
					"kind": "function",
					"name": "detectRoles",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (ContractRoles<IPermissions, (\"transfer\") | (\"signer\") | (\"minter\") | (\"admin\") | (\"pauser\") | (\"lister\") | (\"asset\") | (\"unwrap\") | (\"factory\")>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L483"
				},
				{
					"kind": "function",
					"name": "detectRoyalties",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "FEATURE DETECTION"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "(undefined) | (ContractRoyalty<TContract & IRoyalty, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; platform_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; platform_fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; primary_sale_recipient: ZodOptional<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>>; trusted_forwarders: ZodOptional<ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, \"strip\", ZodAny, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, \"strip\", ZodAny, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">> }>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L469"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L412"
				},
				{
					"kind": "function",
					"name": "onNetworkUpdated",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L408"
				},
				{
					"kind": "function",
					"name": "prepare",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Prepare a transaction for sending"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "method",
									"type": "string & TMethod"
								},
								{
									"name": "args",
									"type": "any[] & Parameters<TContract[\"functions\"][TMethod]>"
								},
								{
									"name": "overrides",
									"type": "CallOverrides",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>"
							},
							"typeParameters": [
								{
									"name": "TMethod",
									"extendsType": "(string) | (number) | (symbol)"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L419"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L368",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L113",
					"type": "ContractWrapper<TContract>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L119",
					"type": "ContractEncoder<TContract>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L120",
					"type": "GasCostEstimator<TContract>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L117",
					"type": "ContractEvents<TContract>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "interceptor",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L118",
					"type": "ContractInterceptor<TContract>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L122",
					"type": "ContractMetadata<BaseContract, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; platform_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; platform_fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; primary_sale_recipient: ZodOptional<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>>; trusted_forwarders: ZodOptional<ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; fee_recipient: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; seller_fee_basis_points: number; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, \"strip\", ZodAny, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, \"strip\", ZodAny, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; fee_recipient: ZodOptional<ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>>; image: ZodOptional<ZodString>; merkle: ZodOptional<ZodDefault<ZodRecord<ZodString, ZodString>>>; name: ZodString; seller_fee_basis_points: ZodOptional<ZodDefault<ZodNumber>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodOptional<ZodDefault<ZodString>> }, ZodAny, \"strip\">> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "publishedMetadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L121",
					"type": "ContractPublishedMetadata<TContract>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L114",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L124",
					"returns": {
						"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
					}
				},
				{
					"kind": "accessor",
					"name": "account",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L360",
					"returns": {
						"type": "Account<IAccountCore>"
					}
				},
				{
					"kind": "accessor",
					"name": "accountFactory",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L355",
					"returns": {
						"type": "AccountFactory<IAccountFactory>"
					}
				},
				{
					"kind": "accessor",
					"name": "airdrop1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L323",
					"returns": {
						"type": "Airdrop1155<AirdropERC1155>"
					}
				},
				{
					"kind": "accessor",
					"name": "airdrop20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L315",
					"returns": {
						"type": "Airdrop20<AirdropERC20>"
					}
				},
				{
					"kind": "accessor",
					"name": "airdrop721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L319",
					"returns": {
						"type": "Airdrop721<AirdropERC721>"
					}
				},
				{
					"kind": "accessor",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L187",
					"returns": {
						"type": "ContractAppURI<(IContractMetadata) | (IAppURI)>"
					}
				},
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L369",
					"returns": {
						"type": "number"
					}
				},
				{
					"kind": "accessor",
					"name": "directListings",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L228",
					"returns": {
						"type": "MarketplaceV3DirectListings<DirectListingsLogic>"
					}
				},
				{
					"kind": "accessor",
					"name": "englishAuctions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L273",
					"returns": {
						"type": "MarketplaceV3EnglishAuctions<EnglishAuctionsLogic>"
					}
				},
				{
					"kind": "accessor",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L180",
					"returns": {
						"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>"
					}
				},
				{
					"kind": "accessor",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L166",
					"returns": {
						"type": "Erc20<(BaseERC20) | (BaseSignatureMintERC20)>"
					}
				},
				{
					"kind": "accessor",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L173",
					"returns": {
						"type": "Erc721<BaseERC721>"
					}
				},
				{
					"kind": "accessor",
					"name": "extensions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L364",
					"returns": {
						"type": "ExtensionManager"
					}
				},
				{
					"kind": "accessor",
					"name": "offers",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L311",
					"returns": {
						"type": "MarketplaceV3Offers<OffersLogic>"
					}
				},
				{
					"kind": "accessor",
					"name": "owner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L159",
					"returns": {
						"type": "ContractOwner<Ownable>"
					}
				},
				{
					"kind": "accessor",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L152",
					"returns": {
						"type": "ContractPlatformFee<IPlatformFee>"
					}
				},
				{
					"kind": "accessor",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L138",
					"returns": {
						"type": "ContractRoles<IPermissions, any>"
					}
				},
				{
					"kind": "accessor",
					"name": "royalties",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L131",
					"returns": {
						"type": "ContractRoyalty<IRoyalty, any>"
					}
				},
				{
					"kind": "accessor",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/smart-contract.ts#L145",
					"returns": {
						"type": "ContractPrimarySale"
					}
				}
			],
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "BaseContractInterface"
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "Split",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L44",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create custom royalty splits to distribute funds."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"split\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<Split>"
							}
						],
						"returns": {
							"type": "Split"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L71"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_pendingPayment",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "totalReceived",
									"type": "BigNumber"
								},
								{
									"name": "alreadyReleased",
									"type": "BigNumber"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L393"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Funds owed to a particular wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the amount of funds in the native currency held by the contract that is owed to a specific recipient."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await contract.balanceOf(address);\nconsole.log(funds);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L209"
				},
				{
					"kind": "function",
					"name": "balanceOfAllRecipients",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns all the recipients and their balances in the native currency."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{  }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "A map of recipient addresses to their balances in the native currency."
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L165"
				},
				{
					"kind": "function",
					"name": "balanceOfToken",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get non-native Token Funds owed to a particular wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string"
								},
								{
									"name": "tokenAddress",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await contract.balanceOfToken(address, tokenAddress);\nconsole.log(funds);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L241"
				},
				{
					"kind": "function",
					"name": "balanceOfTokenAllRecipients",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns all the recipients and their balances in a non-native currency."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The address of the currency to check the balances in."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{  }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "A map of recipient addresses to their balances in the specified currency."
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L180"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L112"
				},
				{
					"kind": "function",
					"name": "getAllRecipients",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Recipients of this splits contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SplitRecipient[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the data about the shares of every split recipient on the contract"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const recipients = await contract.getAllRecipients();\nconsole.log(recipients);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L131"
				},
				{
					"kind": "function",
					"name": "getRecipientSplitPercentage",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the % of funds owed to a given address"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address to check percentage of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SplitRecipient>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L284"
				},
				{
					"kind": "function",
					"name": "onNetworkUpdated",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L108"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L66",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L50",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L53",
					"type": "ContractAppURI<Split>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L47",
					"type": "ContractWrapper<Split>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "distribute",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L357",
					"type": "{ (...args: []) : Promise<TResult> ; prepare: (...args: []) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "distribute",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Distribute Funds"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Distribute funds held by the contract in the native currency to all recipients."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "await contract.distribute();"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "distributeToken",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L379",
					"type": "{ (...args: [tokenAddress: string]) : Promise<TResult> ; prepare: (...args: [tokenAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "distributeToken",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Distribute Funds"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Distribute funds held by the contract in the native currency to all recipients."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait contract.distributeToken(tokenAddress);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L54",
					"type": "ContractEncoder<Split>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L55",
					"type": "GasCostEstimator<Split>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L56",
					"type": "ContractEvents<Split>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L51",
					"type": "ContractMetadata<Split, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; recipients: { address: string; sharesBps: number }[]; social_urls: Record<string, string>; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; recipients: ZodEffects<ZodDefault<ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; sharesBps: ZodNumber }, \"strip\", ZodTypeAny, { address: string; sharesBps: number }, { address: string; sharesBps: number }>, \"many\">>, { address: string; sharesBps: number }[], (undefined) | ({ address: string; sharesBps: number }[])>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, \"strip\", ZodUnknown, objectOutputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">, objectInputType<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; recipients: ZodArray<ZodObject<{ address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>; sharesBps: ZodNumber; }, \"strip\", ZodTypeAny, { address: string; sharesBps: number; }, { address: string; sharesBps: number; }>, \"many\">; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>> }, ZodUnknown, \"strip\">> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L57",
					"type": "ContractRoles<Split, \"admin\">",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L48",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "withdraw",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L318",
					"type": "{ (...args: [walletAddress: string]) : Promise<TResult> ; prepare: (...args: [walletAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "withdraw",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Withdraw Funds"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Triggers a transfer to account of the amount of native currency they are owed."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// the wallet address that wants to withdraw their funds\nconst walletAddress = \"{{wallet_address}}\"\nawait contract.withdraw(walletAddress);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "withdrawToken",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L334",
					"type": "{ (...args: [walletAddress: string, tokenAddress: string]) : Promise<TResult> ; prepare: (...args: [walletAddress: string, tokenAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "withdrawToken",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Triggers a transfer to account of the amount of a given currency they are owed."
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, tokenAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[walletAddress: string, tokenAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L45",
					"type": "readonly [\"admin\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/split.ts#L67",
					"returns": {
						"type": "number"
					}
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "StandardErc1155",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L25",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC1155 NFT functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC1155 contract that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.edition.transfer(walletAddress, tokenId, quantity);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "StandardErc1155<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC1155) | (DropERC1155) | (TokenERC1155)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L40"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L110"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								},
								{
									"name": "tokenId",
									"type": "BigNumberish"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L100"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nft = await contract.get(\"0\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L74"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L58"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L119"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Returns the total supply of a specific token"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The token ID to get the total supply of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the total supply"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L83"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L35",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "airdrop",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L194",
					"type": "{ (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "airdrop",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Airdrop multiple NFTs"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Airdrop one or multiple NFTs to the provided wallet addresses."
														}
													]
												}
											]
										},
										{
											"tag": "@twfeature",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "ERC1155"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[tokenId: BigNumberish, addresses: (string[]) | ({ address: string; quantity: (string) | (number) }[]), fromAddress: string, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L31",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "erc1155",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L33",
					"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L140",
					"type": "{ (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish, amount: BigNumberish, data: BytesLike]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-1155-standard.ts#L36",
					"returns": {
						"type": "number"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(DropERC1155) | (TokenERC1155) | (BaseERC1155)"
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "StandardErc20",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L25",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC20 Token functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC20 contract that handles all unit transformation for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.token.transfer(walletAddress, amount);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "StandardErc20<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC20) | (DropERC20) | (TokenERC20)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L41"
			},
			"methods": [
				{
					"kind": "function",
					"name": "allowance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet is allowed to spend on behalf of the connected wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L143"
				},
				{
					"kind": "function",
					"name": "allowanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "owner",
									"type": "string"
								},
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L163"
				},
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.balance();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L95"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L113"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the token Metadata (name, symbol, etc...)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; name: string; symbol: string }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The token metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const token = await contract.get();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L79"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The total supply for this token"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get how much supply has been minted"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.totalSupply();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L125"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L36",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L31",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L34",
					"type": "Erc20<T>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setAllowance",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L229",
					"type": "{ (...args: [spender: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [spender: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setAllowance",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Allows the specified "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet to transfer the given "
												},
												{
													"type": "inlineCode",
													"value": "amount"
												},
												{
													"type": "text",
													"value": " of tokens to another wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L188",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L257",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens To Many Wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens from the connected wallet to many wallets"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L211",
					"type": "{ (...args: [from: string, to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens From Address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from one wallet to another"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L37",
					"returns": {
						"type": "number"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(TokenERC20) | (DropERC20) | (BaseERC20)"
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "StandardErc721",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L31",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Standard ERC721 NFT functions"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@remarks",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Basic functionality for a ERC721 contract that handles IPFS storage for you."
								}
							]
						}
					]
				},
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const contract = await sdk.getContract(\"{{contract_address}}\");\nawait contract.nft.transfer(walletAddress, tokenId);"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<T>"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "chainId",
								"type": "number"
							}
						],
						"returns": {
							"type": "StandardErc721<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "(BaseERC721) | (DropERC721) | (SignatureDrop) | (TokenERC721)"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L44"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L175"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get NFT Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets NFT balance (number of NFTs in this contract owned by the wallet)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L168"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a single NFT"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT to retrieve"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFT>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const tokenId = 0;\nconst nft = await contract.get(tokenId);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L142"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L62"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs queried."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with every NFT in this contract."
												}
											]
										},
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "By default, returns the first 100 NFTs, use queryParams to fetch more."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const nfts = await contract.getAll();\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L81"
				},
				{
					"kind": "function",
					"name": "getOwned",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all NFTs owned by a specific wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address to query, defaults to the connected wallet"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "queryParams",
									"type": "{ count: number; start: number }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional filtering to only fetch a subset of results."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<NFT[]>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The NFT metadata for all NFTs in the contract."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the data associated with the NFTs owned by a specific wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L101"
				},
				{
					"kind": "function",
					"name": "getOwnedTokenIds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Owned Token Ids"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber[]>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the token ids of NFTs owned by a specific wallet (no metadata)"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L115"
				},
				{
					"kind": "function",
					"name": "isApproved",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether this wallet has approved transfers from the given operator"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the wallet address"
												}
											]
										}
									]
								},
								{
									"name": "operator",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the operator address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L184"
				},
				{
					"kind": "function",
					"name": "ownerOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the current owner of a given NFT within this Contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the tokenId of the NFT"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of the owner"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L152"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get total minted supply count"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L127"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L39",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L35",
					"type": "ContractWrapper<T>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "erc721",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L37",
					"type": "Erc721<T>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L36",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L203",
					"type": "{ (...args: [to: string, tokenId: BigNumberish]) : Promise<TResult> ; prepare: (...args: [to: string, tokenId: BigNumberish]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer an NFT"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer an NFT from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, tokenId: BigNumberish]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-721-standard.ts#L40",
					"returns": {
						"type": "number"
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "(SignatureDrop) | (DropERC721) | (TokenERC721) | (BaseERC721)"
				}
			],
			"implements": ["UpdateableNetwork"]
		},
		{
			"kind": "class",
			"name": "StaticJsonRpcBatchProvider",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L14",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "url",
								"type": "(undefined) | (string) | (ConnectionInfo)"
							},
							{
								"name": "network",
								"type": "(undefined) | (Networkish)"
							},
							{
								"name": "batchOptions",
								"type": "Partial<{ sizeLimit: number; timeLimitMs: number }>"
							}
						],
						"returns": {
							"type": "StaticJsonRpcBatchProvider"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L24"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_addEventListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "StaticJsonRpcBatchProvider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_call",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transaction",
									"type": "TransactionRequest",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "BlockTag",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "attempt",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getAddress",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getBlock",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockHashOrBlockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "includeTransactions",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<(Block) | (BlockWithTransactions)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getBlockTag",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<BlockTag>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getFastBlockNumber",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<number>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getFilter",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "filter",
									"type": "(Filter) | (FilterByBlockHash) | (Promise<(Filter) | (FilterByBlockHash)>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(Filter) | (FilterByBlockHash)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getInternalBlockNumber",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "maxAge",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<number>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getResolver",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "name",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "operation",
									"type": "string",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_getTransactionRequest",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transaction",
									"type": "Deferrable<TransactionRequest>",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<Transaction>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_ready",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<Network>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_setFastBlockNumber",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockNumber",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_startEvent",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "Event",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_startPending",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_stopEvent",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "Event",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_uncachedDetectNetwork",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<Network>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_waitForTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transactionHash",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "confirmations",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "timeout",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "replaceable",
									"type": "{ data: string; from: string; nonce: number; startBlock: number; to: string; value: BigNumber }",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionReceipt>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "_wrapTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "tx",
									"type": "Transaction",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "hash",
									"type": "string",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "startBlock",
									"type": "number",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TransactionResponse"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Provider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "call",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transaction",
									"type": "Deferrable<TransactionRequest>",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "ccipReadFetch",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "tx",
									"type": "Transaction",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "calldata",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "urls",
									"type": "string[]",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | (string)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "detectNetwork",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<Network>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "any[]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "estimateGas",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transaction",
									"type": "Deferrable<TransactionRequest>",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getAvatar",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "nameOrAddress",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | (string)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getBalance",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getBlock",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockHashOrBlockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<Block>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getBlockNumber",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<number>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getBlockWithTransactions",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockHashOrBlockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<BlockWithTransactions>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getCode",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getEtherPrice",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<number>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getFeeData",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<FeeData>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getGasPrice",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getLogs",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "filter",
									"type": "(Filter) | (FilterByBlockHash) | (Promise<(Filter) | (FilterByBlockHash)>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<Log[]>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getNetwork",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<Network>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getResolver",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "name",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | (Resolver)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getSigner",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrIndex",
									"type": "(string) | (number)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "JsonRpcSigner"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getStorageAt",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "position",
									"type": "(BigNumberish) | (Promise<BigNumberish>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transactionHash",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionResponse>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getTransactionCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrName",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "blockTag",
									"type": "(BlockTag) | (Promise<BlockTag>)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<number>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getTransactionReceipt",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transactionHash",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionReceipt>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getUncheckedSigner",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "addressOrIndex",
									"type": "(string) | (number)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "UncheckedJsonRpcSigner"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listAccounts",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<string[]>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Listener[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "lookupAddress",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "address",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | (string)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "StaticJsonRpcBatchProvider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "StaticJsonRpcBatchProvider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "StaticJsonRpcBatchProvider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "perform",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "method",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "params",
									"type": "any",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<any>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "poll",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Promise<void>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "prepareRequest",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "method",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "params",
									"type": "any",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "[string, any[]]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "StaticJsonRpcBatchProvider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "eventName",
									"type": "EventType",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "listener",
									"type": "Listener",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Provider"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "resetEventsBlock",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "blockNumber",
									"type": "number",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "resolveName",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "name",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<(null) | (string)>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "send",
					"signatures": [
						{
							"parameters": [
								{
									"name": "method",
									"type": "string"
								},
								{
									"name": "params",
									"type": "any[]"
								}
							],
							"returns": {
								"type": "Promise<any>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L104"
				},
				{
					"kind": "function",
					"name": "sendCurrentBatch",
					"signatures": [
						{
							"parameters": [
								{
									"name": "request",
									"type": "any"
								}
							],
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L36"
				},
				{
					"kind": "function",
					"name": "sendTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "signedTransaction",
									"type": "(string) | (Promise<string>)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionResponse>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "waitForTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transactionHash",
									"type": "string",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "confirmations",
									"type": "number",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "timeout",
									"type": "number",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<TransactionReceipt>"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "defaultUrl",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "string"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getFormatter",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"returns": {
								"type": "Formatter"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getNetwork",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "network",
									"type": "Networkish",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Network"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "hexlifyTransaction",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "transaction",
									"type": "TransactionRequest",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "allowExtra",
									"type": "{  }",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "{  }"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "isProvider",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "value",
									"type": "any",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "value is (Provider)"
							}
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_bootstrapPoll",
					"type": "Timer",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_emitted",
					"type": "{  }",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_eventLoopCache",
					"type": "Record<string, Promise<any>>",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_events",
					"type": "Event[]",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_fastBlockNumber",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_fastBlockNumberPromise",
					"type": "Promise<number>",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_fastQueryDate",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_internalBlockNumber",
					"type": "Promise<{ blockNumber: number; reqTime: number; respTime: number }>",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_isProvider",
					"type": "boolean",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					}
				},
				{
					"kind": "variable",
					"name": "_lastBlockNumber",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_maxFilterBlockRange",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_maxInternalBlockNumber",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_network",
					"type": "Network",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_networkPromise",
					"type": "Promise<Network>",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_nextId",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_pendingBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L18",
					"type": "(null) | (Array<{ reject: (error: Error) => void; request: { id: number; jsonrpc: \"2.0\"; method: string; params: any[] }; resolve: (result: any) => void }>)"
				},
				{
					"kind": "variable",
					"name": "_pendingBatchAggregator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L17",
					"type": "(null) | (Timer)"
				},
				{
					"kind": "variable",
					"name": "_pendingFilter",
					"type": "Promise<number>",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_poller",
					"type": "Timer",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_pollingInterval",
					"type": "number",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "_sizeLimit",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L16",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "_timeLimitMs",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/lib/static-batch-rpc.ts#L15",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "anyNetwork",
					"type": "boolean",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					}
				},
				{
					"kind": "variable",
					"name": "connection",
					"type": "ConnectionInfo",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					}
				},
				{
					"kind": "variable",
					"name": "disableCcipRead",
					"type": "boolean",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "formatter",
					"type": "Formatter",
					"flags": {
						"isExternal": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "_cache",
					"returns": {
						"type": "Record<string, Promise<any>>"
					},
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "accessor",
					"name": "blockNumber",
					"returns": {
						"type": "number"
					},
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "accessor",
					"name": "network",
					"returns": {
						"type": "Network"
					},
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "accessor",
					"name": "polling",
					"returns": {
						"type": "boolean"
					},
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "accessor",
					"name": "pollingInterval",
					"returns": {
						"type": "number"
					},
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "accessor",
					"name": "ready",
					"returns": {
						"type": "Promise<Network>"
					},
					"flags": {
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "ThirdwebSDK",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L126",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The main entry point for the thirdweb SDK"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "storage",
								"type": "IThirdwebStorage",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "ThirdwebSDK"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L273"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "any[]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "(string) | (symbol)[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getBalance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the native balance of a given address (wallet or contract)"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address to check the balance for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await sdk.getBalance(\"0x...\");\nconsole.log(balance.displayValue);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L873"
				},
				{
					"kind": "function",
					"name": "getContract",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Custom ThirdwebContract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "TContractAddress",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TContractAddress extends never ? SmartContract<BaseContractForAddress<TContractAddress>> : SmartContract<BaseContract>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the contract"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TContractAddress",
									"extendsType": "string"
								}
							],
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const contract = await sdk.getContract(\"{{contract_address}}\");"
										}
									]
								}
							]
						},
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Custom ThirdwebContract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								},
								{
									"name": "contractType",
									"type": "TContractType",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the "
												},
												{
													"type": "link",
													"title": null,
													"url": "58",
													"children": [
														{
															"type": "text",
															"value": "ContractType"
														}
													]
												},
												{
													"type": "text",
													"value": " of the contract to load"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TContractType extends (\"pack\") | (\"token\") | (\"edition\") | (\"split\") | (\"vote\") | (\"edition-drop\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"signature-drop\") | (\"token-drop\") ? ContractForPrebuiltContractType<TContractType> : SmartContract<BaseContract>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the contract"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TContractType",
									"extendsType": "(\"custom\") | (\"pack\") | (\"token\") | (\"edition\") | (\"split\") | (\"vote\") | (\"edition-drop\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"signature-drop\") | (\"token-drop\")"
								}
							],
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");"
										}
									]
								}
							]
						},
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Custom ThirdwebContract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								},
								{
									"name": "abi",
									"type": "ContractInterface",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the ABI ([ContractInterface]([object Object])) of the contract to load"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SmartContract<BaseContract>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const contract = await sdk.getContract(\"{{contract_address}}\", ABI);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L516"
				},
				{
					"kind": "function",
					"name": "getContractFromAbi",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Custom contract from a json ABI"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								},
								{
									"name": "abi",
									"type": "ContractInterface",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the JSON abi"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SmartContract<BaseContract>>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the contract"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Import your ABI from a JSON file\nimport myABI from \"./path/to/myABI.json\";\n\nconst contract = sdk.getContractFromAbi(\n  \"{{contract_address}}\",\n  // Pass in the \"abi\" field from the JSON file\n  myABI.abi\n);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L828"
				},
				{
					"kind": "function",
					"name": "getContractList",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return all the contracts deployed by the specified address"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the deployed address"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ContractWithMetadata[]>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const contracts = sdk.getContractList(\"{{wallet_address}}\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L693"
				},
				{
					"kind": "function",
					"name": "getEdition",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Edition contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Edition>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const edition = await sdk.getEdition(\"0x1234...\");\n+ const edition = await sdk.getContract(\"0x1234...\", \"edition\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L390"
				},
				{
					"kind": "function",
					"name": "getEditionDrop",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Edition Drop contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<EditionDrop>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const editionDrop = await sdk.getEditionDrop(\"0x1234...\");\n+ const editionDrop = await sdk.getContract(\"0x1234...\", \"edition-drop\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L376"
				},
				{
					"kind": "function",
					"name": "getMarketplace",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Marketplace contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Marketplace>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const marketplace = await sdk.getMarketplace(\"0x1234...\");\n+ const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L460"
				},
				{
					"kind": "function",
					"name": "getMarketplaceV3",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Marketplace contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<MarketplaceV3>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const marketplace = await sdk.getMarketplaceV3(\"0x1234...\");\n+ const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace-v3\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L474"
				},
				{
					"kind": "function",
					"name": "getMultichainContractList",
					"signatures": [
						{
							"parameters": [
								{
									"name": "walletAddress",
									"type": "string"
								},
								{
									"name": "chains",
									"type": "Chain[]"
								}
							],
							"returns": {
								"type": "Promise<ContractWithMetadata[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L721"
				},
				{
					"kind": "function",
					"name": "getMultiwrap",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Pack contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Multiwrap>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const multiWrap = await sdk.getMultiwrap(\"0x1234...\");\n+ const multiWrap = await sdk.getContract(\"0x1234...\", \"multiwrap\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L502"
				},
				{
					"kind": "function",
					"name": "getNFTCollection",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a NFT Collection Drop contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFTCollection>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const signatureDrop = await sdk.getNFTCollection(\"0x1234...\");\n+ const signatureDrop = await sdk.getContract(\"0x1234...\", \"nft-collection\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L362"
				},
				{
					"kind": "function",
					"name": "getNFTDrop",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a NFT Drop contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<NFTDrop>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const dropContract = await sdk.getDropContract(\"0x1234...\");\n+ const dropContract = await sdk.getContract(\"0x1234...\", \"nft-drop\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L334"
				},
				{
					"kind": "function",
					"name": "getPack",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Pack contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Pack>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const pack = await sdk.getPack(\"0x1234...\");\n+ const pack = await sdk.getContract(\"0x1234...\", \"pack\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L488"
				},
				{
					"kind": "function",
					"name": "getProvider",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explicitly get the active provider."
										}
									]
								}
							],
							"returns": {
								"type": "Provider",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the active provider"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L68"
				},
				{
					"kind": "function",
					"name": "getSignatureDrop",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Signature Drop contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<SignatureDrop>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const signatureDrop = await sdk.getSignatureDrop(\"0x1234...\");\n+ const signatureDrop = await sdk.getContract(\"0x1234...\", \"signature-drop\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L348"
				},
				{
					"kind": "function",
					"name": "getSigner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Explicitly get the active signer."
										}
									]
								}
							],
							"returns": {
								"type": "(undefined) | (Signer)",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the active signer, if there is one"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L60"
				},
				{
					"kind": "function",
					"name": "getSignerOrProvider",
					"signatures": [
						{
							"summary": [],
							"returns": {
								"type": "(Signer) | (Provider)",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the current signer if there is one, otherwise the active provider"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L76"
				},
				{
					"kind": "function",
					"name": "getSplit",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Split contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Split>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const split = await sdk.getSplit(\"0x1234...\");\n+ const split = await sdk.getContract(\"0x1234...\", \"split\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L446"
				},
				{
					"kind": "function",
					"name": "getToken",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Token contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Token>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const token = await sdk.getToken(\"0x1234...\");\n+ const token = await sdk.getContract(\"0x1234...\", \"token\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L418"
				},
				{
					"kind": "function",
					"name": "getTokenDrop",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Token Drop contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TokenDrop>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const tokenDrop = await sdk.getTokenDrop(\"0x1234...\");\n+ const tokenDrop = await sdk.getContract(\"0x1234...\", \"token-drop\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L404"
				},
				{
					"kind": "function",
					"name": "getVote",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of a Vote contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the deployed contract"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Vote>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This method is deprecated and will be removed in a future major version. You should use "
												},
												{
													"type": "link",
													"title": null,
													"url": "40729",
													"children": [
														{
															"type": "text",
															"value": "getContract"
														}
													]
												},
												{
													"type": "text",
													"value": " instead."
												}
											]
										},
										{
											"type": "code",
											"lang": "diff",
											"meta": null,
											"value": "- const vote = await sdk.getVote(\"0x1234...\");\n+ const vote = await sdk.getContract(\"0x1234...\", \"vote\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L432"
				},
				{
					"kind": "function",
					"name": "isReadOnly",
					"signatures": [
						{
							"summary": [],
							"returns": {
								"type": "boolean",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "whether or not a signer is set, "
											},
											{
												"type": "inlineCode",
												"value": "true"
											},
											{
												"type": "text",
												"value": " if there is no signer so the class is in \"read only\" mode"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L52"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "(...args: any[]) => void[]"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "(...args: any[]) => void",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "resolveContractType",
					"signatures": [
						{
							"summary": [],
							"parameters": [
								{
									"name": "contractAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the address of the contract to attempt to resolve the contract type for"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<(\"custom\") | (\"pack\") | (\"token\") | (\"edition\") | (\"split\") | (\"vote\") | (\"edition-drop\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"signature-drop\") | (\"token-drop\")>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the "
											},
											{
												"type": "link",
												"title": null,
												"url": "58",
												"children": [
													{
														"type": "text",
														"value": "ContractType"
													}
												]
											},
											{
												"type": "text",
												"value": " for the given contract address"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L660"
				},
				{
					"kind": "function",
					"name": "updateContractSignerOrProvider",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L799"
				},
				{
					"kind": "function",
					"name": "updateSignerOrProvider",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Update the active signer or provider for all contracts"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the new signer or provider"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L794"
				},
				{
					"kind": "function",
					"name": "fromPrivateKey",
					"signatures": [
						{
							"flags": {
								"isPublic": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of the thirdweb SDK based on a private key."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "privateKey",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the private key - "
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "DO NOT EXPOSE THIS TO THE PUBLIC"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "network",
									"type": "ChainOrRpcUrl",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the SDK options to use"
												}
											]
										}
									]
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional storage implementation to use"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an instance of the SDK"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "This should only be used for backend services or scripts, with the private key stored in a secure way.\n"
												},
												{
													"type": "strong",
													"children": [
														{
															"type": "text",
															"value": "NEVER"
														}
													]
												},
												{
													"type": "text",
													"value": " expose your private key to the public in any way."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L223"
				},
				{
					"kind": "function",
					"name": "fromSigner",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of the thirdweb SDK based on an existing ethers signer"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "signer",
									"type": "Signer",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "a ethers Signer to be used for transactions"
												}
											]
										}
									]
								},
								{
									"name": "network",
									"type": "ChainOrRpcUrl",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								},
								{
									"name": "options",
									"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the SDK options to use"
												}
											]
										}
									]
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional storage implementation to use"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an instance of the SDK"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// get a signer from somewhere (createRandom is being used purely for example purposes)\nconst signer = Wallet.createRandom();\n\n// get an instance of the SDK with the signer already setup\nconst sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L178"
				},
				{
					"kind": "function",
					"name": "fromWallet",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get an instance of the thirdweb SDK based on an AbstractWallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "wallet",
									"type": "{ getSigner: () => Promise<Signer> }",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the implementation of the AbstractWallet class to use for signing"
												}
											]
										}
									]
								},
								{
									"name": "network",
									"type": "ChainOrRpcUrl",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the SDK options to use"
												}
											]
										}
									]
								},
								{
									"name": "storage",
									"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "optional storage implementation to use"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<ThirdwebSDK>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "an instance of the SDK"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\"\n\nconst wallet = new AbstractWalletImplementation();\nconst sdk = await ThirdwebSDK.fromWallet(wallet, \"mainnet\");"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L146"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "deployer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "New contract deployer"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L255",
					"type": "ContractDeployer",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "multiChainRegistry",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The registry of deployed contracts"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L263",
					"type": "MultichainRegistry",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "network",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L18",
					"type": "NetworkInput",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/rpc-connection-handler.ts#L19",
					"type": "{ clientId: string; gasSettings: { maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }; gasless: ({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "clientId",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "gasSettings",
							"type": "{ maxPriceInGwei: number; speed: \"standard\" | \"fast\" | \"fastest\"; }"
						},
						{
							"kind": "subtype",
							"name": "gasless",
							"type": "({ openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; }; experimentalChainlessSupport: boolean; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; }; }) | ({ engine: { relayerUrl: string; }; })"
						},
						{
							"kind": "subtype",
							"name": "gatewayUrls",
							"type": "string[]"
						},
						{
							"kind": "subtype",
							"name": "readonlySettings",
							"type": "{ rpcUrl: string; chainId?: number | undefined; }"
						},
						{
							"kind": "subtype",
							"name": "secretKey",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "supportedChains",
							"type": "Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }>"
						}
					],
					"flags": {
						"isPublic": true,
						"isReadonly": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Upload and download files from IPFS or from your own storage service"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L271",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storageHandler",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Internal handler for uploading and downloading files"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L251",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "verifier",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Contract verifier"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L259",
					"type": "ContractVerifier",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "wallet",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Interact with the connected wallet"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L267",
					"type": "UserWallet",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "auth",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/sdk.ts#L315",
					"returns": {
						"type": "void"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Token",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L45",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create a standard crypto token or cryptocurrency."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"token\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TokenERC20>"
							}
						],
						"returns": {
							"type": "Token"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L81"
			},
			"methods": [
				{
					"kind": "function",
					"name": "allowance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet is allowed to spend on behalf of the connected wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L143"
				},
				{
					"kind": "function",
					"name": "allowanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "owner",
									"type": "string"
								},
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L163"
				},
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.balance();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L95"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L113"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the token Metadata (name, symbol, etc...)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; name: string; symbol: string }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The token metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const token = await contract.get();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L79"
				},
				{
					"kind": "function",
					"name": "getDelegation",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get your voting delegatee address"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of your vote delegatee"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L148"
				},
				{
					"kind": "function",
					"name": "getDelegationOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a specific address voting delegatee address"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "account",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of your vote delegatee"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L159"
				},
				{
					"kind": "function",
					"name": "getMintTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Construct a mint transaction without executing it.\nThis is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "to",
									"type": "string"
								},
								{
									"name": "amount",
									"type": "(string) | (number)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The amount of tokens you want to mint"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
							},
							"blockTags": [
								{
									"tag": "@deprecated",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Use "
												},
												{
													"type": "inlineCode",
													"value": "contract.mint.prepare(...args)"
												},
												{
													"type": "text",
													"value": " instead"
												}
											]
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L216"
				},
				{
					"kind": "function",
					"name": "getVoteBalance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get your wallet voting power for the current checkpoints"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the amount of voting power in tokens"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L131"
				},
				{
					"kind": "function",
					"name": "getVoteBalanceOf",
					"signatures": [
						{
							"parameters": [
								{
									"name": "account",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L137"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer tokens from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L168"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The total supply for this token"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get how much supply has been minted"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.totalSupply();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L125"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L48",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L54",
					"type": "ContractAppURI<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burn",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L280",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burn",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L300",
					"type": "{ (...args: [holder: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [holder: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L31",
					"type": "ContractWrapper<TokenERC20>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "delegateTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L257",
					"type": "{ (...args: [delegateeAddress: string]) : Promise<TResult> ; prepare: (...args: [delegateeAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "delegateTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Lets you delegate your voting power to the delegateeAddress"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[delegateeAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[delegateeAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L56",
					"type": "ContractEncoder<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L34",
					"type": "Erc20<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L57",
					"type": "GasCostEstimator<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L59",
					"type": "ContractEvents<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "history",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L58",
					"type": "TokenERC20History",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L49",
					"type": "ContractMetadata<TokenERC20, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "mint",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L185",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mint",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Tokens for the connected wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "17622",
															"children": [
																{
																	"type": "text",
																	"value": "Token.mintTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintBatchTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L245",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintBatchTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Tokens To Many Wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to many wallets in one transaction."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "mintTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L202",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "mintTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Mint Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens to a specified address."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\n\nawait contract.mintTo(toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L60",
					"type": "ContractPlatformFee<TokenERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L55",
					"type": "ContractRoles<TokenERC20, (\"transfer\") | (\"minter\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L61",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setAllowance",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L229",
					"type": "{ (...args: [spender: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [spender: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setAllowance",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Allows the specified "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet to transfer the given "
												},
												{
													"type": "inlineCode",
													"value": "amount"
												},
												{
													"type": "text",
													"value": " of tokens to another wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "signature",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Signature Minting"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L75",
					"type": "Erc20SignatureMintable",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L188",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L257",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens To Many Wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens from the connected wallet to many wallets"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L211",
					"type": "{ (...args: [from: string, to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens From Address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from one wallet to another"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token.ts#L46",
					"type": "readonly [\"admin\", \"minter\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L37",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "TokenDrop",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L42",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create a Drop contract for a standard crypto token or cryptocurrency."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<PrebuiltTokenDrop>"
							}
						],
						"returns": {
							"type": "TokenDrop"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L88"
			},
			"methods": [
				{
					"kind": "function",
					"name": "allowance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet is allowed to spend on behalf of the connected wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L143"
				},
				{
					"kind": "function",
					"name": "allowanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Allowance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "owner",
									"type": "string"
								},
								{
									"name": "spender",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The allowance of one wallet over anothers funds."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L163"
				},
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance for the currently connected wallet"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.balance();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L95"
				},
				{
					"kind": "function",
					"name": "balanceOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get Token Balance"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "address",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The balance of a specific wallet."
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get a wallets token balance."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L113"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the token Metadata (name, symbol, etc...)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; name: string; symbol: string }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The token metadata"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const token = await contract.get();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L79"
				},
				{
					"kind": "function",
					"name": "getDelegation",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get your voting delegatee address"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of your vote delegatee"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L161"
				},
				{
					"kind": "function",
					"name": "getDelegationOf",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a specific address voting delegatee address"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "account",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address of your vote delegatee"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L172"
				},
				{
					"kind": "function",
					"name": "getVoteBalance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get your wallet voting power for the current checkpoints"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the amount of voting power in tokens"
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L142"
				},
				{
					"kind": "function",
					"name": "getVoteBalanceOf",
					"signatures": [
						{
							"parameters": [
								{
									"name": "account",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L148"
				},
				{
					"kind": "function",
					"name": "isTransferRestricted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get whether users can transfer tokens from this contract"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L181"
				},
				{
					"kind": "function",
					"name": "totalSupply",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The total supply for this token"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get how much supply has been minted"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const balance = await contract.totalSupply();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L125"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L45",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L50",
					"type": "ContractAppURI<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "burnFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L291",
					"type": "{ (...args: [holder: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [holder: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the specified wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[holder: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "burnTokens",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L270",
					"type": "{ (...args: [amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "burnTokens",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Burn Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Burn tokens held by the connected wallet"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claim",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L199",
					"type": "{ (...args: [amount: (string) | (number), checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [amount: (string) | (number), checkERC20Allowance: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claim",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim a certain amount of tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number), checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "See "
														},
														{
															"type": "link",
															"title": null,
															"url": "18902",
															"children": [
																{
																	"type": "text",
																	"value": "TokenDrop.claimTo"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[amount: (string) | (number), checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "claimConditions",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Configure claim conditions"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L82",
					"type": "DropClaimConditions<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "claimTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L229",
					"type": "{ (...args: [destinationAddress: string, amount: (string) | (number), checkERC20Allowance: any]) : Promise<TResult> ; prepare: (...args: [destinationAddress: string, amount: (string) | (number), checkERC20Allowance: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "claimTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Claim a certain amount of tokens to a specific Wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "The transaction receipt"
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Let the specified wallet claim Tokens."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[destinationAddress: string, amount: (string) | (number), checkERC20Allowance: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L31",
					"type": "ContractWrapper<PrebuiltTokenDrop>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "delegateTo",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L247",
					"type": "{ (...args: [delegateeAddress: string]) : Promise<TResult> ; prepare: (...args: [delegateeAddress: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "delegateTo",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Lets you delegate your voting power to the delegateeAddress"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[delegateeAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[delegateeAddress: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L55",
					"type": "ContractEncoder<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "erc20",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L34",
					"type": "Erc20<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L56",
					"type": "GasCostEstimator<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L59",
					"type": "ContractEvents<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L46",
					"type": "ContractMetadata<PrebuiltTokenDrop, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; platform_fee_basis_points: ZodDefault<ZodNumber>; platform_fee_recipient: ZodDefault<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>>; primary_sale_recipient: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; platform_fee_basis_points: number; platform_fee_recipient: string; primary_sale_recipient: string; social_urls: Record<string, string>; symbol: string; trusted_forwarders: string[] }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: any; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; merkle: ZodDefault<ZodRecord<ZodString, ZodString>>; name: ZodString; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; symbol: ZodDefault<ZodString> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }, { app_uri: string; description: string; external_link: string; image: string; merkle: Record<string, string>; name: string; social_urls: Record<string, string>; symbol: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "platformFees",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L58",
					"type": "ContractPlatformFee<PrebuiltTokenDrop>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "roles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L51",
					"type": "ContractRoles<PrebuiltTokenDrop, (\"transfer\") | (\"admin\")>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "sales",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L57",
					"type": "ContractPrimarySale",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "setAllowance",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L229",
					"type": "{ (...args: [spender: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [spender: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "setAllowance",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Allows the specified "
												},
												{
													"type": "inlineCode",
													"value": "spender"
												},
												{
													"type": "text",
													"value": " wallet to transfer the given "
												},
												{
													"type": "inlineCode",
													"value": "amount"
												},
												{
													"type": "text",
													"value": " of tokens to another wallet"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[spender: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L32",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "transfer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L188",
					"type": "{ (...args: [to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transfer",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from the connected wallet to another wallet."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferBatch",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L257",
					"type": "{ (...args: [args: { amount: (string) | (number); toAddress: string }[]]) : Promise<TResult> ; prepare: (...args: [args: { amount: (string) | (number); toAddress: string }[]]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferBatch",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens To Many Wallets"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Mint tokens from the connected wallet to many wallets"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[args: { amount: (string) | (number); toAddress: string }[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "transferFrom",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L211",
					"type": "{ (...args: [from: string, to: string, amount: (string) | (number)]) : Promise<TResult> ; prepare: (...args: [from: string, to: string, amount: (string) | (number)]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "transferFrom",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Transfer Tokens From Address"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Transfer tokens from one wallet to another"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[from: string, to: string, amount: (string) | (number)]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "contractRoles",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/token-drop.ts#L43",
					"type": "readonly [\"admin\", \"transfer\"]",
					"flags": {
						"isStatic": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-standard.ts#L37",
					"returns": {
						"type": "number"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "TokenERC20History",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-history.ts#L12",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Manages history for Token contracts"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<TokenERC20>"
							},
							{
								"name": "events",
								"type": "ContractEvents<TokenERC20>"
							}
						],
						"returns": {
							"type": "TokenERC20History"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-history.ts#L16"
			},
			"methods": [
				{
					"kind": "function",
					"name": "getAllHolderBalances",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get all holder balances"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TokenHolderBalance[]>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "A JSON object of all token holders and their corresponding balances"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Lets you get all token holders and their corresponding balances"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const allHolderBalances = await contract.history.getAllHolderBalances();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-history.ts#L34"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-history.ts#L14",
					"type": "ContractWrapper<TokenERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/erc-20-history.ts#L13",
					"type": "ContractEvents<TokenERC20>",
					"flags": {
						"isPrivate": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "Transaction",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L237",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "TransactionOptionsWithContract<TResult>"
							}
						],
						"returns": {
							"type": "Transaction<TResult>"
						},
						"typeParameters": [
							{
								"name": "TResult"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L306"
			},
			"methods": [
				{
					"kind": "function",
					"name": "encode",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Encode the function data for this transaction"
										}
									]
								}
							],
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L353"
				},
				{
					"kind": "function",
					"name": "estimateGasCost",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Estimate the total gas cost of this transaction (in both ether and wei)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ ether: string; wei: BigNumber }>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L191"
				},
				{
					"kind": "function",
					"name": "estimateGasLimit",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Estimate the gas limit of this transaction"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L404"
				},
				{
					"kind": "function",
					"name": "execute",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Send the transaction and wait for it to be mined"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TResult>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L481"
				},
				{
					"kind": "function",
					"name": "functionError",
					"signatures": [
						{
							"returns": {
								"type": "Error"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L625"
				},
				{
					"kind": "function",
					"name": "getArgs",
					"signatures": [
						{
							"returns": {
								"type": "any[]"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L82"
				},
				{
					"kind": "function",
					"name": "getGasOverrides",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get gas overrides for the transaction"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<({ gasPrice: undefined; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined }) | ({ gasPrice: undefined; maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber }) | ({ gasPrice: BigNumber; maxFeePerGas: undefined; maxPriorityFeePerGas: undefined })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L221"
				},
				{
					"kind": "function",
					"name": "getGasPrice",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calculates the gas price for transactions (adding a 10% tip buffer)"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<BigNumber>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L207"
				},
				{
					"kind": "function",
					"name": "getGaslessOptions",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | ({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L334"
				},
				{
					"kind": "function",
					"name": "getMethod",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L330"
				},
				{
					"kind": "function",
					"name": "getOverrides",
					"signatures": [
						{
							"returns": {
								"type": "CallOverrides"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L86"
				},
				{
					"kind": "function",
					"name": "getSignerAddress",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the address of the transaction signer"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L214"
				},
				{
					"kind": "function",
					"name": "getTarget",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L326"
				},
				{
					"kind": "function",
					"name": "getValue",
					"signatures": [
						{
							"returns": {
								"type": "(BigNumberish) | (Promise<BigNumberish>)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L90"
				},
				{
					"kind": "function",
					"name": "populateTransaction",
					"signatures": [
						{
							"returns": {
								"type": "Promise<TransactionRequest>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L366"
				},
				{
					"kind": "function",
					"name": "send",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Send the transaction without waiting for it to be mined."
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ContractTransaction>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L434"
				},
				{
					"kind": "function",
					"name": "sendGasless",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Execute the transaction with gasless"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ContractTransaction>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L506"
				},
				{
					"kind": "function",
					"name": "setAccessList",
					"signatures": [
						{
							"parameters": [
								{
									"name": "accessList",
									"type": "(undefined) | (AccessListish)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L148"
				},
				{
					"kind": "function",
					"name": "setArgs",
					"signatures": [
						{
							"parameters": [
								{
									"name": "args",
									"type": "any[]"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L94"
				},
				{
					"kind": "function",
					"name": "setCcipReadEnabled",
					"signatures": [
						{
							"parameters": [
								{
									"name": "ccipReadEnabled",
									"type": "(undefined) | (boolean)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L158"
				},
				{
					"kind": "function",
					"name": "setCustomData",
					"signatures": [
						{
							"parameters": [
								{
									"name": "customData",
									"type": "(undefined) | (Record<string, any>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L153"
				},
				{
					"kind": "function",
					"name": "setGasLimit",
					"signatures": [
						{
							"parameters": [
								{
									"name": "gasLimit",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L114"
				},
				{
					"kind": "function",
					"name": "setGasLimitMultiple",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Set a multiple to multiply the gas limit by"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "factor",
									"type": "number"
								}
							],
							"returns": {
								"type": "void"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "js",
											"meta": null,
											"value": "// Set the gas limit multiple to 1.2 (increase by 20%)\ntx.setGasLimitMultiple(1.2)"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L176"
				},
				{
					"kind": "function",
					"name": "setGasPrice",
					"signatures": [
						{
							"parameters": [
								{
									"name": "gasPrice",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L119"
				},
				{
					"kind": "function",
					"name": "setGaslessOptions",
					"signatures": [
						{
							"parameters": [
								{
									"name": "options",
									"type": "(undefined) | ({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })"
								}
							],
							"returns": {
								"type": "Transaction<TResult>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L338"
				},
				{
					"kind": "function",
					"name": "setMaxFeePerGas",
					"signatures": [
						{
							"parameters": [
								{
									"name": "maxFeePerGas",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L129"
				},
				{
					"kind": "function",
					"name": "setMaxPriorityFeePerGas",
					"signatures": [
						{
							"parameters": [
								{
									"name": "maxPriorityFeePerGas",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L136"
				},
				{
					"kind": "function",
					"name": "setNonce",
					"signatures": [
						{
							"parameters": [
								{
									"name": "nonce",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L124"
				},
				{
					"kind": "function",
					"name": "setOverrides",
					"signatures": [
						{
							"parameters": [
								{
									"name": "overrides",
									"type": "CallOverrides"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L99"
				},
				{
					"kind": "function",
					"name": "setParse",
					"signatures": [
						{
							"parameters": [
								{
									"name": "parse",
									"type": "ParseTransactionReceipt<TResult>"
								}
							],
							"returns": {
								"type": "Transaction<TResult>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L345"
				},
				{
					"kind": "function",
					"name": "setType",
					"signatures": [
						{
							"parameters": [
								{
									"name": "type",
									"type": "(undefined) | (number)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L143"
				},
				{
					"kind": "function",
					"name": "setValue",
					"signatures": [
						{
							"parameters": [
								{
									"name": "value",
									"type": "(undefined) | (BigNumberish) | (Promise<BigNumberish>)"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L109"
				},
				{
					"kind": "function",
					"name": "sign",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the signed transaction"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L360"
				},
				{
					"kind": "function",
					"name": "simulate",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Simulate the transaction on-chain without executing"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<any>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L386"
				},
				{
					"kind": "function",
					"name": "transactionError",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Create a nicely formatted error message with tx metadata and solidity stack trace"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "error",
									"type": "any"
								}
							],
							"returns": {
								"type": "Promise<TransactionError>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L634"
				},
				{
					"kind": "function",
					"name": "updateOverrides",
					"signatures": [
						{
							"parameters": [
								{
									"name": "overrides",
									"type": "CallOverrides"
								}
							],
							"returns": {
								"type": "TransactionContext"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L104"
				},
				{
					"kind": "function",
					"name": "fromContractInfo",
					"signatures": [
						{
							"parameters": [
								{
									"name": "options",
									"type": "TransactionOptionsWithContractInfo<TResult>"
								}
							],
							"returns": {
								"type": "Promise<Transaction<TResult>>"
							},
							"typeParameters": [
								{
									"name": "TResult"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L270"
				},
				{
					"kind": "function",
					"name": "fromContractWrapper",
					"signatures": [
						{
							"parameters": [
								{
									"name": "options",
									"type": "TransactionOptionsWithContractWrapper<TContract, TResult>"
								}
							],
							"returns": {
								"type": "Transaction<TResult>"
							},
							"typeParameters": [
								{
									"name": "TContract",
									"extendsType": "BaseContract"
								},
								{
									"name": "TResult"
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L245"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "args",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L51",
					"type": "any[]",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "contract",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L241",
					"type": "Contract",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "gasMultiple",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L56",
					"type": "number",
					"flags": {
						"isProtected": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "gaslessOptions",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L242",
					"type": "({ experimentalChainlessSupport: boolean; openzeppelin: { relayerUrl: string; useEOAForwarder: boolean; domainName: string; domainVersion: string; relayerForwarderAddress?: string | undefined; } }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds: number; } }) | ({ engine: { relayerUrl: string; } })",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "method",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L240",
					"type": "string",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "overrides",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L52",
					"type": "CallOverrides",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "parse",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L243",
					"type": "ParseTransactionReceipt<TResult>",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "provider",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L53",
					"type": "Provider",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "signer",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L54",
					"type": "Signer",
					"flags": {
						"isProtected": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L55",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isProtected": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "getProvider",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L74",
					"returns": {
						"type": "Provider"
					},
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "accessor",
					"name": "getSigner",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L70",
					"returns": {
						"type": "Signer"
					},
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "accessor",
					"name": "getStorage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/classes/transactions.ts#L78",
					"returns": {
						"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
					},
					"flags": {
						"isPublic": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "TResult"
				}
			]
		},
		{
			"kind": "class",
			"name": "TransactionError",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L286",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "info",
								"type": "TransactionErrorInfo"
							},
							{
								"name": "raw",
								"type": "any"
							}
						],
						"returns": {
							"type": "TransactionError"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L291"
			},
			"methods": [
				{
					"kind": "function",
					"name": "captureStackTrace",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Create .stack property on a target object"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "targetObject",
									"type": "object",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "constructorOpt",
									"type": "Function",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "#info",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L288",
					"type": "TransactionErrorInfo",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "#raw",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L289",
					"type": "any",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "#reason",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L287",
					"type": "string",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "message",
					"type": "string",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "name",
					"type": "string",
					"flags": {
						"isExternal": true
					}
				},
				{
					"kind": "variable",
					"name": "stack",
					"type": "string",
					"flags": {
						"isExternal": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "prepareStackTrace",
					"type": "(err: Error, stackTraces: CallSite[]) => any",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "prepareStackTrace",
							"signatures": [
								{
									"flags": {
										"isExternal": true
									},
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional override for formatting stack traces"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "err",
											"type": "Error",
											"flags": {
												"isExternal": true
											}
										},
										{
											"name": "stackTraces",
											"type": "CallSite[]",
											"flags": {
												"isExternal": true
											}
										}
									],
									"returns": {
										"type": "any"
									},
									"blockTags": [
										{
											"tag": "@see",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					],
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "stackTraceLimit",
					"type": "number",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "info",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L380",
					"returns": {
						"type": "TransactionErrorInfo"
					}
				},
				{
					"kind": "accessor",
					"name": "raw",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L376",
					"returns": {
						"type": "any"
					}
				},
				{
					"kind": "accessor",
					"name": "reason",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/error.ts#L372",
					"returns": {
						"type": "string"
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "UserWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L54",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Connect and Interact with a user wallet"
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const balance = await sdk.wallet.balance();"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							}
						],
						"returns": {
							"type": "UserWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L60"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Fetch the native or ERC20 token balance of this wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "currencyAddress",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// native currency balance\nconst balance = await sdk.wallet.balance();\n// ERC20 token balance\nconst erc20balance = await sdk.wallet.balance(tokenContractAddress);\n"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L148"
				},
				{
					"kind": "function",
					"name": "connect",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L78"
				},
				{
					"kind": "function",
					"name": "createErc20",
					"signatures": [
						{
							"parameters": [
								{
									"name": "currencyAddress",
									"type": "string"
								},
								{
									"name": "ERC20Abi",
									"type": "ContractInterface"
								}
							],
							"returns": {
								"type": "ContractWrapper<IERC20>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L360"
				},
				{
					"kind": "function",
					"name": "executeRawTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Execute a raw transaction to the blockchain from the connected wallet and wait for it to be mined"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "transactionRequest",
									"type": "TransactionRequest",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "raw transaction data to send to the blockchain"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Omit<TransactionResultWithMetadata<unknown>, \"data\">>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L318"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the currently connected address"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const address = await sdk.wallet.getAddress();"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L177"
				},
				{
					"kind": "function",
					"name": "getNonce",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the number of transactions sent from this address."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "blockTag",
									"type": "BlockTag",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional - the block tag to read the nonce from"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<BigNumberish>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L193"
				},
				{
					"kind": "function",
					"name": "recoverAddress",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Recover the signing address from a signed message"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "message",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the original message that was signed"
												}
											]
										}
									]
								},
								{
									"name": "signature",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the signature to recover the address from"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "string",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the address that signed the message"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const message = \"Sign this message...\";\nconst signature = await sdk.wallet.sign(message);\n\n// Now we can recover the signing address\nconst address = sdk.wallet.recoverAddress(message, signature);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L283"
				},
				{
					"kind": "function",
					"name": "requestFunds",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Request funds from a running local node to the currently connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "amount",
									"type": "(string) | (number)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the amount in native currency (in ETH) to request"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Omit<TransactionResultWithMetadata<unknown>, \"data\">>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L331"
				},
				{
					"kind": "function",
					"name": "requireWallet",
					"signatures": [
						{
							"summary": [
								{
									"type": "thematicBreak"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PRIVATE FUNCTIONS"
										}
									]
								},
								{
									"type": "thematicBreak"
								}
							],
							"returns": {
								"type": "Signer"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L351"
				},
				{
					"kind": "function",
					"name": "sendRawTransaction",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Send a raw transaction to the blockchain from the connected wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "transactionRequest",
									"type": "TransactionRequest",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "raw transaction data to send to the blockchain"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<TransactionResponse>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L293"
				},
				{
					"kind": "function",
					"name": "sign",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Sign any message with the connected wallet private key"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "message",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the message to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the signed message"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// This is the message to be signed\nconst message = \"Sign this message...\";\n\n// Now we can sign the message with the connected wallet\nconst signature = await sdk.wallet.sign(message);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L227"
				},
				{
					"kind": "function",
					"name": "signTypedData",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Sign a typed data structure (EIP712) with the connected wallet private key"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "domain",
									"type": "EIP712Domain",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the domain as EIP712 standard"
												}
											]
										}
									]
								},
								{
									"name": "types",
									"type": "Record<string, TypedDataField[]>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the structure and data types as defined by the EIP712 standard"
												}
											]
										}
									]
								},
								{
									"name": "message",
									"type": "Record<string, any>",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the data to sign"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ payload: any; signature: string }>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "the payload and its associated signature"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// This is the message to be signed\n// Now we can sign the message with the connected wallet\nconst { payload, signature } = await sdk.wallet.signTypedData(\n  {\n       name: \"MyEIP721Domain\",\n       version: \"1\",\n       chainId: 1,\n       verifyingContract: \"0x...\",\n     },\n     { MyStruct: [ { name: \"to\", type: \"address\" }, { name: \"quantity\", type: \"uint256\" } ] },\n     { to: \"0x...\", quantity: 1 },\n);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L255"
				},
				{
					"kind": "function",
					"name": "transfer",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Transfer native or ERC20 tokens from this wallet to another wallet"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "to",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the account to send funds to"
												}
											]
										}
									]
								},
								{
									"name": "amount",
									"type": "(string) | (number)",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the amount in tokens"
												}
											]
										}
									]
								},
								{
									"name": "currencyAddress",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Optional - ERC20 contract address of the token to transfer"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Omit<TransactionResultWithMetadata<unknown>, \"data\">>"
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": " // transfer 0.8 ETH\nawait sdk.wallet.transfer(\"0x...\", 0.8);\n // transfer 0.8 tokens of `tokenContractAddress`\nawait sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L96"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "connection",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L55",
					"type": "RPCConnectionHandler",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L57",
					"type": "EventEmitter<UserWalletEvents, any>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L56",
					"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/core/wallet/user-wallet.ts#L58",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
				}
			]
		},
		{
			"kind": "class",
			"name": "Vote",
			"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L53",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Create a decentralized organization for token holders to vote on proposals."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");"
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "address",
								"type": "string"
							},
							{
								"name": "storage",
								"type": "ThirdwebStorage<IpfsUploadBatchOptions>"
							},
							{
								"name": "options",
								"type": "(undefined) | ({ clientId: string; gasSettings: { maxPriceInGwei?: number | undefined; speed?: \"standard\" | \"fast\" | \"fastest\" | undefined; }; gasless: ({ openzeppelin: { relayerUrl: string; relayerForwarderAddress?: string | undefined; useEOAForwarder?: boolean | undefined; domainName?: string | undefined; domainVersion?: string | undefined; }; experimentalChainlessSupport?: boolean | undefined; }) | ({ biconomy: { apiId: string; apiKey: string; deadlineSeconds?: number | undefined; }; }) | ({ engine: { relayerUrl: string; }; }); gatewayUrls: string[]; readonlySettings: { rpcUrl: string; chainId?: number | undefined; }; secretKey: string; supportedChains: Array<{ rpc: string[]; chainId: number; nativeCurrency: { symbol: string; name: string; decimals: number; }; slug: string; }> })"
							},
							{
								"name": "abi",
								"type": "Array<objectInputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>"
							},
							{
								"name": "chainId",
								"type": "number"
							},
							{
								"name": "contractWrapper",
								"type": "ContractWrapper<VoteERC20>"
							}
						],
						"returns": {
							"type": "Vote"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L73"
			},
			"methods": [
				{
					"kind": "function",
					"name": "balance",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check the balance of the project wallet in the native token of the chain"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The balance of the project in the native token of the chain"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L281"
				},
				{
					"kind": "function",
					"name": "balanceOfToken",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check the balance of the project wallet in a particular\nERC20 token contract"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "tokenAddress",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<{ decimals: number; displayValue: string; name: string; symbol: string; value: BigNumber }>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The balance of the project in the native token of the chain"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L300"
				},
				{
					"kind": "function",
					"name": "canExecute",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Can Execute"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "proposalId",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The proposal ID to check."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "True if the proposal can be executed, false otherwise."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Check if a proposal can be executed (if the proposal has succeeded)."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L258"
				},
				{
					"kind": "function",
					"name": "get",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get a proposal by id."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "proposalId",
									"type": "BigNumberish",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The proposal id to get."
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Proposal>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The proposal."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": []
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L127"
				},
				{
					"kind": "function",
					"name": "getAddress",
					"signatures": [
						{
							"returns": {
								"type": "string"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L113"
				},
				{
					"kind": "function",
					"name": "getAll",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get All Proposals"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<Proposal[]>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "All the proposals in the contract."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Get all the proposals in this contract."
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "const proposals = await contract.getAll();\nconsole.log(proposals);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L151"
				},
				{
					"kind": "function",
					"name": "getProposalVotes",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the votes for a specific proposal"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "proposalId",
									"type": "BigNumber",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "the proposalId"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "Promise<ProposalVote[]>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L185"
				},
				{
					"kind": "function",
					"name": "hasVoted",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Check If Wallet Voted"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "proposalId",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The unique identifier of a proposal ."
												}
											]
										}
									]
								},
								{
									"name": "account",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "(optional) wallet account address. Defaults to connected signer."
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<boolean>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "True if the account has already voted on the proposal."
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@remarks",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Check if a specified wallet has voted a specific proposal"
												}
											]
										}
									]
								},
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "javascript",
											"meta": null,
											"value": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L229"
				},
				{
					"kind": "function",
					"name": "onNetworkUpdated",
					"signatures": [
						{
							"parameters": [
								{
									"name": "network",
									"type": "NetworkInput"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L109"
				},
				{
					"kind": "function",
					"name": "settings",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Get the Vote contract configuration"
										}
									]
								}
							],
							"returns": {
								"type": "Promise<VoteSettings>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L335"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "_chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L68",
					"type": "number",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "abi",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L57",
					"type": "Array<objectOutputType<{ inputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; outputs: ZodDefault<ZodArray<ZodObject<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ components: ZodOptional<ZodArray<ZodObject<{ name: ZodDefault<ZodString>; type: ZodString }, \"strip\", ZodAny, objectOutputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">, objectInputType<{ name: ZodDefault<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; name: ZodDefault<ZodString>; stateMutability: ZodOptional<ZodString>; type: ZodString }, ZodAny, \"strip\">>, \"many\">>; type: ZodString }, ZodAny, \"strip\">>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "app",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L59",
					"type": "ContractAppURI<VoteERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "contractWrapper",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L54",
					"type": "ContractWrapper<VoteERC20>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "encoder",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L60",
					"type": "ContractEncoder<VoteERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "estimator",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L61",
					"type": "GasCostEstimator<VoteERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "events",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L62",
					"type": "ContractEvents<VoteERC20>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "execute",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L482",
					"type": "{ (...args: [proposalId: string]) : Promise<TResult> ; prepare: (...args: [proposalId: string]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "execute",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Execute Proposal"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[proposalId: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Execute the related transactions for a proposal if the proposal succeeded."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The proposal ID of the proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[proposalId: string]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "metadata",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L58",
					"type": "ContractMetadata<VoteERC20, { deploy: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; trusted_forwarders: ZodDefault<ZodArray<ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]>, \"many\">>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; trusted_forwarders: string[]; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; input: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodUnion<[ZodUnion<[ZodTypeAny, ZodObject<{ data: ZodUnion<[ZodTypeAny, ZodString]>; name: ZodString }, \"strip\", ZodTypeAny, { data: any; name: string }, { data: any; name: string }>]>, ZodString]>>; name: ZodString; proposal_token_threshold: ZodDefault<ZodEffects<ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>, string, (string) | (number) | (bigint) | (BigNumber)>>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: string; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: any; name: string; proposal_token_threshold: (string) | (number) | (bigint) | (BigNumber); social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }>; output: ZodObject<{ app_uri: ZodOptional<ZodString>; description: ZodOptional<ZodString>; external_link: ZodOptional<ZodString>; image: ZodOptional<ZodString>; name: ZodString; proposal_token_threshold: ZodEffects<ZodUnion<[ZodString, ZodNumber, ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>]>, BigNumber, (string) | (number) | (bigint) | (BigNumber)>; social_urls: ZodOptional<ZodRecord<ZodString, ZodString>>; voting_delay_in_blocks: ZodDefault<ZodNumber>; voting_period_in_blocks: ZodDefault<ZodNumber>; voting_quorum_fraction: ZodDefault<ZodNumber>; voting_token_address: ZodUnion<[ZodType<string, ZodTypeDef, string>, ZodType<`0x${string}`, ZodTypeDef, (`${string}.eth`) | (`${string}.cb.id`)>]> }, \"strip\", ZodTypeAny, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: BigNumber; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }, { app_uri: string; description: string; external_link: string; image: string; name: string; proposal_token_threshold: Object; social_urls: Record<string, string>; voting_delay_in_blocks: number; voting_period_in_blocks: number; voting_quorum_fraction: number; voting_token_address: string }> }>",
					"flags": {
						"isPublic": true
					}
				},
				{
					"kind": "variable",
					"name": "propose",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L401",
					"type": "{ (...args: [description: string, executions: ProposalExecutable[]]) : Promise<TResult> ; prepare: (...args: [description: string, executions: ProposalExecutable[]]) => Promise<Transaction<TransactionResultWithId>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "propose",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Create Proposal"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[description: string, executions: ProposalExecutable[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>",
										"summary": [
											{
												"type": "list",
												"ordered": false,
												"start": null,
												"spread": false,
												"children": [
													{
														"type": "listItem",
														"spread": false,
														"checked": null,
														"children": [
															{
																"type": "paragraph",
																"children": [
																	{
																		"type": "text",
																		"value": "The id of the created proposal and the transaction receipt."
																	}
																]
															}
														]
													}
												]
											}
										]
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Create a new proposal for token holders to vote on."
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to set up in code)\n    transactionData: tokenContract.encoder.encode(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[description: string, executions: ProposalExecutable[]]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<TransactionResultWithId>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L55",
					"type": "ThirdwebStorage<IpfsUploadBatchOptions>",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "vote",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L457",
					"type": "{ (...args: [proposalId: string, voteType: VoteType, reason: any]) : Promise<TResult> ; prepare: (...args: [proposalId: string, voteType: VoteType, reason: any]) => Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>> }",
					"typeDeclaration": [
						{
							"kind": "function",
							"name": "vote",
							"signatures": [
								{
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Vote"
												}
											]
										}
									],
									"parameters": [
										{
											"name": "args",
											"type": "[proposalId: string, voteType: VoteType, reason: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<TResult>"
									},
									"blockTags": [
										{
											"tag": "@remarks",
											"summary": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "Vote on an active proposal"
														}
													]
												}
											]
										},
										{
											"tag": "@example",
											"summary": [
												{
													"type": "code",
													"lang": "javascript",
													"meta": null,
													"value": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);"
												}
											]
										}
									]
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L23"
						},
						{
							"kind": "function",
							"name": "prepare",
							"signatures": [
								{
									"parameters": [
										{
											"name": "args",
											"type": "[proposalId: string, voteType: VoteType, reason: any]",
											"flags": {
												"isRest": true
											}
										}
									],
									"returns": {
										"type": "Promise<Transaction<Omit<TransactionResultWithMetadata<unknown>, \"data\">>>"
									}
								}
							],
							"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/common/transactions.ts#L22"
						}
					]
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "chainId",
					"source": "https://github.com/thirdweb-dev/js/blob/7b6d24b47/packages/sdk/src/evm/contracts/prebuilt-implementations/vote.ts#L69",
					"returns": {
						"type": "number"
					}
				}
			],
			"implements": ["UpdateableNetwork"]
		}
	]
}
