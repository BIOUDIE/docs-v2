{
	"meta": {
		"typedocBetterJsonVersion": "0.5.2"
	},
	"functions": [
		{
			"kind": "function",
			"name": "bloctoWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "BloctoAdditionalOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<BloctoWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/blocto/bloctoWallet.tsx#L19"
		},
		{
			"kind": "function",
			"name": "coin98Wallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "Coin98WalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<Coin98Wallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/coin98/coin98Wallet.tsx#L20"
		},
		{
			"kind": "function",
			"name": "coinbaseWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "CoinbaseWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<CoinbaseWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/coinbase/coinbaseWallet.tsx#L28"
		},
		{
			"kind": "function",
			"name": "coreWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "CoreWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<CoreWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/coreWallet/coreWallet.tsx#L23"
		},
		{
			"kind": "function",
			"name": "cryptoDefiWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "CryptoDefiWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<CryptoDefiWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/defiWallet/cryptoDefiWallet.tsx#L23"
		},
		{
			"kind": "function",
			"name": "darkTheme",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create a custom dark theme object by using the default dark theme as a base and applying overrides."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "overrides",
							"type": "ThemeOverrides",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Theme"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "const customTheme = darkTheme({\n colors: {\n  modalBg: \"red\",\n }\n})"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/design-system/index.ts#L176"
		},
		{
			"kind": "function",
			"name": "embeddedWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "_config",
							"type": "EmbeddedWalletConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<EmbeddedWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/embeddedWallet/embeddedWallet.tsx#L32"
		},
		{
			"kind": "function",
			"name": "en",
			"signatures": [
				{
					"parameters": [
						{
							"name": "overrides",
							"type": "DeepPartial<{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }>",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/locales/en.ts#L322"
		},
		{
			"kind": "function",
			"name": "es",
			"signatures": [
				{
					"parameters": [
						{
							"name": "overrides",
							"type": "DeepPartial<{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }>",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/locales/es.ts#L329"
		},
		{
			"kind": "function",
			"name": "frameWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "FrameConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<FrameWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/frame/frameWallet.tsx#L12"
		},
		{
			"kind": "function",
			"name": "ja",
			"signatures": [
				{
					"parameters": [
						{
							"name": "overrides",
							"type": "DeepPartial<{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }>",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/locales/ja.ts#L323"
		},
		{
			"kind": "function",
			"name": "lightTheme",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create a custom light theme object by using the default dark theme as a base and applying overrides."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "overrides",
							"type": "ThemeOverrides",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Theme"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "const customTheme = lightTheme({\n colors: {\n  modalBg: \"red\",\n }\n})"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/design-system/index.ts#L157"
		},
		{
			"kind": "function",
			"name": "localWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "LocalWalletConfigOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "LocalWalletConfig"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/localWallet/localWallet.tsx#L11"
		},
		{
			"kind": "function",
			"name": "magicLink",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "MagicAuthOptions & { recommended: boolean }"
						}
					],
					"returns": {
						"type": "ConfiguredMagicLinkWallet"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/magic/magicLink.tsx#L46"
		},
		{
			"kind": "function",
			"name": "metamaskWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "MetamaskWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<MetaMaskWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/metamask/metamaskWallet.tsx#L23"
		},
		{
			"kind": "function",
			"name": "okxWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "OKXWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<OKXWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/okx/okxWallet.tsx#L20"
		},
		{
			"kind": "function",
			"name": "paperWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Paper Wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "_config",
							"type": "PaperConfig",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Options available to create a paper wallet"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<PaperWallet>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The WalletConfig"
									},
									{
										"type": "html",
										"value": "<PaperWallet>"
									},
									{
										"type": "text",
										"value": " object"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "We have deprecated PaperWallet in favor of our "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "EmbeddedWallet"
												}
											]
										},
										{
											"type": "text",
											"value": " which adds support for more sign in methods.\nLearn more here: https://portal.thirdweb.com/embedded-wallet"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/paper/paperWallet.tsx#L32"
		},
		{
			"kind": "function",
			"name": "phantomWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "PhantomWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<PhantomWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/phantom/phantomWallet.tsx#L15"
		},
		{
			"kind": "function",
			"name": "rabbyWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "RabbyWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<RabbyWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/rabby/rabbyWallet.tsx#L20"
		},
		{
			"kind": "function",
			"name": "rainbowWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "RainbowWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<RainbowWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/rainbow/RainbowWallet.tsx#L25"
		},
		{
			"kind": "function",
			"name": "safeWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "SafeWalletConfigOptions & { recommended: boolean }",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "SafeWalletConfig"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/safe/safeWallet.tsx#L16"
		},
		{
			"kind": "function",
			"name": "smartWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "wallet",
							"type": "WalletConfig<any>"
						},
						{
							"name": "config",
							"type": "SmartWalletConfigOptions"
						}
					],
					"returns": {
						"type": "SmartWalletConfig"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/smartWallet/smartWallet.tsx#L12"
		},
		{
			"kind": "function",
			"name": "trustWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "TrustWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<TrustWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/trustWallet/TrustWallet.tsx#L22"
		},
		{
			"kind": "function",
			"name": "walletConnect",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "walletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<WalletConnect>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/walletConnect/walletConnect.tsx#L32"
		},
		{
			"kind": "function",
			"name": "walletConnectV1",
			"signatures": [
				{
					"summary": [],
					"parameters": [
						{
							"name": "config",
							"type": "walletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<WalletConnect>"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Use "
										},
										{
											"type": "inlineCode",
											"value": "walletConnect"
										},
										{
											"type": "text",
											"value": " instead"
										}
									]
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The WalletConnect v1.0 protocol has been shut down and no longer works.\nTo avoid breaking change, "
										},
										{
											"type": "inlineCode",
											"value": "walletConnectV1"
										},
										{
											"type": "text",
											"value": " is still available but is an alias of "
										},
										{
											"type": "inlineCode",
											"value": "walletConnect"
										},
										{
											"type": "text",
											"value": "."
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/walletConnectV1.tsx#L9"
		},
		{
			"kind": "function",
			"name": "zerionWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "options",
							"type": "ZerionkWalletOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<ZerionWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/zerion/zerionWallet.tsx#L22"
		}
	],
	"hooks": [
		{
			"kind": "function",
			"name": "useBloctoWallet",
			"signatures": [
				{
					"returns": {
						"type": "(options?: { chainId: number } & BloctoAdditionalOptions) => Promise<BloctoWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useBloctoWallet.ts#L5"
		},
		{
			"kind": "function",
			"name": "useCoinbaseWallet",
			"signatures": [
				{
					"returns": {
						"type": "(connectOptions?: { chainId: number }) => Promise<CoinbaseWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useCoinbaseWallet.ts#L4"
		},
		{
			"kind": "function",
			"name": "useEmbeddedWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to authenticate and connect to an embedded wallet"
								}
							]
						}
					],
					"returns": {
						"type": "{ connect: (authParams: AuthParams) => Promise<EmbeddedWallet>; sendVerificationEmail: (__namedParameters: { email: string }) => Promise<SendEmailOtpReturnType> }",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a function to connect to an embedded wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useEmbeddedWallet.ts#L26"
		},
		{
			"kind": "function",
			"name": "useEmbeddedWalletSendVerificationEmail",
			"signatures": [
				{
					"returns": {
						"type": "(email: string) => Promise<SendEmailOtpReturnType>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/useEmbeddedWalletSendVerificationEmail.ts#L5"
		},
		{
			"kind": "function",
			"name": "useEmbeddedWalletUserEmail",
			"signatures": [
				{
					"returns": {
						"type": "UseQueryResult<(string) | (undefined)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useEmbeddedWallet.ts#L83"
		},
		{
			"kind": "function",
			"name": "useFrameWallet",
			"signatures": [
				{
					"returns": {
						"type": "(connectOptions?: { chainId: number }) => Promise<FrameWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useFrame.ts#L4"
		},
		{
			"kind": "function",
			"name": "useIsWalletModalOpen",
			"signatures": [
				{
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/providers/wallet-ui-states-provider.tsx#L80"
		},
		{
			"kind": "function",
			"name": "useMagic",
			"signatures": [
				{
					"returns": {
						"type": "(options: Object) => Promise<MagicLink>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/connectors/magic/useMagic.ts#L6"
		},
		{
			"kind": "function",
			"name": "useMetamask",
			"signatures": [
				{
					"returns": {
						"type": "(connectOptions?: { chainId: number }) => Promise<MetaMaskWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useMetamask.ts#L4"
		},
		{
			"kind": "function",
			"name": "usePaperWallet",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(options: { chainId: number; email: string } & PaperConfig) => Promise<PaperWallet>"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "We have deprecated "
										},
										{
											"type": "inlineCode",
											"value": "PaperWallet"
										},
										{
											"type": "text",
											"value": " in favor of our "
										},
										{
											"type": "inlineCode",
											"value": "EmbeddedWallet"
										},
										{
											"type": "text",
											"value": " which adds support for more sign in methods. use the "
										},
										{
											"type": "inlineCode",
											"value": "useEmbeddedWallet"
										},
										{
											"type": "text",
											"value": " hook instead"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/usePaper.ts#L19"
		},
		{
			"kind": "function",
			"name": "usePaperWalletUserEmail",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "UseQueryResult<(string) | (undefined), string>"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "We have deprecated "
										},
										{
											"type": "inlineCode",
											"value": "PaperWallet"
										},
										{
											"type": "text",
											"value": " in favor of our "
										},
										{
											"type": "inlineCode",
											"value": "EmbeddedWallet"
										},
										{
											"type": "text",
											"value": " which adds support for more sign in methods. use the "
										},
										{
											"type": "inlineCode",
											"value": "useEmbeddedWallet"
										},
										{
											"type": "text",
											"value": " hook instead"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/usePaper.ts#L38"
		},
		{
			"kind": "function",
			"name": "useRainbowWallet",
			"signatures": [
				{
					"returns": {
						"type": "(connectOptions?: { chainId: number }) => Promise<RainbowWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useRainbowWallet.ts#L4"
		},
		{
			"kind": "function",
			"name": "useResolvedMediaType",
			"signatures": [
				{
					"summary": [],
					"parameters": [
						{
							"name": "uri",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the uri to resolve (can be a url or a ipfs://<cid>)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "mimeType",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "gatewayUrl",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ mimeType: (undefined) | (string); url: string }",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the fully resolved url + mime type of the media"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Usage with fully formed url:"
										}
									]
								},
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const resolved = useResolvedMediaType(\"https://example.com/video.mp4\");\n  console.log(\"mime type\", resolved.data.mimeType);\n  console.log(\"url\", resolved.data.url);\n  return null;\n}"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Usage with ipfs cid:"
										}
									]
								},
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const resolved = useResolvedMediaType(\"ipfs://QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvsd\");\n  console.log(\"mime type\", resolved.data.mimeType);\n  console.log(\"url\", resolved.data.url);\n  return null;\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/MediaRenderer.tsx#L529"
		},
		{
			"kind": "function",
			"name": "useSafe",
			"signatures": [
				{
					"returns": {
						"type": "(connectProps: SafeConnectionArgs) => Promise<SafeWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/connectors/gnosis/useSafe.ts#L5"
		},
		{
			"kind": "function",
			"name": "useSetIsWalletModalOpen",
			"signatures": [
				{
					"returns": {
						"type": "BoolSetter"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/providers/wallet-ui-states-provider.tsx#L84"
		},
		{
			"kind": "function",
			"name": "useSmartWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "personalWallet",
							"type": "WalletConfig<W>"
						},
						{
							"name": "options",
							"type": "SmartWalletConfigOptions"
						}
					],
					"returns": {
						"type": "{ connect: (args?: { connectPersonalWallet: (wallet: W) => Promise<void>; connectionArgs: Omit<SmartWalletConnectionArgs, \"personalWallet\"> }) => Promise<SmartWallet>; predictAddress: (args: { data: BytesLike; personalWalletAddress: string }) => Promise<string> }"
					},
					"typeParameters": [
						{
							"name": "W",
							"extendsType": "WalletInstance"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useSmartWallet.ts#L18"
		},
		{
			"kind": "function",
			"name": "useTrustWallet",
			"signatures": [
				{
					"returns": {
						"type": "(connectOptions?: { chainId: number }) => Promise<TrustWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useTrustWallet.ts#L4"
		},
		{
			"kind": "function",
			"name": "useWalletConnect",
			"signatures": [
				{
					"returns": {
						"type": "(options?: { chainId: number; projectId: string; qrModalOptions: QRModalOptions }) => Promise<WalletConnect>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useWalletConnect.ts#L21"
		},
		{
			"kind": "function",
			"name": "useWalletConnectV1",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(options?: { chainId: number }) => Promise<WalletConnect>"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "use the "
										},
										{
											"type": "inlineCode",
											"value": "useWalletConnect"
										},
										{
											"type": "text",
											"value": " hook instead"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/hooks/wallets/useWalletConnect.ts#L8"
		}
	],
	"variables": [
		{
			"kind": "variable",
			"name": "defaultTokens",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/defaultTokens.ts#L34",
			"type": "SupportedTokens",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "defaultWallets",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/wallets/defaultWallets.ts#L10",
			"type": "WalletConfig<any>[]",
			"flags": {
				"isConst": true
			}
		}
	],
	"types": [
		{
			"kind": "type",
			"name": "MediaRendererProps",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The props for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "3557",
							"children": [
								{
									"type": "text",
									"value": "MediaRenderer"
								}
							]
						},
						{
							"type": "text",
							"value": " component."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/types.ts#L44",
			"type": "{alt : string,children : ReactNode,className : string,controls : boolean,gatewayUrl : string,height : string,mimeType : string,poster : (null) | (string),requireInteraction : boolean,src : (null) | (string),style : CSSProperties,width : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "alt",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The alt text for the media."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "children",
					"type": "ReactNode"
				},
				{
					"kind": "subtype",
					"name": "className",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The className to apply on the rendered element to add custom styling."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "controls",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Show the media controls (where applicable)"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "gatewayUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The IPFS gateway URL to use"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "height",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The CSS height property to apply on the rendered element."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "mimeType",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Provide the "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",
									"children": [
										{
											"type": "text",
											"value": "MIME type"
										}
									]
								},
								{
									"type": "text",
									"value": " of the media if it is known"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "poster",
					"type": "(null) | (string)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The media poster image uri. (if applicable)"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "requireInteraction",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Require user interaction to play the media."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "src",
					"type": "(null) | (string)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The media source uri."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "style",
					"type": "CSSProperties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The style to apply on the rendered element to add custom styling."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "width",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The CSS width property to apply on the rendered element."
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "MediaType",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/MediaRenderer.tsx#L499",
			"type": "{mimeType : string,url : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "mimeType",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "url",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "ThirdwebNftMediaProps",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The props for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "3574",
							"children": [
								{
									"type": "text",
									"value": "ThirdwebNftMedia"
								}
							]
						},
						{
							"type": "text",
							"value": " component."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/NftMedia.tsx#L9",
			"type": "{children : ReactNode,className : string,controls : boolean,height : string,metadata : objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BigNumber) | (BN)>, ZodUnknown]>, \"strip\">,mimeType : string,requireInteraction : boolean,style : CSSProperties,width : string}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "children",
					"type": "ReactNode"
				},
				{
					"kind": "subtype",
					"name": "className",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The className to apply on the rendered element to add custom styling."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "controls",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Show the media controls (where applicable)"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "height",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "CSS height of the media"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "objectOutputType<{  }, ZodUnion<[ZodEffects<ZodUnion<[ZodBigInt, ZodType<BigNumber, ZodTypeDef, BigNumber>, ZodType<BN, ZodTypeDef, BN>]>, string, (bigint) | (BigNumber) | (BN)>, ZodUnknown]>, \"strip\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The NFT metadata of the NFT returned by the thirdweb sdk."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "mimeType",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Provide the "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",
									"children": [
										{
											"type": "text",
											"value": "MIME type"
										}
									]
								},
								{
									"type": "text",
									"value": " of the media if it is known"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "requireInteraction",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Require user interaction to play the media."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "style",
					"type": "CSSProperties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The style to apply on the rendered element to add custom styling."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "width",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "CSS width of the media"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ThirdwebProviderProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/providers/thirdweb-provider.tsx#L19",
			"typeParameters": [
				{
					"name": "TChains",
					"extendsType": "Chain[]"
				}
			],
			"type": "{locale : { connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } },signer : Signer,supportedWallets : WalletConfig<any>[],theme : ThemeObjectOrType}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "locale",
					"type": "{ connectWallet: { agreement: { and: string; prefix: string; privacyPolicy: string; termsOfService: string }; backupWallet: string; confirmInWallet: string; connectAWallet: string; connectedToSmartWallet: string; connecting: string; continueAsGuest: string; copyAddress: string; currentNetwork: string; defaultButtonTitle: string; defaultModalTitle: string; disconnectWallet: string; download: { android: string; chrome: string; iOS: string }; getStarted: string; guest: string; guestWalletWarning: string; installed: string; networkSelector: { addCustomNetwork: string; allNetworks: string; categoryLabel: { others: string; popular: string; recentlyUsed: string }; failedToSwitch: string; inputPlaceholder: string; loading: string; mainnets: string; testnets: string; title: string }; newToWallets: string; or: string; personalWallet: string; receive: string; receiveFundsScreen: { instruction: string; title: string }; recommended: string; requestTestnetFunds: string; send: string; sendFundsScreen: { amount: string; insufficientFunds: string; invalidAddress: string; noTokensFound: string; searchToken: string; selectTokenTitle: string; sendTo: string; sending: string; submitButton: string; successMessage: string; title: string; token: string; transactionFailed: string; transactionRejected: string }; signIn: string; signatureScreen: { instructionScreen: { instruction: string; signInButton: string; title: string }; signingScreen: { approveTransactionInSafe: string; failedToSignIn: string; inProgress: string; prompt: string; promptForSafe: string; title: string; tryAgain: string } }; smartWallet: string; switchAccount: string; switchNetwork: string; switchTo: string; switchingNetwork: string; transactionHistory: string; welcomeScreen: { defaultSubtitle: string; defaultTitle: string } }; wallets: { coin98Wallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coinbaseWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; coreWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; cryptoDefiWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; embeddedWallet: { createPassword: { confirmation: string; failedToSetPassword: string; inputPlaceholder: string; instruction: string; saveInstruction: string; submitButton: string; title: string }; emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; enterPassword: { inputPlaceholder: string; instruction: string; submitButton: string; title: string; wrongPassword: string }; invalidEmail: string; signIn: string; signInWithApple: string; signInWithFacebook: string; signInWithGoogle: string; socialLoginScreen: { failed: string; instruction: string; retry: string; title: string }; submitEmail: string }; frameWallet: { connectionFailedScreen: { description: string; downloadFrame: string; supportLink: string; title: string }; connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; localWallet: { confirmPasswordLabel: string; createScreen: { connecting: string; createNewWallet: string; importWallet: string; instruction: string }; enterYourPassword: string; exportScreen: { description1: string; description2: string; download: string; title: string; walletAddress: string }; importScreen: { description1: string; description2: string; import: string; title: string; uploadJSON: string; uploadedSuccessfully: string }; passwordLabel: string; reconnectScreen: { continue: string; createNewWallet: string; savedWallet: string; title: string }; warningScreen: { backupWallet: string; title: string; warning: string } }; magicLink: { countryCodeMissing: string; emailOrPhoneRequired: string; emailPlaceholder: string; emailRequired: string; invalidEmail: string; invalidEmailOrPhone: string; invalidPhone: string; loginWith: string; loginWithEmailOrPhone: string; loginWithPhone: string; phoneRequired: string; signIn: string; submitEmail: string }; metamaskWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; okxWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; paperWallet: { emailLoginScreen: { enterCodeSendTo: string; enterRecoveryCode: string; failedToSendCode: string; invalidCode: string; invalidCodeOrRecoveryCode: string; newDeviceDetected: string; resendCode: string; sendingCode: string; title: string; verify: string }; emailPlaceholder: string; emailRequired: string; googleLoginScreen: { failed: string; instruction: string; retry: string; title: string }; invalidEmail: string; signIn: string; signInWithGoogle: string; submitEmail: string }; phantomWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rabbyWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; rainbowWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; safeWallet: { accountDetailsScreen: { connectToSafe: string; connecting: string; dashboardLink: string; failedToConnect: string; failedToSwitch: string; findSafeAddressIn: string; invalidChainConfig: string; mainnets: string; network: string; safeAddress: string; selectNetworkPlaceholder: string; switchNetwork: string; switchingNetwork: string; testnets: string; title: string }; connectWalletScreen: { learnMoreLink: string; subtitle: string; title: string } }; smartWallet: { connecting: string; failedToConnect: string; wrongNetworkScreen: { failedToSwitch: string; subtitle: string; title: string } }; trustWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } }; walletConnect: { scanInstruction: string }; zerionWallet: { connectionScreen: { failed: string; inProgress: string; instruction: string; retry: string }; getStartedLink: string; getStartedScreen: { instruction: string }; scanScreen: { instruction: string } } } }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "locale object contains text used for all thirdweb components"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "it allows you to change the language used in UI components or override the texts used in the UI"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "React SDK comes out of the box with Spanish and Japanese locale functions, but you can add support for any language you want just by passing an object with the required strings"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "heading",
									"depth": 2,
									"children": [
										{
											"type": "text",
											"value": "Using Built-in Locales"
										}
									]
								},
								{
									"type": "heading",
									"depth": 3,
									"children": [
										{
											"type": "text",
											"value": "Using the Spanish locale"
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebProvider, es } from \"@thirdweb-dev/react\";\n\nconst spanish = es();\n\n<ThirdwebProvider locale={spanish}> <App /> </ThirdwebProvider>"
								},
								{
									"type": "heading",
									"depth": 3,
									"children": [
										{
											"type": "text",
											"value": "Using the Japanese locale"
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebProvider, jp } from \"@thirdweb-dev/react\";\n\nconst japanese = jp();\n\n<ThirdwebProvider locale={japanese}> <App /> </ThirdwebProvider>"
								},
								{
									"type": "heading",
									"depth": 3,
									"children": [
										{
											"type": "text",
											"value": "Using English locale ( default )"
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebProvider, en } from \"@thirdweb-dev/react\";\n\nconst english = en();\n\n<ThirdwebProvider locale={english}> <App /> </ThirdwebProvider>"
								},
								{
									"type": "heading",
									"depth": 2,
									"children": [
										{
											"type": "text",
											"value": "Overriding the locale"
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebProvider, en } from \"@thirdweb-dev/react\";\n\n// override some texts\nconst english = en({\n  connectWallet: {\n    confirmInWallet: \"Confirm in your wallet\",\n  },\n  wallets: {\n    metamaskWallet: {\n      connectionScreen: {\n        inProgress: \"Awaiting Confirmation\",\n        instruction: \"Accept connection request in your MetaMask wallet\",\n      },\n    },\n  },\n});\n\n<ThirdwebProvider locale={english}>\n  <App />\n</ThirdwebProvider>;\n"
								},
								{
									"type": "heading",
									"depth": 3,
									"children": [
										{
											"type": "text",
											"value": "Custom locale object"
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\n<ThirdwebProvider locale={{ .... }}>\n  <App />\n</ThirdwebProvider>;"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "signer",
					"type": "Signer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use a signer instead of "
								},
								{
									"type": "inlineCode",
									"value": "supportedWallets"
								},
								{
									"type": "text",
									"value": " if you want to provide your own wallet connection logic."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "supportedWallets",
					"type": "WalletConfig<any>[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Wallets supported by the dApp"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "inlineCode",
											"value": "[ metamaskWallet(), coinbaseWallet(), walletConnect() ]"
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "import { metamaskWallet, coinbaseWallet, walletConnect } from \"@thirdweb-dev/react\";\n\n<ThirdwebProvider\n supportedWallets={[metamaskWallet(), coinbaseWallet(), walletConnect()]}\n/>"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "ThemeObjectOrType",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the theme for all thirdweb components"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "By default it is set to \"dark\"."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "theme can be set to either \"dark\" or \"light\" or a custom theme object."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can also import "
								},
								{
									"type": "inlineCode",
									"value": "lightTheme"
								},
								{
									"type": "text",
									"value": " or "
								},
								{
									"type": "inlineCode",
									"value": "darkTheme"
								},
								{
									"type": "text",
									"value": " functions from "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/react"
								},
								{
									"type": "text",
									"value": " to use the default themes as base and overrides parts of it."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "import { lightTheme } from \"@thirdweb-dev/react\";\nconst customTheme = lightTheme({\n colors: {\n   modalBg: 'red'\n }\n})"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "Web3ButtonProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/Web3Button/index.tsx#L31",
			"typeParameters": [
				{
					"name": "TActionFn",
					"extendsType": "ActionFn"
				}
			],
			"type": "{action : TActionFn,className : string,connectWallet : { auth: { loginOptional: boolean; onLogin: (token: string) => void; onLogout: () => void }; btnTitle: string; className: string; modalSize: (\"compact\") | (\"wide\"); modalTitle: string; modalTitleIconUrl: string; privacyPolicyUrl: string; style: CSSProperties; termsOfServiceUrl: string; welcomeScreen: WelcomeScreen },contractAbi : ContractInterface,contractAddress : string,isDisabled : boolean,onError : (error: Error) => void,onSubmit : () => void,onSuccess : (result: Awaited<ReturnType<TActionFn>>) => void,style : CSSProperties,theme : (\"dark\") | (\"light\") | ({ colors: { accentButtonBg: string; accentButtonText: string; accentText: string; borderColor: string; connectedButtonBg: string; connectedButtonBgHover: string; danger: string; dropdownBg: string; inputAutofillBg: string; modalBg: string; modalOverlayBg: string; primaryButtonBg: string; primaryButtonText: string; primaryText: string; scrollbarBg: string; secondaryButtonBg: string; secondaryButtonHoverBg: string; secondaryButtonText: string; secondaryIconColor: string; secondaryIconHoverBg: string; secondaryIconHoverColor: string; secondaryText: string; selectedTextBg: string; selectedTextColor: string; separatorLine: string; skeletonBg: string; success: string; tooltipBg: string; tooltipText: string; walletSelectorButtonHoverBg: string }; fontFamily: string; type: (\"dark\") | (\"light\") }),type : (\"button\") | (\"reset\") | (\"submit\")}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "action",
					"type": "TActionFn",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The logic to execute when the button is clicked."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The contract instance is available as the first argument of the function for you to interact with."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If the action you are performing is async, make sure to return a Promise from the action function so that the SDK knows when the action is complete"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<Web3Button\n contractAddress=\"0x...\"\n action={(contract) => contract.erc721.claim(1)}\n>\n Claim NFT\n</Web3Button>"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "className",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "the class to apply to the button for adding custom styles"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<Web3Button className=\"my-custom-class\" contractAddress={contractAddress} action={someAction} >\nClaim NFT\n</Web3Button>"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "connectWallet",
					"type": "{ auth: { loginOptional: boolean; onLogin: (token: string) => void; onLogout: () => void }; btnTitle: string; className: string; modalSize: (\"compact\") | (\"wide\"); modalTitle: string; modalTitleIconUrl: string; privacyPolicyUrl: string; style: CSSProperties; termsOfServiceUrl: string; welcomeScreen: WelcomeScreen }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Web3Button renders a "
								},
								{
									"type": "inlineCode",
									"value": "ConnectWallet"
								},
								{
									"type": "text",
									"value": " if no wallet is connected. You can pass props for that component by passing a "
								},
								{
									"type": "inlineCode",
									"value": "connectWallet"
								},
								{
									"type": "text",
									"value": " prop to Web3Button"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<Web3Button\n contractAddress=\"0x...\"\n action={(contract) => contract.erc721.claim(1)}\n>\n Claim NFT\n</Web3Button>"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "contractAbi",
					"type": "ContractInterface",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://docs.soliditylang.org/en/v0.8.17/abi-spec.html",
									"children": [
										{
											"type": "text",
											"value": "Application Binary Interface"
										}
									]
								},
								{
									"type": "text",
									"value": " (ABI) of the contract."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is only required if you have not imported your contract to the "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://thirdweb.com/dashboard",
									"children": [
										{
											"type": "text",
											"value": "thirdweb dashboard"
										}
									]
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "contractAddress",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "the address of the contract"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If you have not imported your contract to "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://thirdweb.com/dashboard",
									"children": [
										{
											"type": "text",
											"value": "thirdweb dashboard"
										}
									]
								},
								{
									"type": "text",
									"value": ", you must additionally specify the contractAbi prop."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "isDisabled",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether the button should be disabled or not"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The button is disabled and shows a spinner when the transaction is executing."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "onError",
					"type": "(error: Error) => void"
				},
				{
					"kind": "subtype",
					"name": "onSubmit",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "onSuccess",
					"type": "(result: Awaited<ReturnType<TActionFn>>) => void"
				},
				{
					"kind": "subtype",
					"name": "style",
					"type": "CSSProperties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The style to apply to the button element"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"dark\") | (\"light\") | ({ colors: { accentButtonBg: string; accentButtonText: string; accentText: string; borderColor: string; connectedButtonBg: string; connectedButtonBgHover: string; danger: string; dropdownBg: string; inputAutofillBg: string; modalBg: string; modalOverlayBg: string; primaryButtonBg: string; primaryButtonText: string; primaryText: string; scrollbarBg: string; secondaryButtonBg: string; secondaryButtonHoverBg: string; secondaryButtonText: string; secondaryIconColor: string; secondaryIconHoverBg: string; secondaryIconHoverColor: string; secondaryText: string; selectedTextBg: string; selectedTextColor: string; separatorLine: string; skeletonBg: string; success: string; tooltipBg: string; tooltipText: string; walletSelectorButtonHoverBg: string }; fontFamily: string; type: (\"dark\") | (\"light\") })",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The theme to use for the button and ConnectWallet component rendered by Web3Button when wallet is not connected"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "type",
					"type": "(\"button\") | (\"reset\") | (\"submit\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "button element's "
								},
								{
									"type": "inlineCode",
									"value": "type"
								},
								{
									"type": "text",
									"value": " attribute"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ConnectWalletProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/ConnectWallet.tsx#L40",
			"type": "{ auth: { loginOptional: boolean; onLogin: (token: string) => void; onLogout: () => void }; btnTitle: string; className: string; detailsBtn: () => JSX.Element; displayBalanceToken: Record<number, string>; dropdownPosition: DropDownPosition; hideSwitchToPersonalWallet: boolean; hideTestnetFaucet: boolean; modalSize: (\"compact\") | (\"wide\"); modalTitle: string; modalTitleIconUrl: string; networkSelector: Omit<NetworkSelectorProps, (\"theme\") | (\"onClose\") | (\"chains\") | (\"open\")>; privacyPolicyUrl: string; style: React.CSSProperties; supportedTokens: SupportedTokens; switchToActiveChain: boolean; termsOfServiceUrl: string; theme: (\"dark\") | (\"light\") | (Theme); welcomeScreen: WelcomeScreen }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "auth",
					"type": "{ loginOptional: boolean; onLogin: (token: string) => void; onLogout: () => void }",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Enforce that users must sign in with their wallet using "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://portal.thirdweb.com/auth",
									"children": [
										{
											"type": "text",
											"value": "auth"
										}
									]
								},
								{
									"type": "text",
									"value": " after connecting their wallet."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This requires the "
								},
								{
									"type": "inlineCode",
									"value": "authConfig"
								},
								{
									"type": "text",
									"value": " prop to be set on the "
								},
								{
									"type": "inlineCode",
									"value": "ThirdWebProvider"
								},
								{
									"type": "text",
									"value": " component."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "btnTitle",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "set custom label for the button."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "\"Connect\""
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<ConnectWallet btnTitle=\"Sign in\" />"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "className",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "CSS class to apply to the button element"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "For some CSS properties, you may need to use the !important to override the default styles"
								}
							]
						},
						{
							"type": "code",
							"lang": "tsx",
							"meta": null,
							"value": "<ConnectWallet className=\"my-custom-class\" />"
						}
					]
				},
				{
					"kind": "subtype",
					"name": "detailsBtn",
					"type": "() => JSX.Element"
				},
				{
					"kind": "subtype",
					"name": "displayBalanceToken",
					"type": "Record<number, string>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Display the balance of a token instead of the native token in ConnectWallet details button."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { Base } from \"@thirdweb-dev/chains\";\n\n<ConnectWallet balanceToken={{\n   1: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\" // show USDC balance when connected to Ethereum mainnet\n   [Base.chainId]: \"0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb\", // show Dai stablecoin token balance when connected to Base mainnet\n }}\n/>"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "dropdownPosition",
					"type": "DropDownPosition",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "When user connects the wallet using ConnectWallet Modal, a \"Details Button\" is rendered. Clicking on this button opens a dropdown which opens in a certain direction relative to the Details button."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "inlineCode",
									"value": "dropdownPosition"
								},
								{
									"type": "text",
									"value": " prop allows you to customize the direction the dropdown should open relative to the Details button."
								}
							]
						},
						{
							"type": "code",
							"lang": "tsx",
							"meta": null,
							"value": "<ConnectWallet\n dropdownPosition={{\n   side: \"bottom\", // or use:  \"top\" | \"bottom\" | \"left\" | \"right\"\n   align: \"end\", // or use:  \"start\" | \"center\" | \"end\";\n }}\n />"
						}
					]
				},
				{
					"kind": "subtype",
					"name": "hideSwitchToPersonalWallet",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hide the \"Switch to Personal wallet\" option in the wallet modal which is shown when wallet is connected to either Smart Wallet or Safe."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<ConnectWallet hideSwitchToPersonalWallet={true} />"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "hideTestnetFaucet",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hide the \"Request Testnet funds\" link in ConnectWallet dropdown which is shown when user is connected to a testnet."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<ConnectWallet hideTestnetFaucet={false} />"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "modalSize",
					"type": "(\"compact\") | (\"wide\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the size of the modal - "
								},
								{
									"type": "inlineCode",
									"value": "compact"
								},
								{
									"type": "text",
									"value": " or "
								},
								{
									"type": "inlineCode",
									"value": "wide"
								},
								{
									"type": "text",
									"value": " on desktop"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Modal size is always "
								},
								{
									"type": "inlineCode",
									"value": "compact"
								},
								{
									"type": "text",
									"value": " on mobile"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "\"wide\""
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "modalTitle",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Change the title of ConnectWallet Modal"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "\"Connect\""
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "modalTitleIconUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Replace the thirdweb icon next to modalTitle and set your own iconUrl"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set to empty string to hide the icon"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "networkSelector",
					"type": "Omit<NetworkSelectorProps, (\"theme\") | (\"onClose\") | (\"chains\") | (\"open\")>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "customize the Network selector shown"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "privacyPolicyUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If provided, Modal will show a Privacy Policy message at the bottom with below link"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<ConnectWallet privacyPolicyUrl=\"https://your-privacy-policy-url.com\" />"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "style",
					"type": "React.CSSProperties",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "CSS styles to apply to the button element"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "supportedTokens",
					"type": "SupportedTokens",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Customize the tokens shown in the \"Send Funds\" screen for various networks."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "By default, The \"Send Funds\" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "supportedTokens prop allows you to customize this list as shown below which shows  \"Dai Stablecoin\" when users wallet is connected to the \"Base\" mainnet."
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ConnectWallet } from '@thirdweb-dev/react';\nimport { Base } from '@thirdweb-dev/chains';\n\nfunction Example() {\n  return (\n\t\t<ConnectWallet\n\t\t\tsupportedTokens={{\n\t\t\t\t[Base.chainId]: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb', // token contract address\n\t\t\t\t\t\tname: 'Dai Stablecoin',\n\t\t\t\t\t\tsymbol: 'DAI',\n\t\t\t\t\t\ticon: 'https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}}\n\t\t/>\n\t);\n}"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "switchToActiveChain",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether to show \"Switch Network\" button if the wallet is connected,\nbut it is not connected to the "
								},
								{
									"type": "inlineCode",
									"value": "activeChain"
								},
								{
									"type": "text",
									"value": " provided in "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Please, note that if you support multiple networks in your app this prop should\nbe set to "
								},
								{
									"type": "inlineCode",
									"value": "false"
								},
								{
									"type": "text",
									"value": " to allow users to switch between networks."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "termsOfServiceUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If provided, Modal will show a Terms of Service message at the bottom with below link"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "<ConnectWallet termsOfServiceUrl=\"https://your-terms-of-service-url.com\" />"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"dark\") | (\"light\") | (Theme)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the theme for the button and modal."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "By default it is set to \"dark\" if "
								},
								{
									"type": "inlineCode",
									"value": "theme"
								},
								{
									"type": "text",
									"value": " is not set on "
								},
								{
									"type": "inlineCode",
									"value": "ThirdWebProvider"
								},
								{
									"type": "text",
									"value": "\nIf a "
								},
								{
									"type": "inlineCode",
									"value": "theme"
								},
								{
									"type": "text",
									"value": " is set on "
								},
								{
									"type": "inlineCode",
									"value": "ThirdWebProvider"
								},
								{
									"type": "text",
									"value": " then that theme will be used by default which can be overridden by setting "
								},
								{
									"type": "inlineCode",
									"value": "theme"
								},
								{
									"type": "text",
									"value": " prop on "
								},
								{
									"type": "inlineCode",
									"value": "ConnectWallet"
								},
								{
									"type": "text",
									"value": " component"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "theme can be set to either \"dark\" or \"light\" or a custom theme object. You can also import "
								},
								{
									"type": "inlineCode",
									"value": "lightTheme"
								},
								{
									"type": "text",
									"value": " or "
								},
								{
									"type": "inlineCode",
									"value": "darkTheme"
								},
								{
									"type": "text",
									"value": " functions from "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/react"
								},
								{
									"type": "text",
									"value": " to use the default themes as base and overrides parts of it."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "import { lightTheme } from \"@thirdweb-dev/react\";\nconst customTheme = lightTheme({\n colors: {\n   modalBg: 'red'\n }\n})"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "welcomeScreen",
					"type": "WelcomeScreen",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Customize the welcome screen. This prop is only applicable when modalSize prop is set to \"wide\". On \"wide\" Modal size, a welcome screen is shown on the right side of the modal."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This screen can be customized in two ways"
								}
							]
						},
						{
							"type": "heading",
							"depth": 3,
							"children": [
								{
									"type": "text",
									"value": "1. Customize Metadata and Image"
								}
							]
						},
						{
							"type": "code",
							"lang": "tsx",
							"meta": null,
							"value": "<ConnectWallet welcomeScreen={{\n title: \"your title\",\n subtitle: \"your subtitle\",\n img: {\n  src: \"https://your-image-url.png\",\n  width: 300,\n  height: 50,\n },\n}} />"
						},
						{
							"type": "heading",
							"depth": 3,
							"children": [
								{
									"type": "text",
									"value": "2. Render Custom Component"
								}
							]
						},
						{
							"type": "code",
							"lang": "tsx",
							"meta": null,
							"value": "<ConnectWallet\n welcomeScreen={() => {\n return <YourCustomComponent />\n}}\n/>"
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "DefaultChains",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Array of default supported chains by the thirdweb SDK"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/providers/thirdweb-provider.tsx#L146",
			"type": "typeof defaultChains"
		},
		{
			"kind": "type",
			"name": "NetworkSelectorChain",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/NetworkSelector.tsx#L37",
			"type": "React.FC<{ chain: Chain; close: () => void; switchChain: () => void; switchFailed: boolean; switching: boolean }>"
		},
		{
			"kind": "type",
			"name": "NetworkSelectorProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/NetworkSelector.tsx#L60",
			"type": "{ chains: Chain[]; onClose: () => void; onCustomClick: () => void; onSwitch: (chain: Chain) => void; open: boolean; popularChains: Chain[]; recentChains: Chain[]; renderChain: React.FC<{ chain: Chain; close: () => void; switchChain: () => void; switchFailed: boolean; switching: boolean }>; theme: (\"dark\") | (\"light\") | (Theme) }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "chains",
					"type": "Chain[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Array of chains to be displayed in the modal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "onClose",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "onCustomClick",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "onSwitch",
					"type": "(chain: Chain) => void"
				},
				{
					"kind": "subtype",
					"name": "open",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Specify whether the Modal should be open or closed"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "popularChains",
					"type": "Chain[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Array of chains to be displayed under \"Popular\" section"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "recentChains",
					"type": "Chain[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Array of chains to be displayed under \"Recent\" section"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "renderChain",
					"type": "React.FC<{ chain: Chain; close: () => void; switchChain: () => void; switchFailed: boolean; switching: boolean }>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Override how the chain button is rendered in the Modal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"dark\") | (\"light\") | (Theme)",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Theme to use in Modal"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Either specify string \"dark\" or \"light\" to use the default themes, or provide a custom theme object."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can also use "
								},
								{
									"type": "inlineCode",
									"value": "darkTheme"
								},
								{
									"type": "text",
									"value": " or "
								},
								{
									"type": "inlineCode",
									"value": "lightTheme"
								},
								{
									"type": "text",
									"value": " functions to use the default themes as base and override it."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { darkTheme } from \"@thirdweb-dev/react\";\n\n<NetworkSelector\n open={true}\n theme={darkTheme({\n   colors: {\n     modalBg: \"#000000\",\n   }\n })}\n/>"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "SupportedTokens",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/defaultTokens.ts#L32",
			"type": "Record<number, TokenInfo[]>"
		},
		{
			"kind": "type",
			"name": "Theme",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/design-system/index.ts#L88",
			"type": "typeof darkThemeObj"
		},
		{
			"kind": "type",
			"name": "ThemeOverrides",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/design-system/index.ts#L92",
			"type": "{[key in Exclude<keyof Theme, \"type\">] : Partial<Theme[key]>}"
		},
		{
			"kind": "type",
			"name": "ThirdwebLocale",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/locales/en.ts#L320",
			"type": "ReturnType<typeof enDefault>"
		},
		{
			"kind": "type",
			"name": "WelcomeScreen",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/screens/types.ts#L1",
			"type": "({ img: { height: number; src: string; width: number }; subtitle: string; title: string }) | (() => React.ReactNode)"
		}
	],
	"components": [
		{
			"kind": "function",
			"name": "ConnectWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "A component that allows the user to connect their wallet."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "it renders a button which when clicked opens a modal to allow users to connect to wallets specified in the "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								},
								{
									"type": "text",
									"value": "'s supportedWallets prop."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This component must be descendant of "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "ConnectWalletProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/ConnectWallet.tsx#L321"
		},
		{
			"kind": "function",
			"name": "MediaRenderer",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This component can be used to render any media type, including image, audio, video, and html files.\nIts convenient for rendering NFT media files, as these can be a variety of different types."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The component falls back to a external link if the media type is not supported."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The default size is 300px by 300px, but this can be changed using the "
								},
								{
									"type": "inlineCode",
									"value": "width"
								},
								{
									"type": "text",
									"value": " and "
								},
								{
									"type": "inlineCode",
									"value": "height"
								},
								{
									"type": "text",
									"value": " props."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "MediaRendererProps & RefAttributes<HTMLMediaElement>"
						}
					],
					"returns": {
						"type": "ReactNode"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "We can take a video file hosted on IPFS and render it using this component as follows"
										}
									]
								},
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  return <MediaRenderer\n    src=\"ipfs://Qmb9ZV5yznE4C4YvyJe8DVFv1LSVkebdekY6HjLVaKmHZi\"\n    alt=\"A mp4 video\"\n  />\n}"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can try switching out the "
										},
										{
											"type": "inlineCode",
											"value": "src"
										},
										{
											"type": "text",
											"value": " prop to different types of URLs and media types to explore the possibilities."
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/MediaRenderer.tsx#L379"
		},
		{
			"kind": "function",
			"name": "NetworkSelector",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Renders a Network Switcher Modal that allows users to switch their wallet to a different network."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "NetworkSelectorProps"
						}
					],
					"returns": {
						"type": "Element"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { NetworkSelector } from \"@thirdweb-dev/react\";\n\nfunction Example() {\n const [open, setOpen] = useState(false);\n return (\n   <div>\n     <button onClick={() => setOpen(true)}>Open Modal</button>\n     <NetworkSelector open={open} onClose={() => setOpen(false)} />\n   </div>\n )\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/wallet/ConnectWallet/NetworkSelector.tsx#L159"
		},
		{
			"kind": "function",
			"name": "ThirdwebNftMedia",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This component can be used to render NFTs from the thirdweb SDK.\nIt will render the animation_url if it exists, otherwise it will render the image.\nThe default size is 300px by 300px, but this can be changed using the "
								},
								{
									"type": "inlineCode",
									"value": "width"
								},
								{
									"type": "text",
									"value": " and "
								},
								{
									"type": "inlineCode",
									"value": "height"
								},
								{
									"type": "text",
									"value": " props."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Props: "
								},
								{
									"type": "link",
									"title": null,
									"url": "3563",
									"children": [
										{
											"type": "text",
											"value": "ThirdwebNftMediaProps"
										}
									]
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "ThirdwebNftMediaProps & RefAttributes<HTMLMediaElement>"
						}
					],
					"returns": {
						"type": "ReactNode"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "import { ThirdwebNftMedia, useContract, useNFT } from \"@thirdweb-dev/react\";\nexport default function NFTCollectionRender() {\n  const { contract } = useContract(<your-contract-address>);\n  const { data: nft, isLoading } = useNFT(contract, 0);\n\n  return (\n    <div>\n      {!isLoading && nft ? (\n        <ThirdwebNftMedia metadata={nft.metadata} />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/NftMedia.tsx#L50"
		},
		{
			"kind": "function",
			"name": "ThirdwebProvider",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "<ThirdwebProvider />"
								},
								{
									"type": "text",
									"value": " component lets you control what networks you want users to connect to,\nwhat types of wallets can connect to your app, and the settings for the "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://docs.thirdweb.com/typescript",
									"children": [
										{
											"type": "text",
											"value": "Thirdweb SDK"
										}
									]
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "PropsWithChildren<ThirdwebProviderProps<TChains>>"
						}
					],
					"returns": {
						"type": "Element"
					},
					"typeParameters": [
						{
							"name": "TChains",
							"extendsType": "Chain[]",
							"defaultType": "Array<({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  }) | ({  })>"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can wrap your application with the provider as follows:"
										}
									]
								},
								{
									"type": "code",
									"lang": "jsx",
									"meta": "title=\"App.jsx\"",
									"value": "import { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/providers/thirdweb-provider.tsx#L169"
		},
		{
			"kind": "function",
			"name": "Web3Button",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Button that executes a function on a smart contract from the connected wallet when clicked."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "It ensures the following criteria before attempting to call the contract function:"
								}
							]
						},
						{
							"type": "list",
							"ordered": true,
							"start": 1,
							"spread": true,
							"children": [
								{
									"type": "listItem",
									"spread": false,
									"checked": null,
									"children": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "There is a connected wallet (if there is not, it renders a "
												},
												{
													"type": "inlineCode",
													"value": "ConnectWallet"
												},
												{
													"type": "text",
													"value": " component instead."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"spread": false,
									"checked": null,
									"children": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The connected wallet is on the correct network as specified in the "
												},
												{
													"type": "inlineCode",
													"value": "ThirdwebProvider"
												},
												{
													"type": "text",
													"value": "'s "
												},
												{
													"type": "inlineCode",
													"value": "activeChain"
												},
												{
													"type": "text",
													"value": " prop. if it is not, it renders a \"switch network\" button instead."
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If the action you are performing is async, make sure to return a "
								},
								{
									"type": "inlineCode",
									"value": "Promise"
								},
								{
									"type": "text",
									"value": " from the action function so that the SDK knows when the action is complete. This can be done by either using async/await or by returning a "
								},
								{
									"type": "inlineCode",
									"value": "Promise"
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "PropsWithChildren<Web3ButtonProps<TAction>>"
						}
					],
					"returns": {
						"type": "Element"
					},
					"typeParameters": [
						{
							"name": "TAction",
							"extendsType": "ActionFn"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { Web3Button } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n return (\n  <div>\n    <Web3Button\n      contractAddress=\"0x...\"\n      action={(contract) => contract.erc721.transfer(\"0x...\", 1)}\n    >\n      Claim NFT\n    </Web3Button>\n  </div>\n )\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react/src/evm/components/Web3Button/index.tsx#L219"
		}
	]
}
