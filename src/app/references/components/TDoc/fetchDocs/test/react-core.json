{
	"meta": {
		"typedocBetterJsonVersion": "0.5.2"
	},
	"functions": [
		{
			"kind": "function",
			"name": "getErc1155",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (ValidContractInstance)>"
						}
					],
					"returns": {
						"type": "(Erc1155) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L276"
		},
		{
			"kind": "function",
			"name": "getErc20",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (ValidContractInstance)>"
						}
					],
					"returns": {
						"type": "(Erc20) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L308"
		},
		{
			"kind": "function",
			"name": "getErc721",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (ValidContractInstance)>"
						}
					],
					"returns": {
						"type": "(Erc721) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L292"
		},
		{
			"kind": "function",
			"name": "getErcs",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (ValidContractInstance)>"
						}
					],
					"returns": {
						"type": "{ erc1155: (undefined) | (Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>); erc20: (undefined) | (Erc20<(BaseERC20) | (BaseSignatureMintERC20)>); erc721: (undefined) | (Erc721<BaseERC721>) }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L268"
		},
		{
			"kind": "function",
			"name": "isEnsName",
			"signatures": [
				{
					"parameters": [
						{
							"name": "name",
							"type": "string"
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/utils/addresses.ts#L49"
		},
		{
			"kind": "function",
			"name": "isPossibleEVMAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "ignoreEns",
							"type": "boolean",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/utils/addresses.ts#L53"
		},
		{
			"kind": "function",
			"name": "resolveMimeType",
			"signatures": [
				{
					"parameters": [
						{
							"name": "url",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "Promise<(undefined) | (string)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/utils/ipfs.ts#L8"
		},
		{
			"kind": "function",
			"name": "shortenAddress",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This function shortens an address if it is a valid EVM address."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "address",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The address to shorten"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "extraShort",
							"type": "boolean",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "If true, show the first 4 and last 3 characters"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "string",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The shortened address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@remarks",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Note that this function will not check if the address is an ENS."
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calling shortenAddress with extraShort set to true"
										}
									]
								},
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "const address = shortenIfAddress(\"0x1234567890123456789012345678901234567890\", true); // result will be \"0x1234...890\""
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/utils/addresses.ts#L24"
		},
		{
			"kind": "function",
			"name": "shortenIfAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "(null) | (string) | (false)",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "extraShort",
							"type": "boolean"
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/utils/addresses.ts#L39"
		},
		{
			"kind": "function",
			"name": "shortenString",
			"signatures": [
				{
					"parameters": [
						{
							"name": "str",
							"type": "string"
						},
						{
							"name": "extraShort",
							"type": "boolean"
						}
					],
					"returns": {
						"type": "string"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/utils/addresses.ts#L3"
		}
	],
	"hooks": [
		{
			"kind": "function",
			"name": "useAcceptDirectListingOffer",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Accept a specific offer on a direct listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, AcceptDirectOffer, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to accept an offer on a direct listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@remarks",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "will accept the latest offer by the given offeror."
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: acceptOffer,\n    isLoading,\n    error,\n  } = useAcceptDirectListingOffer(contract);\n\n  if (error) {\n    console.error(\"failed to accept offer\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => acceptOffer({ listingId: 1, addressOfOfferor: \"{{wallet_address}}\" })}\n    >\n      Accept offer\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useacceptdirectlistingoffer?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1221"
		},
		{
			"kind": "function",
			"name": "useAccountAdmins",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all admins of account"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<WalletAddress[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of all admins of the provided account"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: accounts, isLoading, error } = useAccountSigners(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L70"
		},
		{
			"kind": "function",
			"name": "useAccountAdminsAndSigners",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all signers and admins of account"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<SignerWithPermissions[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of all admins of the provided account"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: accounts, isLoading, error } = useAccountSigners(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L101"
		},
		{
			"kind": "function",
			"name": "useAccountSigners",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all signers of account"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<SignerWithPermissions[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of all signers of the provided account"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: accounts, isLoading, error } = useAccountSigners(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaccountsigners?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L39"
		},
		{
			"kind": "function",
			"name": "useAccounts",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all accounts"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account factory contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<string[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of all accounts with their associated admin"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: accounts, isLoading, error } = useAccounts(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AccountFactory"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaccounts?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account-factory.ts#L38"
		},
		{
			"kind": "function",
			"name": "useAccountsForAddress",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all accounts associated with the provided address"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account factory contract"
										}
									]
								}
							]
						},
						{
							"name": "address",
							"type": "RequiredParam<string>"
						}
					],
					"returns": {
						"type": "UseQueryResult<string[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of all accounts associated with the address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: accountsForAddress, isLoading, error } = useAccountsForAddress(contract, \"{{account_address}}\");"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AccountFactory"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaccountsforaddress?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account-factory.ts#L69"
		},
		{
			"kind": "function",
			"name": "useActiveChain",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(undefined) | (Chain)"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is renamed to "
										},
										{
											"type": "inlineCode",
											"value": "useChain"
										}
									]
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "use the "
										},
										{
											"type": "inlineCode",
											"value": "useChain"
										},
										{
											"type": "text",
											"value": " hook instead"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L189"
		},
		{
			"kind": "function",
			"name": "useActiveClaimCondition",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the active claim condition"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the "
										},
										{
											"type": "inlineCode",
											"value": "claimConditions"
										},
										{
											"type": "text",
											"value": " extension."
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "options",
							"type": "ClaimConditionFetchOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(ClaimCondition) | (undefined)>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object with the currently active claim condition"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useactiveclaimcondition?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L68"
		},
		{
			"kind": "function",
			"name": "useActiveClaimConditionForWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the active claim condition for a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the "
										},
										{
											"type": "inlineCode",
											"value": "claimConditions"
										},
										{
											"type": "text",
											"value": " extension."
										}
									]
								}
							]
						},
						{
							"name": "walletAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the wallet address to check the active claim condition for"
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(ClaimCondition) | (null)>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the active claim condition for the wallet address or null if there is no active claim condition"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useactiveclaimconditionforwallet?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L309"
		},
		{
			"kind": "function",
			"name": "useActiveListings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all active listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(AuctionListing) | (DirectListing)[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of listings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: listings, isLoading, error } = useActiveListings(contract, { seller: \"{{wallet_address}}\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useactivelistings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L423"
		},
		{
			"kind": "function",
			"name": "useAddAdmin",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Add an additional admin on the smart wallet"
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResult, unknown, string>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const {\n    mutate: addAdmin,\n    isLoading,\n    error,\n  } = useAddAdmin();\n\n  if (error) {\n    console.error(\"failed to add admin\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => addAdmin(\"0x...\")}\n    >\n      Add admin\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L248"
		},
		{
			"kind": "function",
			"name": "useAddress",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for accessing the address of the connected wallet"
								}
							]
						},
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { useAddress } from \"@thirdweb-dev/react\""
						}
					],
					"returns": {
						"type": "(string) | (undefined)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "To get the address of the connected wallet, you can use the hook as follows:"
										}
									]
								},
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useAddress } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const address = useAddress()\n\n  return <div>{address}</div>\n}"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The "
										},
										{
											"type": "inlineCode",
											"value": "address"
										},
										{
											"type": "text",
											"value": " variable will hold the address of the connected wallet if a user has connected using one of the supported wallet connection hooks."
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useaddress?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L104"
		},
		{
			"kind": "function",
			"name": "useAirdropNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Airdrop NFTs to a list of wallets"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [Erc1155]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, AirdropNFTParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to transfer batch NFTs"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: airdropNFT,\n    isLoading,\n    error,\n  } = useAirdropNFT(contract);\n\n  if (error) {\n    console.error(\"failed to transfer batch NFTs\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => airdropNFT({\n         tokenId: 2,\n         addresses: [\n           { address: \"{{wallet_address}}\", quantity: 2 },\n           { address: \"{{wallet_address}}\", quantity: 4 } }\n         ]\n      )}\n    >\n      Airdrop NFT\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC1155"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useairdropnft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L618"
		},
		{
			"kind": "function",
			"name": "useAllRoleMembers",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all members of all roles"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<Awaited<Record<RolesForContract<TContract>, string[]>>, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a list of addresses for all supported roles on the contract."
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: roles, isLoading, error } = useAllRoleMembers(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PermissionsEnumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useallrolemembers?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L61"
		},
		{
			"kind": "function",
			"name": "useAppURI",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get App URI"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instance of the contract to get the appURI of"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<string, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the appURI of the contract"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ValidContractInstance"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: contractMetadata, isLoading, error } = useAppURI(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AppURI"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/app.ts#L32"
		},
		{
			"kind": "function",
			"name": "useAuctionWinner",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the winner of an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(Marketplace) | (MarketplaceV3)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<string, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the address of the winner of the auction or undefined if there is no winner yet"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0;\nconst { data: auctionWinner, isLoading, error } = useAuctionWinner(contract, listingId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useauctionwinner?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L536"
		},
		{
			"kind": "function",
			"name": "useAuth",
			"signatures": [
				{
					"returns": {
						"type": "(undefined) | (ThirdwebAuth)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/index.ts#L12"
		},
		{
			"kind": "function",
			"name": "useBalance",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "A hook to get the native or (optional) ERC20 token balance of the connected wallet."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "tokenAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the token contract, if empty will use the chain's native token"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(undefined) | ({  }), unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the balance of the connected wallet (native or ERC20)"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L21"
		},
		{
			"kind": "function",
			"name": "useBalanceForAddress",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the native token balance of a wallet address on the "
								},
								{
									"type": "inlineCode",
									"value": "activeChain"
								},
								{
									"type": "text",
									"value": " network set in the "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "walletAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the wallet that you want to get the native balance"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the balance of the given wallet address"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L50"
		},
		{
			"kind": "function",
			"name": "useBatchesToReveal",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all unrevealed batches"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1072",
											"children": [
												{
													"type": "text",
													"value": "RevealableContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BatchToReveal[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that gets the batches to still be revealed"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "RevealableContract"
						}
					],
					"blockTags": [
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Revealable | ERC1155Revealable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usebatchestoreveal?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L172"
		},
		{
			"kind": "function",
			"name": "useBidBuffer",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the bid buffer for an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(Marketplace) | (MarketplaceV3)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check (only necessary for marketplace v3)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of listings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: bidBuffer, isLoading, error } = useBidBuffer(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usebidbuffer?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L587"
		},
		{
			"kind": "function",
			"name": "useBurnNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Burn an NFT"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, BurnNFTParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to burn an NFT token from the connected wallet"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: burnNFT,\n    isLoading,\n    error,\n  } = useBurnNFT(contract);\n\n  if (error) {\n    console.error(\"failed to burn NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => burnNFT({ tokenId: 0, amount: 1 })}\n    >\n      Burn!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Burnable | ERC1155Burnable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useburnnft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L674"
		},
		{
			"kind": "function",
			"name": "useBurnToken",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Burn tokens"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, TokenBurnParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to burn tokens from the connected wallet"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: burnTokens,\n    isLoading,\n    error,\n  } = useBurnToken(contract);\n\n  if (error) {\n    console.error(\"failed to burn tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => burnTokens({ amount: 1000 })}\n    >\n      Burn!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20Burnable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useburntoken?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L425"
		},
		{
			"kind": "function",
			"name": "useBuyDirectListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Buy a direct listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a MarketplaceV3 contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, BuyFromListingParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to buy out a direct listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\", \"marketplace-v3\");\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyDirectListing(contract);\n\n  if (error) {\n    console.error(\"failed to buy direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, quantity: 1, buyer: \"{{address}}\"})}\n    >\n      Buy listing!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useBuyDirectListing?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1407"
		},
		{
			"kind": "function",
			"name": "useBuyNow",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Buy out an auction listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, BuyNowParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to buy out an auction listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyNow(contract);\n\n  if (error) {\n    console.error(\"failed to buyout listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n    >\n      Buy listing!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usebuynow?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1337"
		},
		{
			"kind": "function",
			"name": "useCancelDirectListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Cancel a direct listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace v3 contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, BigNumberish, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to cancel a direct listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelDirectListing,\n    isLoading,\n    error,\n  } = useCancelDirectListing(contract);\n\n  if (error) {\n    console.error(\"failed to cancel direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelDirectListing}\n    >\n      Cancel Direct Listing\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecanceldirectlisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L980"
		},
		{
			"kind": "function",
			"name": "useCancelEnglishAuction",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Cancel an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace v3 contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, BigNumberish, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to cancel an english auction"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelEnglishAuction,\n    isLoading,\n    error,\n  } = useCancelEnglishAuction(contract);\n\n  if (error) {\n    console.error(\"failed to cancel english auction\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelEnglishAuction}\n    >\n      Cancel English Auction\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecancelenglishauction?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1041"
		},
		{
			"kind": "function",
			"name": "useCancelListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Cancel a listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{ data: () => Promise<unknown>; receipt: providers.TransactionReceipt }, \"data\">, unknown, Pick<(AuctionListing) | (DirectListing), (\"type\") | (\"id\")>, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to cancel a listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelListing,\n    isLoading,\n    error,\n  } = useCancelListing(contract);\n\n  if (error) {\n    console.error(\"failed to cancel auction listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelListing}\n    >\n      Cancel Auction Listing!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecancellisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L899"
		},
		{
			"kind": "function",
			"name": "useChain",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for accessing the active Chain the current wallet is connected to"
								}
							]
						},
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { useChain } from \"@thirdweb-dev/react-core\""
						}
					],
					"returns": {
						"type": "(Chain) | (undefined)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can get the chain of the connected wallet by using the hook as follows:"
										}
									]
								},
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useChain } from \"@thirdweb-dev/react-core\"\n\nconst App = () => {\n  const chain = useChain()\n\n  return <div>{chain.chainId}</div>\n}"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useActiveChain?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L164"
		},
		{
			"kind": "function",
			"name": "useChainId",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for accessing the chain ID of the network the current wallet is connected to"
								}
							]
						},
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { useChainId } from \"@thirdweb-dev/react\""
						}
					],
					"returns": {
						"type": "(number) | (undefined)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can get the chain ID of the connected wallet by using the hook as follows:"
										}
									]
								},
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useChainId } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const chainId = useChainId()\n\n  return <div>{chainId}</div>\n}"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usechainid?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/wallet.ts#L134"
		},
		{
			"kind": "function",
			"name": "useClaimConditions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all claim conditions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the "
										},
										{
											"type": "inlineCode",
											"value": "claimConditions"
										},
										{
											"type": "text",
											"value": " extension."
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "options",
							"type": "ClaimConditionFetchOptions",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<ClaimCondition[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object with the list of claim conditions"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimconditions?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L186"
		},
		{
			"kind": "function",
			"name": "useClaimIneligibilityReasons",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the reasons why a specific wallet can't claim"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the "
										},
										{
											"type": "inlineCode",
											"value": "claimConditions"
										},
										{
											"type": "text",
											"value": " extension."
										}
									]
								}
							]
						},
						{
							"name": "params",
							"type": "ClaimIneligibilityParams"
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<ClaimEligibility[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object with the reasons for the claim ineligibility"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimineligibilityreasons?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L240"
		},
		{
			"kind": "function",
			"name": "useClaimNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Claim an NFT to a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1071",
											"children": [
												{
													"type": "text",
													"value": "DropContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<ClaimNFTReturnType, unknown, ClaimNFTParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to claim a NFT to the wallet specificed in the params"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "DropContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimNFT,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNFT({ to: \"{{wallet_address}}\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Claimable | ERC1155Claimable | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimnft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L228"
		},
		{
			"kind": "function",
			"name": "useClaimToken",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Claim tokens to a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, ClaimTokenParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to tokens to the wallet specified in the params"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(contract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimtoken?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L239"
		},
		{
			"kind": "function",
			"name": "useClaimedNFTSupply",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the total number of claimed NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (NFTDrop) | (SignatureDrop) | (SmartContract<BaseContract>)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the number of NFTs that are claimed"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721LazyMintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimednftsupply?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L146"
		},
		{
			"kind": "function",
			"name": "useClaimedNFTs",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all claimed NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<NFTDrop>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
										}
									]
								}
							]
						},
						{
							"name": "queryParams",
							"type": "{  }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "query params to pass to the query for the sake of pagination"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<NFT[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of NFTs that are claimed"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@remarks",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Equivalent to using "
										},
										{
											"type": "link",
											"title": null,
											"url": "704",
											"children": [
												{
													"type": "text",
													"value": "useNFTs"
												}
											]
										},
										{
											"type": "text",
											"value": "."
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721LazyMintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimednfts?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L92"
		},
		{
			"kind": "function",
			"name": "useClaimerProofs",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get claimer proofs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the "
										},
										{
											"type": "inlineCode",
											"value": "claimConditions"
										},
										{
											"type": "text",
											"value": " extension."
										}
									]
								}
							]
						},
						{
							"name": "claimerAddress",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the claimer to fetch the claimer proofs for"
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the token to fetch the claimer proofs for (if the contract is an ERC1155 contract)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "claimConditionId",
							"type": "BigNumberish",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "optional the claim condition id to get the proofs for"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(null) | ({  }), unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object with the snapshot for the provided address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useclaimerproofs?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L123"
		},
		{
			"kind": "function",
			"name": "useCompilerMetadata",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>"
						}
					],
					"returns": {
						"type": "UseQueryResult<(PublishedMetadata) | (null)>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L107"
		},
		{
			"kind": "function",
			"name": "useConnect",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(...args: ConnectFnArgs<I>) => Promise<I>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to connect to a wallet class"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L115"
		},
		{
			"kind": "function",
			"name": "useConnectionStatus",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "ConnectionStatus",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the connection status of the wallet"
									}
								]
							},
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "It can be one of the following:"
									}
								]
							},
							{
								"type": "list",
								"ordered": true,
								"start": 1,
								"spread": false,
								"children": [
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "inlineCode",
														"value": "unknown"
													},
													{
														"type": "text",
														"value": " - when wallet connection status is not yet known"
													}
												]
											}
										]
									},
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "inlineCode",
														"value": "connecting"
													},
													{
														"type": "text",
														"value": " - when wallet is connecting"
													}
												]
											}
										]
									},
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "inlineCode",
														"value": "connected"
													},
													{
														"type": "text",
														"value": " - when wallet is connected"
													}
												]
											}
										]
									},
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "inlineCode",
														"value": "disconnected"
													},
													{
														"type": "text",
														"value": " - when wallet is disconnected"
													}
												]
											}
										]
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L148"
		},
		{
			"kind": "function",
			"name": "useContract",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<TContractAddress>"
						}
					],
					"returns": {
						"type": "UseContractResult<TContractAddress extends GeneratedContractAddress ? SmartContract<BaseContractForAddress<TContractAddress>> : SmartContract>"
					},
					"typeParameters": [
						{
							"name": "TContractAddress",
							"extendsType": "string"
						}
					]
				},
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use this resolve a contract address to a smart contract instance."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the deployed contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseContractResult<SmartContract>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract once it is resolved"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\");"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use this resolve a contract address to a smart contract instance."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the deployed contract"
										}
									]
								}
							]
						},
						{
							"name": "_contractType",
							"type": "TContractType",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the type of the contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseContractResult<TContractType extends PrebuiltContractType ? ContractForPrebuiltContractType<TContractType> : SmartContract>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract once it is resolved"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContractType",
							"extendsType": "(\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\")"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\", \"nft-drop\");"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use this resolve a contract address to a smart contract instance."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the deployed contract"
										}
									]
								}
							]
						},
						{
							"name": "_abi",
							"type": "ContractInterface",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the ABI of the contract to use"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseContractResult<SmartContract>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract once it is resolved"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\", ABI);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L147"
		},
		{
			"kind": "function",
			"name": "useContractEvents",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get or subscribe to contract events"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the [ValidContractInstance]([object Object]) instance of the contract to listen to events for"
										}
									]
								}
							]
						},
						{
							"name": "eventName",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the name of the event to query for (omit this or pass "
										},
										{
											"type": "inlineCode",
											"value": "undefined"
										},
										{
											"type": "text",
											"value": " to query for all events)"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "options",
							"type": "{ queryFilter: EventQueryOptions<Record<string, any>>; subscribe: boolean }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "options includes the filters ("
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "QueryAllEvents"
												}
											]
										},
										{
											"type": "text",
											"value": ") for the query as well as if you want to subscribe to real-time updates (default: true)"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<ContractEvent<Record<string, any>>[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract events"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: contractEvents, isLoading } = useContractEvents(contract);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontractevents?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L419"
		},
		{
			"kind": "function",
			"name": "useContractMetadata",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the metadata of this contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the [ValidContractInstance]([object Object]) instance of the contract to get the metadata for"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<RequiredParam<TContract> extends undefined ? undefined : Awaited<ReturnType<TContract[\"metadata\"][\"get\"]>>, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract metadata of the deployed contract"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ValidContractInstance"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: contractMetadata, isLoading } = useContractMetadata(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ContractMetadata"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L311"
		},
		{
			"kind": "function",
			"name": "useContractMetadataUpdate",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Update the metadata of this contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the [ValidContractInstance]([object Object]) instance of the contract to get the metadata for"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<{ data: () => Promise<any>; receipt: providers.TransactionReceipt }, unknown, { app_uri: string; description: string; external_link: string; image: any; name: string }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the contract metadata of the deployed contract"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateContractMetadata,\n    isLoading,\n    error,\n  } = useContractMetadataUpdate(contract);\n\n  if (error) {\n    console.error(\"failed to update contract metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n    >\n      Update contract metadata\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ContractMetadata"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L362"
		},
		{
			"kind": "function",
			"name": "useContractRead",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get data from a contract read-function call"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "TContractInstance extends ValidContractInstance ? RequiredParam<TContractInstance> : TContractAddress extends never ? RequiredParam<SmartContract<BaseContractForAddress<TContractAddress>>> : RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the contract instance of the contract to call a function on"
										}
									]
								}
							]
						},
						{
							"name": "functionName",
							"type": "RequiredParam<TFunctionName & string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the name of the function to call"
										}
									]
								}
							]
						},
						{
							"name": "args",
							"type": "TArgs",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The arguments to pass to the function (if any), with optional call arguments as the last parameter"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "overrides",
							"type": "CallOverrides",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<TReturnType, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the data returned by the function call"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContractAddress",
							"extendsType": "string"
						},
						{
							"name": "TContract",
							"extendsType": "ValidContractInstance"
						},
						{
							"name": "TContractInstance",
							"extendsType": "ValidContractInstance"
						},
						{
							"name": "TFunctionName",
							"extendsType": "string"
						},
						{
							"name": "TArgs",
							"extendsType": "unknown[]"
						},
						{
							"name": "TReturnType",
							"extendsType": "any"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data, isLoading, error } = useContractRead(contract, \"functionName\", ...args);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontractread?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L516"
		},
		{
			"kind": "function",
			"name": "useContractType",
			"signatures": [
				{
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>"
						}
					],
					"returns": {
						"type": "UseQueryResult<(null) | (\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\"), unknown>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L59"
		},
		{
			"kind": "function",
			"name": "useContractWrite",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Mke a write call to your contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "TContractInstance extends ValidContractInstance ? RequiredParam<TContractInstance> : TContractAddress extends never ? RequiredParam<SmartContract<BaseContractForAddress<TContractAddress>>> : RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the contract instance of the contract to call a function on"
										}
									]
								}
							]
						},
						{
							"name": "functionName",
							"type": "RequiredParam<TFunctionName & string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the name of the function to call"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<TransactionResultWithMetadata<unknown>, \"data\">, unknown, { args: TArgs; overrides: CallOverrides }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the write function to call"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContractAddress",
							"extendsType": "string"
						},
						{
							"name": "TContract",
							"extendsType": "ValidContractInstance"
						},
						{
							"name": "TContractInstance",
							"extendsType": "ValidContractInstance"
						},
						{
							"name": "TFunctionName",
							"extendsType": "string"
						},
						{
							"name": "TArgs",
							"extendsType": "any[]"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract } = useContract(\"{{contract_address}}\");\nconst { mutate: myFunction, isLoading, error } = useContractWrite(contract, \"myFunction\");\n\n// the function can be called as follows:\n// myFunction([\"param 1\", \"param 2\", ...])"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecontractwrite?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L592"
		},
		{
			"kind": "function",
			"name": "useCreateAccount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create a account"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account factory contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResultWithAddress, unknown, string, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to create a account"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createAccount,\n    isLoading,\n    error,\n  } = useCreateAccount(contract);\n\n  if (error) {\n    console.error(\"failed to create account\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createAccount(\"0x...\")}\n    >\n      Create Account\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AccountFactory"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecreateaccount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account-factory.ts#L161"
		},
		{
			"kind": "function",
			"name": "useCreateAuctionListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create a new english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TMarketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResultWithId, unknown, TMarketplace extends Marketplace ? NewAuctionListing : {  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to create a new auction listing"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TMarketplace",
							"extendsType": "(Marketplace) | (MarketplaceV3)"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createAuctionListing,\n    isLoading,\n    error,\n  } = useCreateAuctionListing(contract);\n\n  if (error) {\n    console.error(\"failed to create auction listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createAuctionListing(auctionListingData)}\n    >\n      Create Auction Listing!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecreateauctionlisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L821"
		},
		{
			"kind": "function",
			"name": "useCreateDirectListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create a new direct listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TMarketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResultWithId, unknown, TMarketplace extends Marketplace ? NewDirectListing : {  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to create a new direct listing"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TMarketplace",
							"extendsType": "(Marketplace) | (MarketplaceV3)"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createDirectListing,\n    isLoading,\n    error,\n  } = useCreateDirectListing(contract);\n\n  if (error) {\n    console.error(\"failed to create direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createDirectListing(directListingData)}\n    >\n      Create Direct Listing!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usecreatedirectlisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L742"
		},
		{
			"kind": "function",
			"name": "useCreateSessionKey",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Create and add a session key for the smart wallet"
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResult, unknown, CreateSessionKeyInput>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const {\n    mutate: createSessionKey,\n    isLoading,\n    error,\n  } = useCreateSessionKey();\n\n  if (error) {\n    console.error(\"failed to create session key\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createSessionKey(\n        \"0x...\",\n        {\n          approvedCallTargets: [\"0x...\"], // the addresses of contracts that the session key can call\n          nativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n          startDate: new Date(), // the date when the session key becomes active\n          expirationDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // the date when the session key expires\n        }\n       )}\n    >\n      Create Session Key\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L166"
		},
		{
			"kind": "function",
			"name": "useCreateWalletInstance",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(Wallet: WalletConfig<I>) => I",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to create an instance of given wallet class"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L174"
		},
		{
			"kind": "function",
			"name": "useDelayedRevealLazyMint",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Lazy mint NFTs with delayed reveal"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1071",
											"children": [
												{
													"type": "text",
													"value": "DropContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "onProgress",
							"type": "(progress: UploadProgressEvent) => void",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an optional callback that will be called with the progress of the upload"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResultWithId[], unknown, DelayedRevealLazyMintInput, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to lazy mint a batch of NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "RevealableContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: delayedRevealLazyMint,\n    isLoading,\n    error,\n  } = useDelayedRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => delayedRevealLazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Delayed Reveal Lazy mint NFT!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Revealable | ERC1155Revealable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usedelayedreveallazymint?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L389"
		},
		{
			"kind": "function",
			"name": "useDirectListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get a direct listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<DirectListingV3, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the desired direct listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0; // the listing id to check\nconst { data: directListing, isLoading, error } = useListing(contract, listingId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usedirectlisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L94"
		},
		{
			"kind": "function",
			"name": "useDirectListings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all direct listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<DirectListingV3[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of direct listings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: directListings, isLoading, error } = useDirectListings(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usedirectlistings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L198"
		},
		{
			"kind": "function",
			"name": "useDirectListingsCount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the total count of direct listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the direct listings count"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: directListingsCount, isLoading, error } = useDirectListingsCount(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usedirectlistingscount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L363"
		},
		{
			"kind": "function",
			"name": "useDisconnect",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "() => Promise<void>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to disconnect from the current active wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L128"
		},
		{
			"kind": "function",
			"name": "useEdition",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "Edition"
								},
								{
									"type": "text",
									"value": " contract. This contract is used to interface with ERC1155 compliant NFTs."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Edition contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Edition)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition\")\n\n  // Now you can use the edition contract in the rest of the component\n\n  // For example, this function will return all the NFTs on this contract\n  async function getNFTs() {\n    const nfts = await contract.getAll()\n    return nfts\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const edition = useEdition(\"0x1234...\");\n+ const edition = useContract(\"0x1234...\", \"edition\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useEdition.ts#L35"
		},
		{
			"kind": "function",
			"name": "useEditionDrop",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "EditionDrop"
								},
								{
									"type": "text",
									"value": " contract. This contract is used to interface with ERC1155 compliant NFTs that can be lazily minted."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Edition Drop contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (EditionDrop)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition-drop\")\n\n  // Now you can use the edition drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(tokenId, quantity) {\n    await contract.claim(tokenId, quantity)\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const editionDrop = useEditionDrop(\"0x1234...\");\n+ const editionDrop = useContract(\"0x1234...\", \"edition-drop\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useEditionDrop.ts#L34"
		},
		{
			"kind": "function",
			"name": "useEnglishAuction",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "auctionId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the auction id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<EnglishAuction, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the desired english auction"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const auctionId = 0; // the listing id to check\nconst { data: englishAuction, isLoading, error } = useEnglishAuction(contract, auctionId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L131"
		},
		{
			"kind": "function",
			"name": "useEnglishAuctionWinningBid",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the winning bid for an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "auctionId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the auction id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<(undefined) | (Bid), unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the "
									},
									{
										"type": "link",
										"title": null,
										"url": "undefined",
										"children": [
											{
												"type": "text",
												"value": "Bid"
											}
										]
									},
									{
										"type": "text",
										"value": " that is winning the auction"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0;\nconst { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useenglishauctionwinningbid?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L496"
		},
		{
			"kind": "function",
			"name": "useEnglishAuctions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all english auctions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<EnglishAuction[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of english auctions"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: englishAuctions, isLoading, error } = useEnglishAuctions(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L268"
		},
		{
			"kind": "function",
			"name": "useEnglishAuctionsCount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the total count of english auctions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the direct english actions count"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: englishAuctionsCount, isLoading, error } = useEnglishAuctionsCount(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useenglishauctionscount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L392"
		},
		{
			"kind": "function",
			"name": "useExecuteAuctionSale",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Execute an auction sale. Can only be executed once the auction has ended and the auction has a winning bid."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, ExecuteAuctionSale, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to accept an offer on a direct listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: executeAuctionSale,\n    isLoading,\n    error,\n  } = useExecuteAuctionSale(contract);\n\n  if (error) {\n    console.error(\"failed to execute sale\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => executeAuctionSale({ listingId: 1 })}\n    >\n      Execute sale\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useexecuteauctionsale?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1280"
		},
		{
			"kind": "function",
			"name": "useGrantRole",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Grant a role to a specific address"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<void, unknown, { address: string; role: RolesForContract<TContract> }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to grant a member of a role on the contract"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: grantRole,\n    isLoading,\n    error,\n  } = useGrantRole(contract);\n\n  if (error) {\n    console.error(\"failed to grant role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => grantRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Grant Role\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Permissions | PermissionsEnumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usegrantrole?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L247"
		},
		{
			"kind": "function",
			"name": "useIsAccountDeployed",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Check if a account has been deployed for the given admin"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<SmartContract<BaseContract>>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a account factory contract"
										}
									]
								}
							]
						},
						{
							"name": "admin",
							"type": "RequiredParam<string>"
						},
						{
							"name": "extraData",
							"type": "BytesLike",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<boolean>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a boolean indicating if a account has been deployed for the given admin"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: isAccountDeployed, isLoading, error } = useIsAccountDeployed(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AccountFactory"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useisaccountdeployed?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account-factory.ts#L104"
		},
		{
			"kind": "function",
			"name": "useIsAddressRole",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Check if an address is a member of a specific role"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						},
						{
							"name": "role",
							"type": "RolesForContract<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the role to check the member against, see [Role]([object Object])"
										}
									]
								}
							]
						},
						{
							"name": "walletAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "boolean",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "true if the address is a member of the role, or false if not"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: isMember, isLoading, error } = useIsAddressRole(contract, \"admin\", \"{{wallet_address}}\");"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PermissionsEnumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useisaddressrole?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L126"
		},
		{
			"kind": "function",
			"name": "useLazyMint",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Lazy mint NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										},
										{
											"type": "text",
											"value": " with the drop extension"
										}
									]
								}
							]
						},
						{
							"name": "onProgress",
							"type": "(progress: UploadProgressEvent) => void",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an optional callback that will be called with the progress of the upload"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseMutationResult<any, unknown, any, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to lazy mint a batch of NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "DropContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: lazyMint,\n    isLoading,\n    error,\n  } = useLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => lazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Lazy mint NFT!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721LazyMintable | ERC1155LazyMintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselazymint?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L317"
		},
		{
			"kind": "function",
			"name": "useListing",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get a listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<(AuctionListing) | (DirectListing), unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the desired listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0; // the listing id to check\nconst { data: listing, isLoading, error } = useListing(contract, listingId);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselisting?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L60"
		},
		{
			"kind": "function",
			"name": "useListings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<(AuctionListing) | (DirectListing)[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of listings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: listings, isLoading, error } = useListings(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselistings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L166"
		},
		{
			"kind": "function",
			"name": "useListingsCount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the total count of listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the listing count"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: listingsCount, isLoading, error } = useListingsCount(contract);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselistingscount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L336"
		},
		{
			"kind": "function",
			"name": "useLogin",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to securely login to a backend with the connected wallet. The backend\nauthentication URL must be configured on the ThirdwebProvider."
								}
							]
						}
					],
					"returns": {
						"type": "{ isLoading: boolean; login: () => Promise<any> }",
						"summary": [
							{
								"type": "list",
								"ordered": false,
								"start": null,
								"spread": false,
								"children": [
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "A function to invoke to login with the connected wallet, and an isLoading state."
													}
												]
											}
										]
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselogin?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/useLogin.ts#L18"
		},
		{
			"kind": "function",
			"name": "useLogout",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to logout the connected wallet from the backend.\nThe backend logout URL must be configured on the ThirdwebProvider."
								}
							]
						}
					],
					"returns": {
						"type": "{ isLoading: boolean; logout: UseMutateAsyncFunction<void, unknown, void, unknown> }",
						"summary": [
							{
								"type": "list",
								"ordered": false,
								"start": null,
								"spread": false,
								"children": [
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "A function to invoke to logout."
													}
												]
											}
										]
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.uselogout?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/useLogout.ts#L16"
		},
		{
			"kind": "function",
			"name": "useMakeBid",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Make a bid on an auction listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, MakeBidParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to make a bid on an auction listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: makeBid,\n    isLoading,\n    error,\n  } = useMakeBid(contract);\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeBid({ listingId: 1, bid: 2 })}\n    >\n      Bid!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usemakebid?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1103"
		},
		{
			"kind": "function",
			"name": "useMakeOffer",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Nake an offer on a direct or auction listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, MakeOfferParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to make a bid on an auction listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: makeOffer,\n    isLoading,\n    error,\n  } = useMakeOffer(contract);\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeOffer({ listingId: 1, pricePerToken: 0.5, quantity: 1 })}\n    >\n      Bid!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usemakeoffer?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L1161"
		},
		{
			"kind": "function",
			"name": "useMarketplace",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of a "
								},
								{
									"type": "inlineCode",
									"value": "Marketplace"
								},
								{
									"type": "text",
									"value": " contract. This contract is used to support marketplace for purchase and sale of on-chain assets."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Marketplace contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Marketplace)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"marketplace\")\n\n  // Now you can use the marketplace contract in the rest of the component\n\n  // For example, this function will return all the listings on the marketplace\n  async function getListings() {\n    const listings = await contract.getAll()\n    return listings\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const marketplace = useMarketplace(\"0x1234...\");\n+ const marketplace = useContract(\"0x1234...\", \"marketplace\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useMarketplace.ts#L35"
		},
		{
			"kind": "function",
			"name": "useMetadata",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the metadata of this contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a [CustomContractMetadata]([object Object]) object containing the metadata"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: metadata, isLoading, error } = useMetadata(contract);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usemetadata?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L334"
		},
		{
			"kind": "function",
			"name": "useMinimumNextBid",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the minimum next bid for an english auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(Marketplace) | (MarketplaceV3)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the minimum next bid for the auction listing"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0;\nconst { data: minimumNextBid, isLoading, error } = useMinimumNextBid(contract, listingId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAucton"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useminimumnextbid?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L641"
		},
		{
			"kind": "function",
			"name": "useMintNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Mint an NFT to a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<MintNFTReturnType<TContract>, unknown, MintNFTParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to mint a new NFT token to the connected wallet"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"{{wallet_address}}\" })}\n    >\n      Mint!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Mintable | ERC1155Mintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usemintnft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L396"
		},
		{
			"kind": "function",
			"name": "useMintNFTSupply",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Increase the supply of an existing NFT"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "Erc1155<(BaseERC1155) | (BaseSignatureMintERC1155)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [Erc1155]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResultWithId<NFT>, unknown, MintNFTSupplyParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to mint a more supply of a token id to the provided wallet"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintNftSupply,\n    isLoading,\n    error,\n  } = useMintNFTSupply(contract);\n\n  if (error) {\n    console.error(\"failed to mint additional supply\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNftSupply({ tokenId: 0, additionalSupply: 100, to: \"{{wallet_address}}\"})}\n    >\n      Mint Additional Supply!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC1155Mintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usemintnftsupply?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L468"
		},
		{
			"kind": "function",
			"name": "useMintToken",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Mint tokens"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{ data: () => Promise<unknown>; receipt: providers.TransactionReceipt }, \"data\">, unknown, TokenParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to mint new tokens to the connected wallet"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintTokens,\n    isLoading,\n    error,\n  } = useMintToken(contract);\n\n  if (error) {\n    console.error(\"failed to mint tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n    >\n      Mint!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20Mintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useminttoken?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L167"
		},
		{
			"kind": "function",
			"name": "useMultiwrap",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "Multiwrap"
								},
								{
									"type": "text",
									"value": " contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Multiwrap contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Multiwrap)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"multiwrap\")\n\n  // Now you can use the multiwrap contract in the rest of the component\n\n  // For example, this function will let the connected wallet wrap tokens\n  async function wrap(tokensToWrap, wrappedNFTMetadata) {\n    await contract.wrap(tokensToWrap, wrappedNFTMetadata)\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const multiwrap = useMultiwrap(\"0x1234...\");\n+ const multiwrap = useContract(\"0x1234...\", \"multiwrap\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useMultiwrap.ts#L34"
		},
		{
			"kind": "function",
			"name": "useNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get a single NFT"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the tokenId to look up"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<NFT, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the metadata for the given tokenId"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const tokenId = 0; // the tokenId to look up\nconst { data: nft, isLoading, error } = useNFT(contract, tokenId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721 | ERC1155"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usenft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L52"
		},
		{
			"kind": "function",
			"name": "useNFTBalance",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get NFT balance of a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<NFTContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "ownerWalletAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the wallet address to check the balance of"
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "required for ERC1155, the tokenId to look up"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the total balance of the owner"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\");\n// for ERC1155 contracts, you can also pass a tokenId\nconst tokenId = 0;\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\", tokenId);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721 | ERC1155"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usenftbalance?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L282"
		},
		{
			"kind": "function",
			"name": "useNFTCollection",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "NFTCollection"
								},
								{
									"type": "text",
									"value": " contract. This contract is meant to interface with ERC721 compliant NFTs."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the NFT Collection contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (NFTCollection)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract, isLoading, error } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-collection\")\n\n  // Now you can use the nftCollection contract in the rest of the component\n\n  // For example, this function will return all the NFTs on this contract\n  async function getNFTs() {\n    const nfts = await contract.getAll()\n    return nfts\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const nftCollection = useNFTCollection(\"0x1234...\");\n+ const nftCollection = useContract(\"0x1234...\", \"nft-collection\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useNFTCollection.ts#L35"
		},
		{
			"kind": "function",
			"name": "useNFTDrop",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "NFTDrop"
								},
								{
									"type": "text",
									"value": " contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the NFT Drop contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (NFTDrop)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-drop\")\n\n  // Now you can use the nft drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(quantity) {\n    await contract.claim(quantity)\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const nftDrop = useNFTDrop(\"0x1234...\");\n+ const nftDrop = useContract(\"0x1234...\", \"nft-drop\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useNFTDrop.ts#L34"
		},
		{
			"kind": "function",
			"name": "useNFTs",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "queryParams",
							"type": "{  }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "query params to pass to the query for pagination"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<NFT[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Supply | ERC721Enumerable | ERC1155Enumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usenfts?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L94"
		},
		{
			"kind": "function",
			"name": "useNetwork",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting metadata about the network the current wallet is connected to and switching networks"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "It's important to note that some wallet apps do not support programmatic network switching and switchNetwork will be undefined.\nFor those situations, you can typically switch networks in the wallet app this hook will still work."
								}
							]
						}
					],
					"returns": {
						"type": "[NetworkMetadata, (SwitchNetwork) | (undefined)]"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useNetwork } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  const [, switchNetwork] = useNetwork();\n  return (\n     // switchNetwork is undefined if the wallet does not support programmatic network switching\n     // 137 is the chainId for Polygon in this example\n    <button onClick={() => switchNetwork(137)}>\n       Switch Network\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "list",
									"ordered": false,
									"start": null,
									"spread": false,
									"children": [
										{
											"type": "listItem",
											"spread": false,
											"checked": null,
											"children": [
												{
													"type": "paragraph",
													"children": [
														{
															"type": "text",
															"value": "use "
														},
														{
															"type": "inlineCode",
															"value": "useChain"
														},
														{
															"type": "text",
															"value": ", "
														},
														{
															"type": "inlineCode",
															"value": "useSwitchChain"
														},
														{
															"type": "text",
															"value": ", "
														},
														{
															"type": "inlineCode",
															"value": "useChainId"
														},
														{
															"type": "text",
															"value": " instead"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/useNetwork.ts#L56"
		},
		{
			"kind": "function",
			"name": "useNetworkMismatch",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for checking whether the connected wallet is on the correct network specified by the "
								},
								{
									"type": "inlineCode",
									"value": "network"
								},
								{
									"type": "text",
									"value": " passed to the "
								},
								{
									"type": "inlineCode",
									"value": "<ThirdwebProvider />"
								},
								{
									"type": "text",
									"value": "."
								}
							]
						},
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { useNetworkMismatch } from \"@thirdweb-dev/react\""
						}
					],
					"returns": {
						"type": "boolean",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "inlineCode",
										"value": "true"
									},
									{
										"type": "text",
										"value": " if the chainId of the connected wallet is different from the chainId of the network passed into "
									},
									{
										"type": "inlineCode",
										"value": "<ThirdwebProvider />"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usenetworkmismatch?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can check if a users wallet is connected to the correct chain ID as follows:"
										}
									]
								},
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const isMismatched = useNetworkMismatch()\n\n  return <div>{isMismatched}</div>\n}"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "From here, you can prompt users to switch their network using the "
										},
										{
											"type": "inlineCode",
											"value": "useNetwork"
										},
										{
											"type": "text",
											"value": " hook."
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useNetworkMismatch.ts#L31"
		},
		{
			"kind": "function",
			"name": "useOffers",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all the offers for a listing"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a Marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the id of the listing to fetch offers for"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "({ data: (undefined) | (Record<string, any>[]); dataUpdatedAt: number; error: unknown; errorUpdateCount: number; errorUpdatedAt: number; failureCount: number; failureReason: unknown; fetchStatus: FetchStatus; isError: true; isFetched: boolean; isFetchedAfterMount: boolean; isFetching: boolean; isInitialLoading: boolean; isLoading: false; isLoadingError: false; isPaused: boolean; isPlaceholderData: boolean; isPreviousData: boolean; isRefetchError: true; isRefetching: boolean; isStale: boolean; isSuccess: false; refetch: (options?: RefetchOptions & RefetchQueryFilters<TPageData>) => Promise<QueryObserverResult<ContractEvent<Record<string, any>>[], unknown>>; remove: () => void; status: \"error\" }) | ({ data: (undefined) | (Record<string, any>[]); dataUpdatedAt: number; error: null; errorUpdateCount: number; errorUpdatedAt: number; failureCount: number; failureReason: unknown; fetchStatus: FetchStatus; isError: false; isFetched: boolean; isFetchedAfterMount: boolean; isFetching: boolean; isInitialLoading: boolean; isLoading: false; isLoadingError: false; isPaused: boolean; isPlaceholderData: boolean; isPreviousData: boolean; isRefetchError: false; isRefetching: boolean; isStale: boolean; isSuccess: true; refetch: (options?: RefetchOptions & RefetchQueryFilters<TPageData>) => Promise<QueryObserverResult<ContractEvent<Record<string, any>>[], unknown>>; remove: () => void; status: \"success\" }) | ({ data: (undefined) | (Record<string, any>[]); dataUpdatedAt: number; error: unknown; errorUpdateCount: number; errorUpdatedAt: number; failureCount: number; failureReason: unknown; fetchStatus: FetchStatus; isError: true; isFetched: boolean; isFetchedAfterMount: boolean; isFetching: boolean; isInitialLoading: boolean; isLoading: false; isLoadingError: true; isPaused: boolean; isPlaceholderData: boolean; isPreviousData: boolean; isRefetchError: false; isRefetching: boolean; isStale: boolean; isSuccess: false; refetch: (options?: RefetchOptions & RefetchQueryFilters<TPageData>) => Promise<QueryObserverResult<ContractEvent<Record<string, any>>[], unknown>>; remove: () => void; status: \"error\" }) | ({ data: (undefined) | (Record<string, any>[]); dataUpdatedAt: number; error: null; errorUpdateCount: number; errorUpdatedAt: number; failureCount: number; failureReason: unknown; fetchStatus: FetchStatus; isError: false; isFetched: boolean; isFetchedAfterMount: boolean; isFetching: boolean; isInitialLoading: boolean; isLoading: true; isLoadingError: false; isPaused: boolean; isPlaceholderData: boolean; isPreviousData: boolean; isRefetchError: false; isRefetching: boolean; isStale: boolean; isSuccess: false; refetch: (options?: RefetchOptions & RefetchQueryFilters<TPageData>) => Promise<QueryObserverResult<ContractEvent<Record<string, any>>[], unknown>>; remove: () => void; status: \"loading\" })"
					},
					"blockTags": [
						{
							"tag": "@remarks",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Fetch all the offers for a specified direct or auction listing."
										}
									]
								}
							]
						},
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0;\nconst { data: offers, isLoading, error } = useOffers(contract, listingId);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useoffers?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L692"
		},
		{
			"kind": "function",
			"name": "useOwnedNFTs",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all NFTs owned by a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "ownerWalletAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the wallet address to get owned tokens for"
										}
									]
								}
							]
						},
						{
							"name": "queryParams",
							"type": "{  }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "query params to pass to the query for pagination"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<NFT[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the list of owned tokens"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\", { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Enumerable | ERC1155Enumerable | ERC721Supply"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useownednfts?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L237"
		},
		{
			"kind": "function",
			"name": "usePack",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of a "
								},
								{
									"type": "inlineCode",
									"value": "Pack"
								},
								{
									"type": "text",
									"value": " contract. This contract supports the creation of on-chain luck-based lootboxes."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Pack contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Pack)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = usePack(\"<YOUR-CONTRACT-ADDRESS>\", \"pack\")\n\n  // Now you can use the pack contract in the rest of the component\n\n  // For example, this function will get all the packs on this contract\n  async function getPacks() {\n    const packs = await contract.getAll()\n    return packs\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const pack = usePack(\"0x1234...\");\n+ const pack = useContract(\"0x1234...\", \"pack\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/usePack.ts#L35"
		},
		{
			"kind": "function",
			"name": "usePersonalWalletAddress",
			"signatures": [
				{
					"returns": {
						"type": "(undefined) | (string)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/usePersonalWalletAddress.ts#L4"
		},
		{
			"kind": "function",
			"name": "usePlatformFees",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the platform fee recipient and basis points"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an object containing the platform fee basis points and the fee recipient address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: platformFees, isLoading, error } = usePlatformFees(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PlatformFee"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useplatformfees?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L239"
		},
		{
			"kind": "function",
			"name": "usePrimarySaleRecipient",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the primary sale recipient"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<string, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the wallet address of the primary sales recipient"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: primarySaleRecipient, isLoading, error } = usePrimarySalesRecipient(contract);"
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Use this to get the primary sales recipient of your "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PrimarySale"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useprimarysalerecipient?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L41"
		},
		{
			"kind": "function",
			"name": "useRemoveAdmin",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Add an additional admin on the smart wallet"
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResult, unknown, string>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const {\n    mutate: removeAdmin,\n    isLoading,\n    error,\n  } = useRemoveAdmin();\n\n  if (error) {\n    console.error(\"failed to remove admin\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => removeAdmin(\"0x...\")}\n    >\n      Remove admin\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L289"
		},
		{
			"kind": "function",
			"name": "useResetClaimConditions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Reset claim conditions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1071",
											"children": [
												{
													"type": "text",
													"value": "DropContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, void, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to reset claim conditions"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L542"
		},
		{
			"kind": "function",
			"name": "useRevealLazyMint",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Reveal a batch of delayed reveal NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1072",
											"children": [
												{
													"type": "text",
													"value": "RevealableContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{ data: () => Promise<unknown>; receipt: providers.TransactionReceipt }, \"data\">, unknown, RevealLazyMintInput, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to reveal a batch of delayed reveal NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "RevealableContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revealLazyMint,\n    isLoading,\n    error,\n  } = useRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to reveal batch\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revealLazyMint({ batchId: \"0\", password: \"my-password\" })}\n    >\n      Reveal batch!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Revealable | ERC1155Revealable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usereveallazymint?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L469"
		},
		{
			"kind": "function",
			"name": "useRevokeRole",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Revoke a role from a specific address"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<void, unknown, { address: string; role: RolesForContract<TContract> }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to revoke a role from a member on the contract"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revokeRole,\n    isLoading,\n    error,\n  } = useRevokeRole(contract);\n\n  if (error) {\n    console.error(\"failed to revoke role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revokeRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Revoke Role\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Permissions | PermissionsEnumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.userevokerole?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L307"
		},
		{
			"kind": "function",
			"name": "useRevokeSessionKey",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Revoke a session key on the smart wallet"
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<TransactionResult, unknown, string>"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const {\n    mutate: revokeSessionKey,\n    isLoading,\n    error,\n  } = useRevokeSessionKey();\n\n  if (error) {\n    console.error(\"failed to revoke session key\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revokeSessionKey(\"0x...\")}\n    >\n      Revoke Session Key\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Account"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/account.ts#L207"
		},
		{
			"kind": "function",
			"name": "useRoleMembers",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all members of a specific role"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						},
						{
							"name": "role",
							"type": "RolesForContract<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the role to get the members of, see [Role]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<string[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a list of addresses that are members of the role"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: members, isLoading, error } = useRoleMembers(SmartContract, \"admin\");"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Permissions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.userolemembers?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L93"
		},
		{
			"kind": "function",
			"name": "useRoyaltySettings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the royalty recipient and fee"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an object containing recipient address and the royalty basis points"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const { data: settings, isLoading, error } = useRoyaltySettings(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Royalty"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useroyaltysettings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L142"
		},
		{
			"kind": "function",
			"name": "useSDK",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(ThirdwebSDK) | (undefined)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "link",
										"title": null,
										"url": "undefined",
										"children": [
											{
												"type": "text",
												"value": "ThirdwebSDK"
											}
										]
									},
									{
										"type": "text",
										"value": "\nAccess the instance of the thirdweb SDK created by the ThirdwebProvider\nto call methods using the connected wallet on the desiredChainId."
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const sdk = useSDK();"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useSDK.ts#L28"
		},
		{
			"kind": "function",
			"name": "useSetAllRoleMembers",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Overwrite the list of members for specific roles"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a [SmartContract]([object Object])"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<void, unknown, {[role in any] : string[]}, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to overwrite all roles on the contract"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "ContractWithRoles"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: overwriteRoles,\n    isLoading,\n    error,\n  } = useSetAllRoleMembers(contract);\n\n  if (error) {\n    console.error(\"failed to overwrite roles\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n    >\n      Overwrite Roles\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Permissions"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/roles.ts#L188"
		},
		{
			"kind": "function",
			"name": "useSetAppURI",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set App URI"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{ data: () => Promise<unknown>; receipt: providers.TransactionReceipt }, \"data\">, unknown, { uri: string }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to update the appURI of a contract"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const {\n    mutate: useSetAppURI,\n    isLoading,\n    error,\n  } = useSetAppURI(contract);\n\n  if (error) {\n    console.error(\"failed to update appURI\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => useSetAppURI({ uri })}\n    >\n      Update App URI\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "AppUR"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/app.ts#L78"
		},
		{
			"kind": "function",
			"name": "useSetClaimConditions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set claim conditions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<DropContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1071",
											"children": [
												{
													"type": "text",
													"value": "DropContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "BigNumberish",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseMutationResult<{ receipt: providers.TransactionReceipt }, unknown, SetClaimConditionsParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to set claim conditions"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usesetclaimconditions?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L464"
		},
		{
			"kind": "function",
			"name": "useSetConnectedWallet",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(wallet: WalletInstance, params?: ConnectParams<Record<string, any>>) => Promise<void>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to set a connected wallet instance"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L200"
		},
		{
			"kind": "function",
			"name": "useSetConnectionStatus",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(status: ConnectionStatus) => void",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to create an instance of given wallet class"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L161"
		},
		{
			"kind": "function",
			"name": "useSharedMetadata",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the shared metadata of an Open Edition NFT contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<NFTContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<(BasicNFTInput) | (undefined)>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the shared metadata of the contract"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: sharedMetadata, isLoading, error } = useSharedMetadata(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721SharedMetadata"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usesharedmetadata?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L335"
		},
		{
			"kind": "function",
			"name": "useSignatureDrop",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "SignatureDrop"
								},
								{
									"type": "text",
									"value": " contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the NFT Drop contract, found in your thirdweb dashboard"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "(undefined) | (SignatureDrop)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"signature-drop\")\n\n  // Now you can use the Signature drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(quantity) {\n    await contract.claim(quantity)\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const signatureDrop = useSignatureDrop(\"0x1234...\");\n+ const signatureDrop = useContract(\"0x1234...\", \"signature-drop\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useSignatureDrop.ts#L34"
		},
		{
			"kind": "function",
			"name": "useSplit",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of a "
								},
								{
									"type": "inlineCode",
									"value": "Split"
								},
								{
									"type": "text",
									"value": " contract. This contract supports fund distribution to multiple parties."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Split contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Split)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"split\")\n\n  // Now you can use the split contract in the rest of the component\n\n  // For example, this function will return all the recipients of the split\n  async function getRecipients() {\n    const recipients = await contract.getAllRecipients()\n    return recipients\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const split = useSplit(\"0x1234...\");\n+ const split = useContract(\"0x1234...\", \"split\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useSplit.ts#L35"
		},
		{
			"kind": "function",
			"name": "useStorage",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the configured "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebStorage"
								},
								{
									"type": "text",
									"value": " instance"
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (ThirdwebStorage<IpfsUploadBatchOptions>)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The "
									},
									{
										"type": "inlineCode",
										"value": "storageInterface"
									},
									{
										"type": "text",
										"value": " configured on the "
									},
									{
										"type": "inlineCode",
										"value": "ThirdwebProvider"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usestorage?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/storage/index.ts#L10"
		},
		{
			"kind": "function",
			"name": "useStorageUpload",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook used to upload any files or JSON data to decentralized storage systems like IPFS,\nusing the "
								},
								{
									"type": "inlineCode",
									"value": "storageInterface"
								},
								{
									"type": "text",
									"value": " configured on the "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "uploadOptions",
							"type": "T",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseMutationResult<string[], unknown, StorageUploadOptions<T>, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "Function used to upload files or JSON to decentralized storage systems"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "T",
							"extendsType": "UploadOptions",
							"defaultType": "IpfsUploadBatchOptions"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "import { useStorageUpload } from \"@thirdweb-dev/react\";\n\nexport default function Component() {\n  const { mutateAsync: upload, isLoading } = useStorageUpload();\n\n  async function uploadData() {\n    const filesToUpload = [...];\n    const uris = await upload({ data: files });\n    console.log(uris);\n  }\n\n  return (\n    <button onClick={uploadData}>\n      Upload\n    </button>\n  )\n}"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usestorageupload?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/storage/useStorageUpload.ts#L40"
		},
		{
			"kind": "function",
			"name": "useSupportedChains",
			"signatures": [
				{
					"returns": {
						"type": "Chain[]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useSupportedChains.ts#L5"
		},
		{
			"kind": "function",
			"name": "useSupportedWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "id",
							"type": "string"
						}
					],
					"returns": {
						"type": "WalletConfig"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useSupportedWallet.ts#L3"
		},
		{
			"kind": "function",
			"name": "useSwitchAccount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to switch the account of the active wallet"
								}
							]
						}
					],
					"returns": {
						"type": "{ isLoading: boolean; switchAccount: UseMutateAsyncFunction<void, unknown, string, unknown> }",
						"summary": [
							{
								"type": "list",
								"ordered": false,
								"start": null,
								"spread": false,
								"children": [
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "A function to invoke to switch account."
													}
												]
											}
										]
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useswitchaccount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/useSwitchAccount.ts#L14"
		},
		{
			"kind": "function",
			"name": "useSwitchChain",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(chain: number) => Promise<void>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a method to connect the wallet to network/chain with given chainId"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L187"
		},
		{
			"kind": "function",
			"name": "useThirdwebAuthContext",
			"signatures": [
				{
					"returns": {
						"type": "(undefined) | (ThirdwebAuthContext)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L44"
		},
		{
			"kind": "function",
			"name": "useThirdwebConnectedWalletContext",
			"signatures": [
				{
					"returns": {
						"type": "ThirdwebConnectedWalletContext"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-wallet.tsx#L120"
		},
		{
			"kind": "function",
			"name": "useToken",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of a "
								},
								{
									"type": "inlineCode",
									"value": "Token"
								},
								{
									"type": "text",
									"value": " contract. This contract supports ERC20 compliant tokens."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Token contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Token)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token\")\n\n  // Now you can use the token contract in the rest of the component\n\n  // For example, this function will get the connected wallets token balance\n  async function balance() {\n    const balance = await contract.balance()\n    return balance\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const token = useToken(\"0x1234...\");\n+ const token = useContract(\"0x1234...\", \"token\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useToken.ts#L35"
		},
		{
			"kind": "function",
			"name": "useTokenBalance",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get token balance for a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "walletAddress",
							"type": "RequiredParam<string>"
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the balance of the address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: balance, isLoading, error } = useTokenBalance(contract, \"{{wallet_address}}\");"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetokenbalance?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L75"
		},
		{
			"kind": "function",
			"name": "useTokenDecimals",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get token decimals"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<number, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the decimals of the ERC20 token"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: decimals, isLoading, error } = useTokenDecimals(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetokendecimals?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L111"
		},
		{
			"kind": "function",
			"name": "useTokenDrop",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of a "
								},
								{
									"type": "inlineCode",
									"value": "Token Drop"
								},
								{
									"type": "text",
									"value": " contract."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Token Drop contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (TokenDrop)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token-drop\")\n\n  // Now you can use the token drop contract in the rest of the component\n\n  // For example, this function will get the connected wallets token balance\n  async function balance() {\n    const balance = await contract.balance()\n    return balance\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const token = useTokenDrop(\"0x1234...\");\n+ const token = useContract(\"0x1234...\", \"token-drop\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useTokenDrop.ts#L35"
		},
		{
			"kind": "function",
			"name": "useTokenSupply",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the total supply for this token"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<{  }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the total minted supply"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: totalSupply, isLoading, error } = useTokenSupply(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetokensupply?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L44"
		},
		{
			"kind": "function",
			"name": "useTotalCirculatingSupply",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get total minted supply count"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<NFTContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "tokenId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "required for ERC1155, the tokenId to look up"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the total minted supply"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Supply | ERC1155Enumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetotalcirculatingsupply?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L184"
		},
		{
			"kind": "function",
			"name": "useTotalCount",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get total supply count"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the total count of NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: count, isLoading, error } = useTotalCount(contract);"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721Supply | ERC1155Enumerable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetotalcount?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L136"
		},
		{
			"kind": "function",
			"name": "useTransferBatchToken",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Airdrop tokens to a list of wallets"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, TokenParams[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to transfer batch tokens"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferBatchTokens,\n    isLoading,\n    error,\n  } = useTransferToken(contract);\n\n  if (error) {\n    console.error(\"failed to transfer batch tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferBatchTokens([{ to: \"{{wallet_address}}\", amount: 1000 }, { to: \"{{wallet_address}}\", amount: 2000 }])}\n    >\n      Airdrop\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetransferbatchtoken?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L359"
		},
		{
			"kind": "function",
			"name": "useTransferNFT",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Transfer an NFT"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1043",
											"children": [
												{
													"type": "text",
													"value": "NFTContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{ data: () => Promise<unknown>; receipt: providers.TransactionReceipt }, \"data\">, unknown, TransferNFTParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to transfer NFTs"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TContract",
							"extendsType": "NFTContract"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferNFT,\n    isLoading,\n    error,\n  } = useTransferNFT(contract);\n\n  if (error) {\n    console.error(\"failed to transfer NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferNFT({\n        to: \"{{wallet_address}}\",\n        tokenId: 2\n      })}\n    >\n      Transfer\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721 | ERC1155"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetransfernft?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/nft.ts#L534"
		},
		{
			"kind": "function",
			"name": "useTransferToken",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Transfer tokens to a specific wallet"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<TokenContract>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "1044",
											"children": [
												{
													"type": "text",
													"value": "TokenContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, TokenParams, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to transfer tokens"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferTokens,\n    isLoading,\n    error,\n  } = useTransferToken(contract);\n\n  if (error) {\n    console.error(\"failed to transfer tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n    >\n      Transfer\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC20"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usetransfertoken?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/token.ts#L300"
		},
		{
			"kind": "function",
			"name": "useUnclaimedNFTSupply",
			"signatures": [
				{
					"summary": [],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<(null) | (NFTDrop) | (SignatureDrop) | (SmartContract<BaseContract>)>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<BigNumber, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the number of NFTs that are unclaimed"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721LazyMintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useunclaimednftsupply?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L119"
		},
		{
			"kind": "function",
			"name": "useUnclaimedNFTs",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all unclaimed NFTs"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<NFTDrop>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)"
										}
									]
								}
							]
						},
						{
							"name": "queryParams",
							"type": "{  }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "query params to pass to the query for the sake of pagination"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<NFT[]>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of NFTs that are unclaimed"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "ERC721LazyMintable"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useunclaimednfts?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/drop.ts#L56"
		},
		{
			"kind": "function",
			"name": "useUpdateMetadata",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the metadata of this contract"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<any, any, any>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to update the metadata"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateMetadata,\n    isLoading,\n    error,\n  } = useUpdateMetadata(contract);\n\n  if (error) {\n    console.error(\"failed to update metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateMetadata({\n       name: \"My Contract\",\n       description: \"This is my contract\"\n      })}\n    >\n      Update Contract Metadata\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useupdatemetadata?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L387"
		},
		{
			"kind": "function",
			"name": "useUpdatePlatformFees",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the platform fee recipient and basis points"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<Omit<{  }, \"data\">, unknown, { fee_recipient: string; platform_fee_basis_points: number }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to update the platform fees settings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updatePlatformFees,\n    isLoading,\n    error,\n  } = useUpdatePlatformFees(contract);\n\n  if (error) {\n    console.error(\"failed to update platform fees\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePlatformFees({ updatePayload: { fee_recipient: \"{{wallet_address}}\", platform_fee_basis_points: 5_00 } })}\n    >\n      Update Platform fees\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PlatformFee"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useupdateplatformfees?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L289"
		},
		{
			"kind": "function",
			"name": "useUpdatePrimarySaleRecipient",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the primary sale recipient"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<{ receipt: providers.TransactionReceipt }, unknown, string, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to update the primary sales recipient"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updatePrimarySalesRecipient,\n    isLoading,\n    error,\n  } = useUpdatePrimarySaleRecipient(contract);\n\n  if (error) {\n    console.error(\"failed to update recipient\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePrimarySalesRecipient({ newRecipient: \"{{wallet_address}}\" })}\n    >\n      Update Recipient\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "PrimarySale"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useupdateprimarysalerecipient?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L92"
		},
		{
			"kind": "function",
			"name": "useUpdateRoyaltySettings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Set the royalty recipient and fee"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<ValidContractInstance>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a "
										},
										{
											"type": "link",
											"title": null,
											"url": "undefined",
											"children": [
												{
													"type": "text",
													"value": "SmartContract"
												}
											]
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseMutationResult<{  }, unknown, { fee_recipient: string; seller_fee_basis_points: number }, unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a mutation object that can be used to update the royalty settings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "jsx",
									"meta": null,
									"value": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateRoyaltySettings,\n    isLoading,\n    error,\n  } = useUpdateRoyaltySettings(contract);\n\n  if (error) {\n    console.error(\"failed to update royalty settings\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateRoyaltySettings({ updatePayload: { fee_recipient: \"{{wallet_address}}\", seller_fee_basis_points: 5_00 } })}\n    >\n      Update Royalty Settings\n    </button>\n  );\n};"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Royalty"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useupdateroyaltysettings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contract-settings.ts#L193"
		},
		{
			"kind": "function",
			"name": "useUser",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to get the currently logged in user."
								}
							]
						}
					],
					"returns": {
						"type": "{ isLoading: boolean; isLoggedIn: boolean; user: (undefined) | (UserWithData<TData, TContext>) }",
						"summary": [
							{
								"type": "list",
								"ordered": false,
								"start": null,
								"spread": false,
								"children": [
									{
										"type": "listItem",
										"spread": false,
										"checked": null,
										"children": [
											{
												"type": "paragraph",
												"children": [
													{
														"type": "text",
														"value": "The currently logged in user or null if not logged in, as well as a loading state."
													}
												]
											}
										]
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "TData",
							"extendsType": "Json",
							"defaultType": "Json"
						},
						{
							"name": "TContext",
							"extendsType": "Json",
							"defaultType": "Json"
						}
					],
					"blockTags": [
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.useuser?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/useUser.ts#L23"
		},
		{
			"kind": "function",
			"name": "useValidDirectListings",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all valid direct listings"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<DirectListingV3[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of direct listings"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: validDirectListings, isLoading, error } = useValidDirectListings(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "DirectListings"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usevaliddirectlistings?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L233"
		},
		{
			"kind": "function",
			"name": "useValidEnglishAuctions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get all valid english auctions"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<MarketplaceV3>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace v3 contract"
										}
									]
								}
							]
						},
						{
							"name": "filter",
							"type": "MarketplaceFilter",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "filter to pass to the query for the sake of pagination & filtering"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "UseQueryResult<EnglishAuction[], unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes an array of english auctions"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const { data: validEnglishAuctions, isLoading, error } = useValidEnglishAuctions(contract, { start: 0, count: 100 });"
								}
							]
						},
						{
							"tag": "@twfeature",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "EnglishAuctions"
										}
									]
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usevalidenglishauctions?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L303"
		},
		{
			"kind": "function",
			"name": "useVote",
			"signatures": [
				{
					"flags": {
						"isPublic": true
					},
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook for getting an instance of an "
								},
								{
									"type": "inlineCode",
									"value": "Vote"
								},
								{
									"type": "text",
									"value": " contract. This contract enables fully featured voting-based decentralized governance systems."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contractAddress",
							"type": "RequiredParam<string>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the address of the Vote contract, found in your thirdweb dashboard"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (Vote)"
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"vote\")\n\n  // Now you can use the vote contract in the rest of the component\n\n  // For example, this function will get all the proposals on this contract\n  async function getProposals() {\n    const proposals = await contract.getAll()\n    return proposals\n  }\n\n  ...\n}"
								}
							]
						},
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "This hook is deprecated and will be removed in a future major version. You should use "
										},
										{
											"type": "link",
											"title": null,
											"url": "335",
											"children": [
												{
													"type": "text",
													"value": "useContract"
												}
											]
										},
										{
											"type": "text",
											"value": " instead."
										}
									]
								},
								{
									"type": "code",
									"lang": "diff",
									"meta": null,
									"value": "- const vote = useVote(\"0x1234...\");\n+ const vote = useContract(\"0x1234...\", \"vote\").contract;"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/contracts/useVote.ts#L35"
		},
		{
			"kind": "function",
			"name": "useWallet",
			"signatures": [
				{
					"summary": [],
					"parameters": [
						{
							"name": "walletId",
							"type": "T"
						}
					],
					"returns": {
						"type": "(WalletIdToWalletTypeMap[T]) | (undefined)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the current active wallet instance"
									}
								]
							}
						]
					},
					"typeParameters": [
						{
							"name": "T",
							"extendsType": "WalletId"
						}
					],
					"blockTags": []
				},
				{
					"returns": {
						"type": "(WalletInstance) | (undefined)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L57"
		},
		{
			"kind": "function",
			"name": "useWalletConfig",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "(undefined) | (WalletConfig)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "the current active wallet's configuration object"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L89"
		},
		{
			"kind": "function",
			"name": "useWalletConnectHandler",
			"signatures": [
				{
					"returns": {
						"type": "(undefined) | (WalletConnectHandler)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/providers/thirdweb-wallet-provider.tsx#L621"
		},
		{
			"kind": "function",
			"name": "useWallets",
			"signatures": [
				{
					"summary": [],
					"returns": {
						"type": "WalletConfig[]",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "inlineCode",
										"value": "supportedWallets"
									},
									{
										"type": "text",
										"value": " configured in the "
									},
									{
										"type": "inlineCode",
										"value": "<ThirdwebProvider/>"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/hooks/wallet-hooks.ts#L102"
		},
		{
			"kind": "function",
			"name": "useWatchTransactions",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook that listens to transactions on a given chain for a given address."
								}
							]
						},
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "import { useWatchTransactions } from \"@thirdweb-dev/react\""
						}
					],
					"parameters": [
						{
							"name": "watchTransactionParams",
							"type": "UseWatchTransactionsParams"
						}
					],
					"returns": {
						"type": "Transaction[]",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "an array of [Transaction]([object Object]) objects"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "js",
									"meta": null,
									"value": "const transactions = useWatchTransactions({\n address: \"0x1234\",\n network: \"ethereum\",\n});"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useTransactions.ts#L29"
		},
		{
			"kind": "function",
			"name": "useWinningBid",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Get the winning bid for an auction"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "contract",
							"type": "RequiredParam<Marketplace>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "an instance of a marketplace contract"
										}
									]
								}
							]
						},
						{
							"name": "listingId",
							"type": "RequiredParam<BigNumberish>",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "the listing id to check"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "UseQueryResult<(undefined) | (Offer), unknown>",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "a response object that includes the "
									},
									{
										"type": "link",
										"title": null,
										"url": "undefined",
										"children": [
											{
												"type": "text",
												"value": "Offer"
											}
										]
									},
									{
										"type": "text",
										"value": " that is winning the auction"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "const listingId = 0;\nconst { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);"
								}
							]
						},
						{
							"tag": "@see",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "link",
											"title": null,
											"url": "https://portal.thirdweb.com/react/react.usewinningbid?utm_source=sdk",
											"children": [
												{
													"type": "text",
													"value": "Documentation"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/marketplace.ts#L456"
		}
	],
	"variables": [
		{
			"kind": "variable",
			"name": "compilerMetadata",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L124",
			"type": "{ cacheKey: (contractAddress: RequiredParam<string>, chainId: RequiredParam<SUPPORTED_CHAIN_ID>) => QueryKey; fetchQuery: (contractAddress: RequiredParam<string>, sdk: RequiredParam<ThirdwebSDK>) => (Promise<PublishedMetadata>) | (null); useQuery: (contractAddress: RequiredParam<string>) => UseQueryResult<(PublishedMetadata) | (null)> }",
			"typeDeclaration": [
				{
					"kind": "function",
					"name": "cacheKey",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								},
								{
									"name": "chainId",
									"type": "RequiredParam<SUPPORTED_CHAIN_ID>"
								}
							],
							"returns": {
								"type": "QueryKey"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L125"
				},
				{
					"kind": "function",
					"name": "fetchQuery",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								},
								{
									"name": "sdk",
									"type": "RequiredParam<ThirdwebSDK>"
								}
							],
							"returns": {
								"type": "(Promise<PublishedMetadata>) | (null)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L92"
				},
				{
					"kind": "function",
					"name": "useQuery",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								}
							],
							"returns": {
								"type": "UseQueryResult<(PublishedMetadata) | (null)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L107"
				}
			],
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "contractType",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L76",
			"type": "{ cacheKey: (contractAddress: RequiredParam<string>, chainId: RequiredParam<SUPPORTED_CHAIN_ID>) => QueryKey; fetchQuery: (contractAddress: RequiredParam<string>, sdk: RequiredParam<ThirdwebSDK>) => Promise<(null) | (\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\")>; useQuery: (contractAddress: RequiredParam<string>) => UseQueryResult<(null) | (\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\"), unknown> }",
			"typeDeclaration": [
				{
					"kind": "function",
					"name": "cacheKey",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								},
								{
									"name": "chainId",
									"type": "RequiredParam<SUPPORTED_CHAIN_ID>"
								}
							],
							"returns": {
								"type": "QueryKey"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L77"
				},
				{
					"kind": "function",
					"name": "fetchQuery",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								},
								{
									"name": "sdk",
									"type": "RequiredParam<ThirdwebSDK>"
								}
							],
							"returns": {
								"type": "Promise<(null) | (\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\")>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L43"
				},
				{
					"kind": "function",
					"name": "useQuery",
					"signatures": [
						{
							"parameters": [
								{
									"name": "contractAddress",
									"type": "RequiredParam<string>"
								}
							],
							"returns": {
								"type": "UseQueryResult<(null) | (\"split\") | (\"edition-drop\") | (\"edition\") | (\"marketplace\") | (\"marketplace-v3\") | (\"multiwrap\") | (\"nft-collection\") | (\"nft-drop\") | (\"pack\") | (\"signature-drop\") | (\"token-drop\") | (\"token\") | (\"vote\") | (\"custom\"), unknown>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L59"
				}
			],
			"flags": {
				"isConst": true
			}
		}
	],
	"types": [
		{
			"kind": "type",
			"name": "ISecureStorage",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L3",
			"type": "{getItem : (key: string) => Promise<(null) | (string)>,removeItem : (key: string) => Promise<void>,setItem : (key: string, value: string) => Promise<void>}",
			"typeDeclaration": [
				{
					"kind": "function",
					"name": "getItem",
					"signatures": [
						{
							"parameters": [
								{
									"name": "key",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<(null) | (string)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L4"
				},
				{
					"kind": "function",
					"name": "removeItem",
					"signatures": [
						{
							"parameters": [
								{
									"name": "key",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L6"
				},
				{
					"kind": "function",
					"name": "setItem",
					"signatures": [
						{
							"parameters": [
								{
									"name": "key",
									"type": "string"
								},
								{
									"name": "value",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L5"
				}
			]
		},
		{
			"kind": "type",
			"name": "ThirdwebAuthConfig",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The configuration to use the react SDK with an "
						},
						{
							"type": "link",
							"title": null,
							"url": "https://portal.thirdweb.com/auth",
							"children": [
								{
									"type": "text",
									"value": "auth"
								}
							]
						},
						{
							"type": "text",
							"value": " server."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/contexts/thirdweb-auth.tsx#L13",
			"type": "{authUrl : string,domain : string,secureStorage : ISecureStorage}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "authUrl",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The backend URL of the authentication endoints. For example, if your endpoints are\nat "
								},
								{
									"type": "inlineCode",
									"value": "/api/auth/login"
								},
								{
									"type": "text",
									"value": ", "
								},
								{
									"type": "inlineCode",
									"value": "/api/auth/logout"
								},
								{
									"type": "text",
									"value": ", etc. then this should be set to "
								},
								{
									"type": "inlineCode",
									"value": "/api/auth"
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "domain",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The frontend domain used to generate the login payload.\nThis domain should match the domain used on your auth backend."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "secureStorage",
					"type": "ISecureStorage",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Secure storage to use for storing the auth token when using JWT tokens."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Do not use a storage option that stores values accessible outside\nyour application (like localStorage on web environments) since you may\nbe exposing your auth token to malicious actors."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "** By default auth uses cookies so no need to set this unless you want to specifically use JWT tokens **"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ThirdwebProviderCoreProps",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The possible props for the ThirdwebProvider."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/providers/thirdweb-provider.tsx#L23",
			"typeParameters": [
				{
					"name": "TChains",
					"extendsType": "Chain[]"
				}
			],
			"type": "{activeChain : (Chain) | (number & {  }) | (string & {  }) | (TChains[number][\"chainId\"]) | (TChains[number][\"slug\"]),authConfig : ThirdwebAuthConfig,autoConnect : boolean,autoConnectTimeout : number,autoSwitch : boolean,clientId : string,createWalletStorage : CreateAsyncStorage,dAppMeta : DAppMetaData,queryClient : QueryClient,sdkOptions : Omit<(undefined) | ({  }), \"chains\">,secretKey : string,signerWallet : WalletConfig<SignerWallet>,storageInterface : IThirdwebStorage,supportedChains : TChains,supportedWallets : WalletConfig[],theme : (\"light\") | (\"dark\")}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "activeChain",
					"type": "(Chain) | (number & {  }) | (string & {  }) | (TChains[number][\"chainId\"]) | (TChains[number][\"slug\"])",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The activeChain prop determines which chain you want your app to be operating on."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "There are 1000+ chains available in the "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/chains"
								},
								{
									"type": "text",
									"value": " package. Import the chain you want and pass it to the "
								},
								{
									"type": "inlineCode",
									"value": "activeChain"
								},
								{
									"type": "text",
									"value": " prop."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can override the imported object or pass a custom chain object with required properties."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "authConfig",
					"type": "ThirdwebAuthConfig",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The configuration object for setting up "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://portal.thirdweb.com/auth",
									"children": [
										{
											"type": "text",
											"value": "Auth"
										}
									]
								},
								{
									"type": "text",
									"value": "; allowing users to sign in with their wallet."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "autoConnect",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether or not to attempt auto-connect to a wallet."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "autoConnectTimeout",
					"type": "number",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Timeout for auto-connecting wallet in milliseconds"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If wallet fails to connect in this time, it will stop trying to connect and user will have to manually connect"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "15000"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "autoSwitch",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Whether or not to automatically switch to wallet's network to active chain"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "clientId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The clientId prop is required to use the thirdweb infrastructure services with the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can get a client ID by creating an API key on "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://thirdweb.com/dashboard/settings/api-keys",
									"children": [
										{
											"type": "text",
											"value": "thirdweb dashboard"
										}
									]
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "createWalletStorage",
					"type": "CreateAsyncStorage"
				},
				{
					"kind": "subtype",
					"name": "dAppMeta",
					"type": "DAppMetaData",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Metadata to pass to wallet connect and walletlink wallet connect. (Used to show "
								},
								{
									"type": "emphasis",
									"children": [
										{
											"type": "text",
											"value": "which"
										}
									]
								},
								{
									"type": "text",
									"value": " dApp is being connected to in mobile wallets that support it)\nDefaults to just the name being passed as "
								},
								{
									"type": "inlineCode",
									"value": "thirdweb powered dApp"
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "queryClient",
					"type": "QueryClient"
				},
				{
					"kind": "subtype",
					"name": "sdkOptions",
					"type": "Omit<(undefined) | ({  }), \"chains\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This Overrides any of the default values for the SDK. If not provided, it uses sensible defaults."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "secretKey",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "secretKey for thirdweb services\nThis is only required if server side rendering is being used."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "signerWallet",
					"type": "WalletConfig<SignerWallet>"
				},
				{
					"kind": "subtype",
					"name": "storageInterface",
					"type": "IThirdwebStorage",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Override the default "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://portal.thirdweb.com/storage",
									"children": [
										{
											"type": "text",
											"value": "Storage"
										}
									]
								},
								{
									"type": "text",
									"value": " interface used by the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "It allows you to create an instance of "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebStorage"
								},
								{
									"type": "text",
									"value": " with your own customized config, and pass it to the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "emphasis",
									"children": [
										{
											"type": "text",
											"value": "This requires the "
										},
										{
											"type": "inlineCode",
											"value": "@thirdweb-dev/storage"
										},
										{
											"type": "text",
											"value": " package to be installed."
										}
									]
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport {\n  ThirdwebStorage,\n  StorageDownloader,\n  IpfsUploader,\n} from \"@thirdweb-dev/storage\";\n\n// Configure a custom ThirdwebStorage instance\nconst gatewayUrls = {\n  \"ipfs://\": [\n    \"https://gateway.ipfscdn.io/ipfs/\",\n    \"https://cloudflare-ipfs.com/ipfs/\",\n    \"https://ipfs.io/ipfs/\",\n  ],\n};\nconst downloader = new StorageDownloader();\nconst uploader = new IpfsUploader();\nconst storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n\n// Provide the custom storage instance to the SDK\nfunction MyApp() {\n  return (\n    <ThirdwebSDKProvider\n      storageInterface={storage}\n    >\n      <YourApp />\n    </ThirdwebSDKProvider>\n  );\n}"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "supportedChains",
					"type": "TChains",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "An array of chains supported by your app.\nThere are 1000+ chains available in the "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/chains"
								},
								{
									"type": "text",
									"value": " package. You can import the chain you want and pass it to the "
								},
								{
									"type": "inlineCode",
									"value": "supportedChains"
								},
								{
									"type": "text",
									"value": " prop in an array."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If not provided, it will default to the default supported chains supported by the thirdweb SDK."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n\nfunction Example() {\n return (\n   <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n      <App />\n   </ThirdwebSDKProvider>\n )\n}"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "supportedWallets",
					"type": "WalletConfig[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "An array of wallets that the dApp supports\nIf not provided, will default to Metamask (injected), Coinbase wallet and Device wallet"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "You can Import the wallets you want to support from "
										},
										{
											"type": "inlineCode",
											"value": "@thirdweb-dev/wallets"
										},
										{
											"type": "text",
											"value": " and pass them to "
										},
										{
											"type": "inlineCode",
											"value": "supportedWallets"
										}
									]
								},
								{
									"type": "code",
									"lang": "jsx",
									"meta": "title=\"App.jsx\"",
									"value": "import { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"light\") | (\"dark\")"
				}
			]
		},
		{
			"kind": "type",
			"name": "ThirdwebSDKProviderProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/providers/types.ts#L8",
			"typeParameters": [
				{
					"name": "TChains",
					"extendsType": "Chain[]"
				}
			],
			"type": "{activeChain : (Chain) | (number & {  }) | (string & {  }) | (TChains[number][\"chainId\"]) | (TChains[number][\"slug\"]),authConfig : ThirdwebAuthConfig,clientId : string,queryClient : QueryClient,sdkOptions : Omit<(undefined) | ({  }), \"chains\">,secretKey : string,signer : Signer,storageInterface : IThirdwebStorage,supportedChains : TChains}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "activeChain",
					"type": "(Chain) | (number & {  }) | (string & {  }) | (TChains[number][\"chainId\"]) | (TChains[number][\"slug\"])",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The activeChain prop determines which chain you want your app to be operating on."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "There are 1000+ chains available in the "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/chains"
								},
								{
									"type": "text",
									"value": " package. Import the chain you want and pass it to the "
								},
								{
									"type": "inlineCode",
									"value": "activeChain"
								},
								{
									"type": "text",
									"value": " prop."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can override the imported object or pass a custom chain object with required properties."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "authConfig",
					"type": "ThirdwebAuthConfig",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The configuration object for setting up "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://portal.thirdweb.com/auth",
									"children": [
										{
											"type": "text",
											"value": "Auth"
										}
									]
								},
								{
									"type": "text",
									"value": "; allowing users to sign in with their wallet."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "clientId",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The clientId prop is required to use the thirdweb infrastructure services with the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can get a client ID by creating an API key on "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://thirdweb.com/dashboard/settings/api-keys",
									"children": [
										{
											"type": "text",
											"value": "thirdweb dashboard"
										}
									]
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "queryClient",
					"type": "QueryClient"
				},
				{
					"kind": "subtype",
					"name": "sdkOptions",
					"type": "Omit<(undefined) | ({  }), \"chains\">",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This Overrides any of the default values for the SDK. If not provided, it uses sensible defaults."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "secretKey",
					"type": "string",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "secretKey for thirdweb services\nThis is only required if server side rendering is being used."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "signer",
					"type": "Signer",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "A signer is an abstraction of an Ethereum Account, which can be used to sign messages and initiate transactions."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Since the ThirdwebSDKProvider is used when you want to provide your own wallet connection logic, you will need to provide a signer prop to inform the SDK of the wallet you want to use to sign transactions."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Libraries such as ethers.js, web3.js, wagmi, etc. all provide ways to get a signer."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "To use this signer with the SDK, pass it to the "
								},
								{
									"type": "inlineCode",
									"value": "signer"
								},
								{
									"type": "text",
									"value": " prop. If the signer is connected, the SDK will use this wallet to sign transactions for all write operations on the blockchain."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "storageInterface",
					"type": "IThirdwebStorage",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Override the default "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://portal.thirdweb.com/storage",
									"children": [
										{
											"type": "text",
											"value": "Storage"
										}
									]
								},
								{
									"type": "text",
									"value": " interface used by the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "It allows you to create an instance of "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebStorage"
								},
								{
									"type": "text",
									"value": " with your own customized config, and pass it to the SDK."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "emphasis",
									"children": [
										{
											"type": "text",
											"value": "This requires the "
										},
										{
											"type": "inlineCode",
											"value": "@thirdweb-dev/storage"
										},
										{
											"type": "text",
											"value": " package to be installed."
										}
									]
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport {\n  ThirdwebStorage,\n  StorageDownloader,\n  IpfsUploader,\n} from \"@thirdweb-dev/storage\";\n\n// Configure a custom ThirdwebStorage instance\nconst gatewayUrls = {\n  \"ipfs://\": [\n    \"https://gateway.ipfscdn.io/ipfs/\",\n    \"https://cloudflare-ipfs.com/ipfs/\",\n    \"https://ipfs.io/ipfs/\",\n  ],\n};\nconst downloader = new StorageDownloader();\nconst uploader = new IpfsUploader();\nconst storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n\n// Provide the custom storage instance to the SDK\nfunction MyApp() {\n  return (\n    <ThirdwebSDKProvider\n      storageInterface={storage}\n    >\n      <YourApp />\n    </ThirdwebSDKProvider>\n  );\n}"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "supportedChains",
					"type": "TChains",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "An array of chains supported by your app.\nThere are 1000+ chains available in the "
								},
								{
									"type": "inlineCode",
									"value": "@thirdweb-dev/chains"
								},
								{
									"type": "text",
									"value": " package. You can import the chain you want and pass it to the "
								},
								{
									"type": "inlineCode",
									"value": "supportedChains"
								},
								{
									"type": "text",
									"value": " prop in an array."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If not provided, it will default to the default supported chains supported by the thirdweb SDK."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n\nfunction Example() {\n return (\n   <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n      <App />\n   </ThirdwebSDKProvider>\n )\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "UserWithData",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/auth/useUser.ts#L8",
			"typeParameters": [
				{
					"name": "TData",
					"extendsType": "Json",
					"defaultType": "Json"
				},
				{
					"name": "TContext",
					"extendsType": "Json",
					"defaultType": "Json"
				}
			],
			"type": "{address : string,data : TData,session : TContext}",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "address",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "data",
					"type": "TData"
				},
				{
					"kind": "subtype",
					"name": "session",
					"type": "TContext"
				}
			]
		},
		{
			"kind": "type",
			"name": "AcceptDirectOffer",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L231",
			"type": "{ addressOfOfferor: string; listingId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "addressOfOfferor",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "AirdropNFTParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params to pass to "
						},
						{
							"type": "inlineCode",
							"value": "useTransferBatchNFT"
						},
						{
							"type": "text",
							"value": "."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L124",
			"type": "{ addresses: AirdropInput; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "addresses",
					"type": "AirdropInput"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "BurnNFTParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "750",
							"children": [
								{
									"type": "text",
									"value": "useBurnNFT"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L162",
			"type": "{ amount: Amount; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "amount",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "BuyNowParams",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L239",
			"typeParameters": [
				{
					"name": "TListingType",
					"defaultType": "ListingType"
				}
			],
			"type": "TListingType extends ListingType.Direct ? { buyAmount: BigNumberish; buyForWallet: WalletAddress; id: BigNumberish; type: ListingType.Direct } : { id: BigNumberish; type: ListingType.Auction }"
		},
		{
			"kind": "type",
			"name": "Chain",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L43",
			"type": "{ blockExplorers: { name: string; url: string }[]; id: number; name: AddEthereumChainParameter[\"chainName\"]; nativeCurrency: AddEthereumChainParameter[\"nativeCurrency\"]; rpcUrls: AddEthereumChainParameter[\"rpcUrls\"]; testnet: boolean }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "blockExplorers",
					"type": "{ name: string; url: string }[]"
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "number"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "AddEthereumChainParameter[\"chainName\"]"
				},
				{
					"kind": "subtype",
					"name": "nativeCurrency",
					"type": "AddEthereumChainParameter[\"nativeCurrency\"]"
				},
				{
					"kind": "subtype",
					"name": "rpcUrls",
					"type": "AddEthereumChainParameter[\"rpcUrls\"]"
				},
				{
					"kind": "subtype",
					"name": "testnet",
					"type": "boolean"
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimIneligibilityParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The options to be passed as the second parameter to the "
						},
						{
							"type": "link",
							"title": null,
							"url": "240",
							"children": [
								{
									"type": "text",
									"value": "useClaimIneligibilityReasons"
								}
							]
						},
						{
							"type": "text",
							"value": " hook."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L34",
			"type": "{ quantity: (string) | (number); walletAddress: WalletAddress }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "(string) | (number)"
				},
				{
					"kind": "subtype",
					"name": "walletAddress",
					"type": "WalletAddress"
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimNFTParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "422",
							"children": [
								{
									"type": "text",
									"value": "useClaimNFT"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L205",
			"type": "{ options: ClaimOptions; quantity: BigNumberish; to: WalletAddress; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "options",
					"type": "ClaimOptions"
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "tokenId is only used for ERC1155 tokens"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "ClaimNFTReturnType",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The return type of the "
						},
						{
							"type": "link",
							"title": null,
							"url": "422",
							"children": [
								{
									"type": "text",
									"value": "useClaimNFT"
								}
							]
						},
						{
							"type": "text",
							"value": " hook."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L219",
			"type": "(Awaited<ReturnType<Erc721[\"claimTo\"]>>) | (Awaited<ReturnType<Erc1155[\"claimTo\"]>>)"
		},
		{
			"kind": "type",
			"name": "ClaimTokenParams",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L260",
			"type": "{ amount: Amount; checkERC20Allowance: boolean; to: WalletAddress }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "amount",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "checkERC20Allowance",
					"type": "boolean"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				}
			]
		},
		{
			"kind": "type",
			"name": "ConnectUIProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L57",
			"typeParameters": [
				{
					"name": "I",
					"extendsType": "WalletInstance",
					"defaultType": "WalletInstance"
				}
			],
			"type": "{ connected: () => void; goBack: () => void; hide: () => void; isOpen: boolean; modalSize: (\"compact\") | (\"wide\"); onLocallyConnected: (walleInstance: WalletInstance) => void; selectionData: any; setSelectionData: (data: any) => void; show: () => void; supportedWallets: WalletConfig[]; theme: (\"dark\") | (\"light\"); walletConfig: WalletConfig<I> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "connected",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "goBack",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "hide",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "isOpen",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "indicates whether the connect wallet modal is open or not"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "modalSize",
					"type": "(\"compact\") | (\"wide\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Size of the modal"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is always "
								},
								{
									"type": "inlineCode",
									"value": "compact"
								},
								{
									"type": "text",
									"value": " on React Native"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "onLocallyConnected",
					"type": "(walleInstance: WalletInstance) => void"
				},
				{
					"kind": "subtype",
					"name": "selectionData",
					"type": "any",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "selectionData passed from "
								},
								{
									"type": "inlineCode",
									"value": "selectUI"
								},
								{
									"type": "text",
									"value": "'s "
								},
								{
									"type": "inlineCode",
									"value": "onSelect"
								},
								{
									"type": "text",
									"value": " function"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "setSelectionData",
					"type": "(data: any) => void"
				},
				{
					"kind": "subtype",
					"name": "show",
					"type": "() => void"
				},
				{
					"kind": "subtype",
					"name": "supportedWallets",
					"type": "WalletConfig[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "List of all supported wallets including your wallet."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"dark\") | (\"light\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "theme of the connect wallet modal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "walletConfig",
					"type": "WalletConfig<I>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "inlineCode",
									"value": "WalletConfig"
								},
								{
									"type": "text",
									"value": " object of your wallet"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "you can use this to connect to your wallet"
								}
							]
						},
						{
							"type": "heading",
							"depth": 3,
							"children": [
								{
									"type": "text",
									"value": "1. Using "
								},
								{
									"type": "inlineCode",
									"value": "useConnect"
								},
								{
									"type": "text",
									"value": " hook"
								}
							]
						},
						{
							"type": "code",
							"lang": "ts",
							"meta": null,
							"value": " const connect = useConnect();\n\n // call this function to connect to your wallet\n async function handleConnect() {\n   await connect(walletConfig, options);\n }\n"
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "OR"
								}
							]
						},
						{
							"type": "heading",
							"depth": 3,
							"children": [
								{
									"type": "text",
									"value": "2. Manually creating wallet instance and connecting"
								}
							]
						},
						{
							"type": "code",
							"lang": "ts",
							"meta": null,
							"value": "const createWalletInstance = useCreateWalletInstance();\nconst setConnectedWallet = useSetConnectedWallet();\nconst setConnectionStatus = useSetConnectionStatus();\n\n// call this function to connect to your wallet\nasync function handleConnect() {\n  // create instance\n  const walletInstance = createWalletInstance(walletConfig);\n  // connect wallet\n  setConnectionStatus('connecting);\n  try {\n    await walletInstance.connect(options);\n    // set connected wallet\n    setConnectedWallet(walletInstance);\n  } catch {\n    setConnectionStatus('disconnected');\n }\n}"
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "DelayedRevealLazyMintInput",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "434",
							"children": [
								{
									"type": "text",
									"value": "useDelayedRevealLazyMint"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L186",
			"type": "{ metadatas: NFTMetadataInput[]; password: string; placeholder: NFTMetadataInput }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "metadatas",
					"type": "NFTMetadataInput[]"
				},
				{
					"kind": "subtype",
					"name": "password",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "placeholder",
					"type": "NFTMetadataInput"
				}
			]
		},
		{
			"kind": "type",
			"name": "DropContract",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The possible DROP contract types."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L169",
			"type": "(NFTDrop) | (EditionDrop) | (SignatureDrop) | (TokenDrop) | (SmartContract) | (null)"
		},
		{
			"kind": "type",
			"name": "Erc721OrErc1155",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "Possible NFT contract types."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L110",
			"type": "(Erc721) | (Erc1155)"
		},
		{
			"kind": "type",
			"name": "ExecuteAuctionSale",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L235",
			"type": "{ listingId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "ExtraCoreWalletOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L5",
			"type": "{ chain: Chain }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "chain",
					"type": "Chain"
				}
			]
		},
		{
			"kind": "type",
			"name": "MakeBidParams",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L225",
			"type": "{ bid: Price; listingId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "bid",
					"type": "Price"
				},
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "MakeOfferParams",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L226",
			"type": "{ listingId: BigNumberish; pricePerToken: Price; quantity: Amount }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "listingId",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "pricePerToken",
					"type": "Price"
				},
				{
					"kind": "subtype",
					"name": "quantity",
					"type": "Amount"
				}
			]
		},
		{
			"kind": "type",
			"name": "MintNFTParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "730",
							"children": [
								{
									"type": "text",
									"value": "useMintNFT"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L142",
			"type": "{ metadata: NFTMetadataOrUri; supply: Amount; to: WalletAddress }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "metadata",
					"type": "NFTMetadataOrUri"
				},
				{
					"kind": "subtype",
					"name": "supply",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				}
			]
		},
		{
			"kind": "type",
			"name": "MintNFTReturnType",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The return type of the "
						},
						{
							"type": "link",
							"title": null,
							"url": "730",
							"children": [
								{
									"type": "text",
									"value": "useMintNFT"
								}
							]
						},
						{
							"type": "text",
							"value": " hook."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L152",
			"typeParameters": [
				{
					"name": "TContract"
				}
			],
			"type": "TContract extends Erc721 ? Awaited<ReturnType<Erc721Mintable[\"to\"]>> : TContract extends Erc1155 ? Awaited<ReturnType<Erc1155Mintable[\"to\"]>> : never"
		},
		{
			"kind": "type",
			"name": "MintNFTSupplyParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params to pass to "
						},
						{
							"type": "inlineCode",
							"value": "useMintNFTSupply"
						},
						{
							"type": "text",
							"value": "."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L132",
			"type": "{ additionalSupply: Amount; to: WalletAddress; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "additionalSupply",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "NFTContract",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The possible NFT contract types."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const { contract } = useContract(\"{{contract_address}}\");"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L91",
			"type": "(NFTCollection) | (Edition) | (Pack) | (Multiwrap) | (Exclude<DropContract, \"TokenDrop\">)"
		},
		{
			"kind": "type",
			"name": "RevealLazyMintInput",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "442",
							"children": [
								{
									"type": "text",
									"value": "useRevealLazyMint"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L196",
			"type": "{ batchId: BigNumberish; password: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "batchId",
					"type": "BigNumberish"
				},
				{
					"kind": "subtype",
					"name": "password",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "RevealableContract",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The possible revealable contract types."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L180",
			"type": "(NFTDrop) | (SignatureDrop) | (SmartContract) | (null)"
		},
		{
			"kind": "type",
			"name": "SelectUIProps",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L162",
			"typeParameters": [
				{
					"name": "I",
					"extendsType": "WalletInstance",
					"defaultType": "WalletInstance"
				}
			],
			"type": "{ modalSize: (\"compact\") | (\"wide\"); onSelect: (selectionData: any) => void; supportedWallets: WalletConfig[]; theme: (\"dark\") | (\"light\"); walletConfig: WalletConfig<I> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "modalSize",
					"type": "(\"compact\") | (\"wide\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Size of the modal"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is always "
								},
								{
									"type": "inlineCode",
									"value": "compact"
								},
								{
									"type": "text",
									"value": " on React Native"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "onSelect",
					"type": "(selectionData: any) => void"
				},
				{
					"kind": "subtype",
					"name": "supportedWallets",
					"type": "WalletConfig[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "List of all supported wallets including your wallet."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "You can use this to conditionally render UI based on how many wallets are supported.\nFor example: You can render a larger UI if only one wallet (your wallet) is supported."
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "theme",
					"type": "(\"dark\") | (\"light\")",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "theme of the connect wallet modal"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "walletConfig",
					"type": "WalletConfig<I>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "inlineCode",
									"value": "WalletConfig"
								},
								{
									"type": "text",
									"value": " object of your wallet"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "you can use this get metadata of your wallet by doing "
								},
								{
									"type": "inlineCode",
									"value": "walletConfig.meta"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "SetClaimConditionsParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params for the "
						},
						{
							"type": "link",
							"title": null,
							"url": "250",
							"children": [
								{
									"type": "text",
									"value": "useSetClaimConditions"
								}
							]
						},
						{
							"type": "text",
							"value": " hook mutation."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/claim-conditions.ts#L45",
			"type": "{ phases: ClaimConditionInput[]; reset: boolean }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "phases",
					"type": "ClaimConditionInput[]"
				},
				{
					"kind": "subtype",
					"name": "reset",
					"type": "boolean"
				}
			]
		},
		{
			"kind": "type",
			"name": "TokenBurnParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The parameters to pass to the burn function."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L78",
			"type": "{ amount: Amount }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "amount",
					"type": "Amount"
				}
			]
		},
		{
			"kind": "type",
			"name": "TokenContract",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The possible Token contract types."
						}
					]
				}
			],
			"blockTags": [
				{
					"tag": "@example",
					"summary": [
						{
							"type": "code",
							"lang": "javascript",
							"meta": null,
							"value": "const { contract } = useContract(\"{{contract_address}}\");"
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L105",
			"type": "(TokenDrop) | (Token) | (SmartContract) | (null)"
		},
		{
			"kind": "type",
			"name": "TokenParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The parameters to pass to the mint and transfer functions."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L69",
			"type": "{ amount: Amount; to: WalletAddress }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "amount",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				}
			]
		},
		{
			"kind": "type",
			"name": "TransferNFTParams",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "The params to pass to "
						},
						{
							"type": "inlineCode",
							"value": "useTransferNFT"
						},
						{
							"type": "text",
							"value": "."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L115",
			"type": "{ amount: Amount; to: WalletAddress; tokenId: BigNumberish }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "amount",
					"type": "Amount"
				},
				{
					"kind": "subtype",
					"name": "to",
					"type": "WalletAddress"
				},
				{
					"kind": "subtype",
					"name": "tokenId",
					"type": "BigNumberish"
				}
			]
		},
		{
			"kind": "type",
			"name": "UseContractResult",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/async/contracts.ts#L141",
			"typeParameters": [
				{
					"name": "TContract",
					"extendsType": "ValidContractInstance",
					"defaultType": "SmartContract"
				}
			],
			"type": "UseQueryResult<(TContract) | (undefined)> & { contract: (TContract) | (undefined) }"
		},
		{
			"kind": "type",
			"name": "UseWatchTransactionsParams",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/hooks/useTransactions.ts#L8",
			"type": "Partial<Omit<WatchTransactionsParams, \"onTransactions\">> & { limit: number }"
		},
		{
			"kind": "type",
			"name": "WalletAddress",
			"summary": [
				{
					"type": "paragraph",
					"children": [
						{
							"type": "text",
							"value": "A wallet address."
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/types.ts#L58",
			"type": "AddressOrEns"
		},
		{
			"kind": "type",
			"name": "WalletClass",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L13",
			"typeParameters": [
				{
					"name": "I",
					"extendsType": "WalletInstance",
					"defaultType": "WalletInstance"
				}
			],
			"type": "{ (options: WalletOptions) : I ; id: string; meta: typeof AbstractClientWallet[\"meta\"] }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "id",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "meta",
					"type": "typeof AbstractClientWallet[\"meta\"]"
				}
			]
		},
		{
			"kind": "type",
			"name": "WalletConfig",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L19",
			"typeParameters": [
				{
					"name": "I",
					"extendsType": "WalletInstance",
					"defaultType": "WalletInstance"
				}
			],
			"type": "{ category: (\"socialLogin\") | (\"walletLogin\"); connectUI: React.FC<ConnectUIProps<I>>; create: (options: WalletOptions) => I; id: string; isHeadless: boolean; isInstalled: () => boolean; meta: typeof AbstractClientWallet[\"meta\"]; personalWallets: WalletConfig[]; recommended: boolean; selectUI: React.FC<SelectUIProps<I>> }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "category",
					"type": "(\"socialLogin\") | (\"walletLogin\")"
				},
				{
					"kind": "subtype",
					"name": "connectUI",
					"type": "React.FC<ConnectUIProps<I>>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "UI for connecting wallet"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "create",
					"type": "(options: WalletOptions) => I"
				},
				{
					"kind": "subtype",
					"name": "id",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "isHeadless",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If the wallet can sign transactions without user interaction, set this to true."
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "isInstalled",
					"type": "() => boolean"
				},
				{
					"kind": "subtype",
					"name": "meta",
					"type": "typeof AbstractClientWallet[\"meta\"]"
				},
				{
					"kind": "subtype",
					"name": "personalWallets",
					"type": "WalletConfig[]",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "An array of "
								},
								{
									"type": "inlineCode",
									"value": "WalletConfig"
								},
								{
									"type": "text",
									"value": " that users can use as a personal wallet to connect to your wallet"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This is only required if your wallet requires a personal wallet to be connected such as a Safe Wallet or Smart Wallet"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "providing the "
								},
								{
									"type": "inlineCode",
									"value": "personalWallets"
								},
								{
									"type": "text",
									"value": " ensures that autoconnect and ConnectWallet modal works properly for your wallet."
								}
							]
						},
						{
							"type": "list",
							"ordered": false,
							"start": null,
							"spread": false,
							"children": [
								{
									"type": "listItem",
									"spread": false,
									"checked": null,
									"children": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "autoconnect will connect the last connected personal wallet first and then connect your wallet"
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"spread": false,
									"checked": null,
									"children": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "ConnectWallet modal will reopen once the personal wallet is connected so that you can render UI for connecting your wallet as the next step"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "recommended",
					"type": "boolean",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "If true, this wallet will be tagged as \"recommended\" in ConnectWallet Modal and will be shown at the top of the list"
								}
							]
						}
					],
					"blockTags": [
						{
							"tag": "@defaultValue",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "false"
								}
							]
						}
					]
				},
				{
					"kind": "subtype",
					"name": "selectUI",
					"type": "React.FC<SelectUIProps<I>>",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "UI for selecting wallet - this UI is rendered in the wallet selection screen"
								}
							]
						}
					]
				}
			]
		},
		{
			"kind": "type",
			"name": "WalletInstance",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L11",
			"type": "AbstractClientWallet"
		},
		{
			"kind": "type",
			"name": "WalletOptions",
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/core/types/wallet.ts#L9",
			"type": "WalletOptions_<ExtraCoreWalletOptions>"
		}
	],
	"components": [
		{
			"kind": "function",
			"name": "ThirdwebSDKProvider",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebSDKProvider"
								},
								{
									"type": "text",
									"value": " is used when you want to provide your own wallet connection logic and just use the thirdweb SDK to interact with smart contracts and the blockchain.\nThis means you can use everything in the SDK except for wallet connection-related components and hooks. if you need those please use the "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								},
								{
									"type": "text",
									"value": " instead."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "inlineCode",
									"value": "ThirdwebSDKProvider"
								},
								{
									"type": "text",
									"value": " allows you to set a provider & signer to the Thirdweb SDK."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "PropsWithChildren<ThirdwebSDKProviderProps<TChains>>"
						}
					],
					"returns": {
						"type": "Element"
					},
					"typeParameters": [
						{
							"name": "TChains",
							"extendsType": "Chain[]"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Wrap your app in the ThirdwebSDKProvider to access the SDK’s functionality from anywhere in your app."
										}
									]
								},
								{
									"type": "code",
									"lang": "tsx",
									"meta": null,
									"value": "import { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\nimport { ethers } from \"ethers\";\n\n// Example shows how to get the signer from the injected provider ( wallet extension )\nfunction Example() {\n return (\n   <ThirdwebSDKProvider\n     activeChain=\"ethereum\"\n     clientId=\"YOUR_CLIENT_ID\"\n     signer={new ethers.providers.Web3Provider(window.ethereum).getSigner()}\n   >\n     <App />\n   </ThirdwebSDKProvider>\n )\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/0fbd3c6f3/packages/react-core/src/evm/providers/thirdweb-sdk-provider.tsx#L183"
		}
	]
}
