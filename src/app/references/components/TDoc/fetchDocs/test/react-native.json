{
	"meta": {
		"typedocBetterJsonVersion": "0.3.2-next"
	},
	"functions": [
		{
			"kind": "function",
			"name": "ImageSvgUri",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "{ height: number, imageAlt: string, imageUrl: string, width: number }"
						}
					],
					"returns": {
						"type": "(null) | (Element)"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/ImageSvgUri.tsx#L8"
		},
		{
			"kind": "function",
			"name": "coinbaseWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "{ callbackURL: URL, recommended: boolean }",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ config: (undefined) | ({ callbackURL: URL, recommended: boolean }), create: ((options : WalletOptions) => CoinbaseWallet), id: \"coinbase\", meta: { iconURL: string, name: string }, recommended: (undefined) | (boolean) }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L69"
		},
		{
			"kind": "function",
			"name": "createAsyncLocalStorage",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Returns a new instance of AsyncLocalStorage"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "name",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Name to namespace the storage with"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "AsyncLocalStorage",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "A new instance of AsyncLocalStorage"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/AsyncStorage.ts#L79"
		},
		{
			"kind": "function",
			"name": "createLocalStorage",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Returns a new instance of LocalStorage"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "name",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Name to namespace the storage with"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "LocalStorage",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "A new instance of LocalStorage"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/AsyncStorage.ts#L89"
		},
		{
			"kind": "function",
			"name": "createSecureStorage",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Returns a new instance of SecureStorage implemented by Expo SecureStore"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "name",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Name to namespace the storage with"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "SecureStorage",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "A new instance of SecureStorage"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/SecureStorage.ts#L37"
		},
		{
			"kind": "function",
			"name": "darkTheme",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ButtonTheme & DeepPartial<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }>"
						}
					],
					"returns": {
						"type": "{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/styles/theme.ts#L51"
		},
		{
			"kind": "function",
			"name": "embeddedWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "EmbeddedWalletConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<EmbeddedWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/embedded-wallet.tsx#L25"
		},
		{
			"kind": "function",
			"name": "en",
			"signatures": [
				{
					"parameters": [
						{
							"name": "locale",
							"type": "DeepPartial<{ common: { amount: string, approve: string, connect_app: string, continue: string, error_switching_network: string, fetching: string, from: string, import: string, learn_more: string, next: string, or: string, password: string, receive: string, reject: string, send: string, switch_network: string, to: string, unknown_network: string, username: string }, connect_wallet: { label: string }, connect_wallet_details: { additional_actions: string, address_copied_clipboard: string, backup: string, backup_personal_wallet: string, backup_wallet: string, by_connecting_you_agree: string, confirm_in_wallet: string, connect: string, connect_a_wallet: string, connect_to_app: string, connected_to_smart_wallet: string, continue_as_guest: string, copy_address_or_scan: string, current_network: string, get_started: string, guest: string, import_wallet: string, network_mismatch: string, new_to_wallets: string, no_supported_chains_detected: string, no_tokens_found: string, privacy_policy: string, qr_code: string, receive_funds: string, recommended: string, request_testnet_funds: string, search_or_paste_token: string, select_network: string, select_token: string, send_funds: string, send_to: string, switch_to: string, tos: string, view_transaction_history: string, your_address: string }, connecting_wallet: { connecting_through_pop_up: string, connecting_your_wallet: string, creating_encrypting: string }, embedded_wallet: { backup_your_account: string, enter_account_recovery_code: string, enter_your_email: string, forgot_password: string, request_new_code: string, sign_in: string, sign_in_google: string }, local_wallet: { application_can_authorize_transactions: string, backup_your_wallet: string, create_new_wallet: string, double_check_password: string, error_accessing_file: string, guest_wallet: string, private_key_mnemonic: string, private_key_mnemonic_placeholder: string, this_is_a_temporary_wallet: string, this_will_download_json: string, wallet_address: string }, smart_wallet: { connecting: string, network_mismatch: string, switch_to_personal: string, switch_to_smart: string }, wallet_connect: { no_results_found: string, search_wallets: string } }>",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ common: { amount: string, approve: string, connect_app: string, continue: string, error_switching_network: string, fetching: string, from: string, import: string, learn_more: string, next: string, or: string, password: string, receive: string, reject: string, send: string, switch_network: string, to: string, unknown_network: string, username: string }, connect_wallet: { label: string }, connect_wallet_details: { additional_actions: string, address_copied_clipboard: string, backup: string, backup_personal_wallet: string, backup_wallet: string, by_connecting_you_agree: string, confirm_in_wallet: string, connect: string, connect_a_wallet: string, connect_to_app: string, connected_to_smart_wallet: string, continue_as_guest: string, copy_address_or_scan: string, current_network: string, get_started: string, guest: string, import_wallet: string, network_mismatch: string, new_to_wallets: string, no_supported_chains_detected: string, no_tokens_found: string, privacy_policy: string, qr_code: string, receive_funds: string, recommended: string, request_testnet_funds: string, search_or_paste_token: string, select_network: string, select_token: string, send_funds: string, send_to: string, switch_to: string, tos: string, view_transaction_history: string, your_address: string }, connecting_wallet: { connecting_through_pop_up: string, connecting_your_wallet: string, creating_encrypting: string }, embedded_wallet: { backup_your_account: string, enter_account_recovery_code: string, enter_your_email: string, forgot_password: string, request_new_code: string, sign_in: string, sign_in_google: string }, local_wallet: { application_can_authorize_transactions: string, backup_your_wallet: string, create_new_wallet: string, double_check_password: string, error_accessing_file: string, guest_wallet: string, private_key_mnemonic: string, private_key_mnemonic_placeholder: string, this_is_a_temporary_wallet: string, this_will_download_json: string, wallet_address: string }, smart_wallet: { connecting: string, network_mismatch: string, switch_to_personal: string, switch_to_smart: string }, wallet_connect: { no_results_found: string, search_wallets: string } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/i18n/strings.ts#L15"
		},
		{
			"kind": "function",
			"name": "formatWalletConnectDisplayUri",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Build a WalletConnect display URI from a wc:// uri + a wallet specific link"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "uri",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The wc:// uri"
										}
									]
								}
							]
						},
						{
							"name": "links",
							"type": "{ native: string, universal: string }",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The wallet specific links"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "string",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The WalletConnect display URI"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/uri.ts#L11"
		},
		{
			"kind": "function",
			"name": "getValidPublicRPCUrl",
			"signatures": [
				{
					"parameters": [
						{
							"name": "chain",
							"type": "Chain"
						}
					],
					"returns": {
						"type": "string[]"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/uri.ts#L25"
		},
		{
			"kind": "function",
			"name": "isEnsName",
			"signatures": [
				{
					"parameters": [
						{
							"name": "name",
							"type": "string"
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/addresses.ts#L41"
		},
		{
			"kind": "function",
			"name": "isPossibleEVMAddress",
			"signatures": [
				{
					"parameters": [
						{
							"name": "address",
							"type": "string",
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "ignoreEns",
							"type": "boolean",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "boolean"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/addresses.ts#L46"
		},
		{
			"kind": "function",
			"name": "lightTheme",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ButtonTheme & DeepPartial<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }>"
						}
					],
					"returns": {
						"type": "{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/styles/theme.ts#L70"
		},
		{
			"kind": "function",
			"name": "localWallet",
			"signatures": [
				{
					"returns": {
						"type": "{ create: ((options : {}) => LocalWallet), id: string, meta: { iconURL: string, name: string } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/local-wallet.tsx#L6"
		},
		{
			"kind": "function",
			"name": "magicLink",
			"signatures": [
				{
					"parameters": [
						{
							"name": "magicLinkOptions",
							"type": "MagicLinkOptions & { recommended: boolean }"
						}
					],
					"returns": {
						"type": "WalletConfig<MagicLink>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/magic-link.tsx#L24"
		},
		{
			"kind": "function",
			"name": "magicWallet",
			"signatures": [
				{
					"summary": [],
					"parameters": [
						{
							"name": "magicLinkOptions",
							"type": "MagicLinkOptions & { recommended: boolean }"
						}
					],
					"returns": {
						"type": "WalletConfig<MagicLink>"
					},
					"blockTags": [
						{
							"tag": "@deprecated",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Use "
										},
										{
											"type": "inlineCode",
											"value": "magicLink()"
										},
										{
											"type": "text",
											"value": " instead"
										}
									]
								},
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Renamed for consistency with our React package"
										}
									]
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/magic-link.tsx#L182"
		},
		{
			"kind": "function",
			"name": "metamaskWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "WalletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ create: ((options : WalletOptions) => MetaMaskWallet), id: \"metamask\", meta: { iconURL: string, links: { native: string, universal: string }, name: string }, recommended: (undefined) | (boolean) }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/metamask-wallet.ts#L24"
		},
		{
			"kind": "function",
			"name": "rainbowWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "WalletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ create: ((options : WalletOptions) => RainbowWallet), id: \"rainbow\", meta: { iconURL: string, links: { native: string, universal: string }, name: string }, recommended: (undefined) | (boolean) }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/rainbow-wallet.ts#L25"
		},
		{
			"kind": "function",
			"name": "setLocale",
			"signatures": [
				{
					"parameters": [
						{
							"name": "locale",
							"type": "Locale"
						}
					],
					"returns": {
						"type": "{ common: { amount: string, approve: string, connect_app: string, continue: string, error_switching_network: string, fetching: string, from: string, import: string, learn_more: string, next: string, or: string, password: string, receive: string, reject: string, send: string, switch_network: string, to: string, unknown_network: string, username: string }, connect_wallet: { label: string }, connect_wallet_details: { additional_actions: string, address_copied_clipboard: string, backup: string, backup_personal_wallet: string, backup_wallet: string, by_connecting_you_agree: string, confirm_in_wallet: string, connect: string, connect_a_wallet: string, connect_to_app: string, connected_to_smart_wallet: string, continue_as_guest: string, copy_address_or_scan: string, current_network: string, get_started: string, guest: string, import_wallet: string, network_mismatch: string, new_to_wallets: string, no_supported_chains_detected: string, no_tokens_found: string, privacy_policy: string, qr_code: string, receive_funds: string, recommended: string, request_testnet_funds: string, search_or_paste_token: string, select_network: string, select_token: string, send_funds: string, send_to: string, switch_to: string, tos: string, view_transaction_history: string, your_address: string }, connecting_wallet: { connecting_through_pop_up: string, connecting_your_wallet: string, creating_encrypting: string }, embedded_wallet: { backup_your_account: string, enter_account_recovery_code: string, enter_your_email: string, forgot_password: string, request_new_code: string, sign_in: string, sign_in_google: string }, local_wallet: { application_can_authorize_transactions: string, backup_your_wallet: string, create_new_wallet: string, double_check_password: string, error_accessing_file: string, guest_wallet: string, private_key_mnemonic: string, private_key_mnemonic_placeholder: string, this_is_a_temporary_wallet: string, this_will_download_json: string, wallet_address: string }, smart_wallet: { connecting: string, network_mismatch: string, switch_to_personal: string, switch_to_smart: string }, wallet_connect: { no_results_found: string, search_wallets: string } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/i18n/strings.ts#L4"
		},
		{
			"kind": "function",
			"name": "shortenIfAddress",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "This function shortens an address if it is a valid EVM address."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "address",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The address to shorten"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "extraShort",
							"type": "true",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "If true, show the first 4 and last 3 characters"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "string",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The shortened address"
									}
								]
							}
						]
					},
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "const address = shortenIfAddress(\"0x1234567890123456789012345678901234567890\", true); // result will be \"0x1234...890\""
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/addresses.ts#L31"
		},
		{
			"kind": "function",
			"name": "shortenWalletAddress",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Shortens an EVM compatible address to show the first 6 and last 4 characters"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "str",
							"type": "string",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The address to shorten"
										}
									]
								}
							],
							"flags": {
								"isOptional": true
							}
						},
						{
							"name": "extraShort",
							"type": "boolean",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "If true, show the first 4 and last 3 characters"
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "(undefined) | (string)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "The shortened address"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/utils/addresses.ts#L10"
		},
		{
			"kind": "function",
			"name": "smartWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "wallet",
							"type": "WalletConfig<any>"
						},
						{
							"name": "config",
							"type": "SmartWalletConfig"
						}
					],
					"returns": {
						"type": "WalletConfig<SmartWallet>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/smart-wallet.tsx#L7"
		},
		{
			"kind": "function",
			"name": "trustWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "WalletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "{ create: ((options : WalletOptions) => TrustWallet), id: \"trust\", meta: { iconURL: string, links: { native: string, universal: string }, name: string }, recommended: (undefined) | (boolean) }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/trust-wallet.ts#L23"
		},
		{
			"kind": "function",
			"name": "walletConnect",
			"signatures": [
				{
					"parameters": [
						{
							"name": "config",
							"type": "WalletConnectConfig",
							"flags": {
								"isOptional": true
							}
						}
					],
					"returns": {
						"type": "WalletConfig<WalletConnect>"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/wallet-connect.tsx#L12"
		}
	],
	"hooks": [
		{
			"kind": "function",
			"name": "useAppTheme",
			"signatures": [
				{
					"returns": {
						"type": "{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/styles/hooks.ts#L4"
		},
		{
			"kind": "function",
			"name": "useCoinbaseWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Hook to connect to the Coinbase wallet."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "const connect = useCoinbaseWallet('org.reactjs.native.example.test15://');\nconnect();"
								}
							]
						}
					],
					"parameters": [
						{
							"name": "callbackURL",
							"type": "URL",
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "The Universal Link used by Coinbase Wallet to return responses to your application."
										}
									]
								}
							]
						}
					],
					"returns": {
						"type": "((connectOptions : { chainId: number }) => Promise<CoinbaseWallet>)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "connect function to connect to the Coinbase wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/hooks/useCoinbaseWallet.ts#L14"
		},
		{
			"kind": "function",
			"name": "useMetaMaskWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "const connect = useMetaMaskWallet();\nconnect();"
								}
							]
						}
					],
					"returns": {
						"type": "((connectOptions : { chainId: number }) => Promise<MetaMaskWallet>)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "connect function to connect to the MetaMask wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/hooks/useMetaMaskWallet.ts#L10"
		},
		{
			"kind": "function",
			"name": "useRainbowWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "const connect = useRainbowWallet();\nconnect();"
								}
							]
						}
					],
					"returns": {
						"type": "((connectOptions : { chainId: number }) => Promise<RainbowWallet>)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "connect function to connect to the Rainbow wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/hooks/useRainbowWallet.ts#L10"
		},
		{
			"kind": "function",
			"name": "useTrustWallet",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "const connect = useTrustWallet();\nconnect();"
								}
							]
						}
					],
					"returns": {
						"type": "((connectOptions : { chainId: number }) => Promise<TrustWallet>)",
						"summary": [
							{
								"type": "paragraph",
								"children": [
									{
										"type": "text",
										"value": "connect function to connect to the Trust wallet"
									}
								]
							}
						]
					},
					"blockTags": []
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/hooks/useTrustWallet.ts#L10"
		}
	],
	"variables": [
		{
			"kind": "variable",
			"name": "COINBASE_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L98",
			"type": "\"<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"48\" height=\"48\" rx=\"8\" fill=\"#0555FF\"/>\n<g clip-path=\"url(#clip0_3303_8634)\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.3312 4H35.6672C40.2704 4 44 8.0128 44 12.9632V35.0368C44 39.9872 40.2704 44 35.6688 44H12.3312C7.7296 44 4 39.9872 4 35.0368V12.9632C4 8.0128 7.7296 4 12.3312 4Z\" fill=\"#0052FF\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.0003 9.79346C31.8467 9.79346 38.2067 16.1535 38.2067 23.9999C38.2067 31.8463 31.8467 38.2063 24.0003 38.2063C16.1539 38.2063 9.79395 31.8463 9.79395 23.9999C9.79395 16.1535 16.1539 9.79346 24.0003 9.79346Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.5006 19.459H27.4974C28.0734 19.459 28.539 19.9614 28.539 20.579V27.419C28.539 28.0382 28.0718 28.539 27.4974 28.539H20.5006C19.9246 28.539 19.459 28.0366 19.459 27.419V20.579C19.459 19.9614 19.9262 19.459 20.5006 19.459Z\" fill=\"#0052FF\"/>\n</g>\n<defs>\n<clipPath id=\"clip0_3303_8634\">\n<rect width=\"40\" height=\"40\" fill=\"white\" transform=\"translate(4 4)\"/>\n</clipPath>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "EMAIL_WALLET_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L21",
			"type": "\"<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\">\n<g clip-path=\"url(#clip0_3589_8649)\">\n<rect width=\"48\" height=\"48\" rx=\"8\" fill=\"url(#paint0_linear_3589_8649)\"/>\n<rect x=\"-1\" y=\"-1\" width=\"50\" height=\"50\" rx=\"9.8\" fill=\"url(#paint1_linear_3589_8649)\"/>\n<g clip-path=\"url(#clip1_3589_8649)\">\n<path d=\"M24 14.25C18.6172 14.25 14.25 18.6172 14.25 24C14.25 29.3828 18.6172 33.75 24 33.75C24.8988 33.75 25.625 34.4762 25.625 35.375C25.625 36.2738 24.8988 37 24 37C16.8195 37 11 31.1805 11 24C11 16.8195 16.8195 11 24 11C31.1805 11 37 16.8195 37 24V25.625C37 28.3164 34.8164 30.5 32.125 30.5C30.6371 30.5 29.3016 29.8297 28.4078 28.7785C27.25 29.8449 25.7012 30.5 24 30.5C20.4098 30.5 17.5 27.5902 17.5 24C17.5 20.4098 20.4098 17.5 24 17.5C25.4168 17.5 26.727 17.952 27.7934 18.7238C28.0828 18.4699 28.4586 18.3125 28.875 18.3125C29.7738 18.3125 30.5 19.0387 30.5 19.9375V25.625C30.5 26.5238 31.2262 27.25 32.125 27.25C33.0238 27.25 33.75 26.5238 33.75 25.625V24C33.75 18.6172 29.3828 14.25 24 14.25ZM27.25 24C27.25 23.138 26.9076 22.3114 26.2981 21.7019C25.6886 21.0924 24.862 20.75 24 20.75C23.138 20.75 22.3114 21.0924 21.7019 21.7019C21.0924 22.3114 20.75 23.138 20.75 24C20.75 24.862 21.0924 25.6886 21.7019 26.2981C22.3114 26.9076 23.138 27.25 24 27.25C24.862 27.25 25.6886 26.9076 26.2981 26.2981C26.9076 25.6886 27.25 24.862 27.25 24Z\" fill=\"white\"/>\n</g>\n</g>\n<defs>\n<linearGradient id=\"paint0_linear_3589_8649\" x1=\"25.5\" y1=\"-6.29572e-06\" x2=\"30.2016\" y2=\"47.535\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#8358BA\"/>\n<stop offset=\"1\" stop-color=\"#7B1CF7\"/>\n</linearGradient>\n<linearGradient id=\"paint1_linear_3589_8649\" x1=\"25.5625\" y1=\"-1.00001\" x2=\"30.46\" y2=\"48.5156\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#8358BA\"/>\n<stop offset=\"1\" stop-color=\"#7B1CF7\"/>\n</linearGradient>\n<clipPath id=\"clip0_3589_8649\">\n<rect width=\"48\" height=\"48\" rx=\"8\" fill=\"white\"/>\n</clipPath>\n<clipPath id=\"clip1_3589_8649\">\n<rect width=\"26\" height=\"26\" fill=\"white\" transform=\"translate(11 11)\"/>\n</clipPath>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "GOOGLE_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L1",
			"type": "\"<svg height={height} viewBox=\"0 0 24 24\" width={width}>\n<path\n  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n  fill=\"#4285F4\"\n/>\n<path\n  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n  fill=\"#34A853\"\n/>\n<path\n  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n  fill=\"#FBBC05\"\n/>\n<path\n  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n  fill=\"#EA4335\"\n/>\n<path d=\"M1 1h22v22H1z\" fill=\"none\" />\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "LOCAL_WALLET_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L74",
			"type": "\"<svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\">\n<rect width=\"48\" height=\"48\" rx=\"7.2\" fill=\"url(#paint0_linear_4221_3214)\"/>\n<rect width=\"48\" height=\"48\" rx=\"7.2\" fill=\"url(#paint1_linear_4221_3214)\"/>\n<path d=\"M16.5 39C15.675 39 14.9685 38.7327 14.3805 38.1982C13.7925 37.6636 13.499 37.0218 13.5 36.2727V11.7273C13.5 10.9773 13.794 10.335 14.382 9.80046C14.97 9.26591 15.676 8.99909 16.5 9H31.5C32.325 9 33.0315 9.26728 33.6195 9.80182C34.2075 10.3364 34.501 10.9782 34.5 11.7273V36.2727C34.5 37.0227 34.206 37.665 33.618 38.1995C33.03 38.7341 32.324 39.0009 31.5 39H16.5ZM24 35.5909C24.425 35.5909 24.7815 35.46 25.0695 35.1982C25.3575 34.9364 25.501 34.6127 25.5 34.2273C25.5 33.8409 25.356 33.5168 25.068 33.255C24.78 32.9932 24.424 32.8627 24 32.8636C23.575 32.8636 23.2185 32.9945 22.9305 33.2564C22.6425 33.5182 22.499 33.8418 22.5 34.2273C22.5 34.6136 22.644 34.9377 22.932 35.1995C23.22 35.4614 23.576 35.5918 24 35.5909ZM16.5 24.4545C16.5 27.216 18.7386 29.4545 21.5 29.4545H26.5C29.2614 29.4545 31.5 27.216 31.5 24.4545V20.8182C31.5 18.0568 29.2614 15.8182 26.5 15.8182H21.5C18.7386 15.8182 16.5 18.0568 16.5 20.8182V24.4545Z\" fill=\"black\"/>\n<path d=\"M16.5 39C15.675 39 14.9685 38.7327 14.3805 38.1982C13.7925 37.6636 13.499 37.0218 13.5 36.2727V11.7273C13.5 10.9773 13.794 10.335 14.382 9.80046C14.97 9.26591 15.676 8.99909 16.5 9H31.5C32.325 9 33.0315 9.26728 33.6195 9.80182C34.2075 10.3364 34.501 10.9782 34.5 11.7273V36.2727C34.5 37.0227 34.206 37.665 33.618 38.1995C33.03 38.7341 32.324 39.0009 31.5 39H16.5ZM24 35.5909C24.425 35.5909 24.7815 35.46 25.0695 35.1982C25.3575 34.9364 25.501 34.6127 25.5 34.2273C25.5 33.8409 25.356 33.5168 25.068 33.255C24.78 32.9932 24.424 32.8627 24 32.8636C23.575 32.8636 23.2185 32.9945 22.9305 33.2564C22.6425 33.5182 22.499 33.8418 22.5 34.2273C22.5 34.6136 22.644 34.9377 22.932 35.1995C23.22 35.4614 23.576 35.5918 24 35.5909ZM16.5 24.4545C16.5 27.216 18.7386 29.4545 21.5 29.4545H26.5C29.2614 29.4545 31.5 27.216 31.5 24.4545V20.8182C31.5 18.0568 29.2614 15.8182 26.5 15.8182H21.5C18.7386 15.8182 16.5 18.0568 16.5 20.8182V24.4545Z\" fill=\"url(#paint2_linear_4221_3214)\"/>\n<rect x=\"16.5\" y=\"12\" width=\"15\" height=\"24\" rx=\"2.25\" fill=\"#B70FAF\"/>\n<rect x=\"19.5\" y=\"13.5\" width=\"9\" height=\"3\" rx=\"1.5\" fill=\"#F8F5FF\"/>\n<defs>\n<linearGradient id=\"paint0_linear_4221_3214\" x1=\"25.5\" y1=\"-6.29572e-06\" x2=\"30.2016\" y2=\"47.535\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#8358BA\"/>\n<stop offset=\"0.422496\" stop-color=\"#803FD4\"/>\n<stop offset=\"1\" stop-color=\"#7B1CF7\"/>\n</linearGradient>\n<linearGradient id=\"paint1_linear_4221_3214\" x1=\"22.5\" y1=\"-1.36904e-07\" x2=\"22.5\" y2=\"53.25\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#D311AA\"/>\n<stop offset=\"1\" stop-color=\"#8409B7\"/>\n</linearGradient>\n<linearGradient id=\"paint2_linear_4221_3214\" x1=\"24\" y1=\"9\" x2=\"24\" y2=\"39\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"white\"/>\n<stop offset=\"1\" stop-color=\"#E1D8FB\"/>\n</linearGradient>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "METAMASK_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L117",
			"type": "\"<svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"#FFE6CE\"/>\n<path d=\"M64.9712 14.179L43.2903 30.2817L47.2996 20.7814L64.9712 14.179Z\" fill=\"#E2761B\" stroke=\"#E2761B\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M14.9198 14.179L36.4264 30.4343L32.6132 20.7814L14.9198 14.179ZM57.1704 51.5051L51.3961 60.3518L63.751 63.751L67.3027 51.7012L57.1704 51.5051ZM12.6319 51.7012L16.1619 63.751L28.5167 60.3518L22.7424 51.5051L12.6319 51.7012Z\" fill=\"#E4761B\" stroke=\"#E4761B\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M27.8194 36.5572L24.3766 41.765L36.6444 42.3097L36.2086 29.1268L27.8194 36.5572ZM52.0716 36.5572L43.5735 28.9743L43.2903 42.3097L55.5362 41.765L52.0716 36.5572ZM28.5167 60.3517L35.8817 56.7564L29.5191 51.7883L28.5167 60.3517ZM44.0093 56.7564L51.3961 60.3517L50.372 51.7883L44.0093 56.7564Z\" fill=\"#E4761B\" stroke=\"#E4761B\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M51.3961 60.3517L44.0093 56.7564L44.5977 61.572L44.5323 63.5984L51.3961 60.3517ZM28.5167 60.3517L35.3805 63.5984L35.337 61.572L35.8817 56.7564L28.5167 60.3517Z\" fill=\"#D7C1B3\" stroke=\"#D7C1B3\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M35.4895 48.607L29.3447 46.7984L33.6809 44.8156L35.4895 48.607ZM44.4015 48.607L46.2101 44.8156L50.5681 46.7984L44.4015 48.607Z\" fill=\"#233447\" stroke=\"#233447\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M28.5167 60.3517L29.5626 51.505L22.7424 51.7011L28.5167 60.3517ZM50.3502 51.505L51.3961 60.3517L57.1704 51.7011L50.3502 51.505ZM55.5362 41.765L43.2903 42.3097L44.4233 48.607L46.2319 44.8155L50.5899 46.7984L55.5362 41.765ZM29.3447 46.7984L33.7027 44.8155L35.4895 48.607L36.6443 42.3097L24.3766 41.765L29.3447 46.7984Z\" fill=\"#CD6116\" stroke=\"#CD6116\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M24.3766 41.765L29.5191 51.7883L29.3447 46.7984L24.3766 41.765ZM50.5899 46.7984L50.372 51.7883L55.5362 41.765L50.5899 46.7984ZM36.6444 42.3097L35.4895 48.607L36.9276 56.0373L37.2545 46.2537L36.6444 42.3097ZM43.2903 42.3097L42.7019 46.2319L42.9634 56.0373L44.4233 48.607L43.2903 42.3097Z\" fill=\"#E4751F\" stroke=\"#E4751F\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M44.4233 48.607L42.9634 56.0374L44.0093 56.7564L50.372 51.7883L50.5899 46.7985L44.4233 48.607ZM29.3447 46.7985L29.519 51.7883L35.8817 56.7564L36.9276 56.0374L35.4895 48.607L29.3447 46.7985Z\" fill=\"#F6851B\" stroke=\"#F6851B\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M44.5323 63.5984L44.5977 61.572L44.0529 61.0926H35.8381L35.337 61.572L35.3805 63.5984L28.5167 60.3517L30.9136 62.3128L35.7728 65.6903H44.1183L48.9992 62.3128L51.3961 60.3517L44.5323 63.5984Z\" fill=\"#C0AD9E\" stroke=\"#C0AD9E\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M44.0093 56.7564L42.9634 56.0374H36.9276L35.8817 56.7564L35.337 61.572L35.8381 61.0926H44.0529L44.5977 61.572L44.0093 56.7564Z\" fill=\"#161616\" stroke=\"#161616\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M65.8864 31.3277L67.7385 22.4374L64.9712 14.179L44.0093 29.737L52.0716 36.5572L63.4677 39.8911L65.9953 36.9494L64.9058 36.165L66.649 34.5743L65.2981 33.5284L67.0412 32.1992L65.8864 31.3277ZM12.1743 22.4374L14.0265 31.3277L12.8498 32.1992L14.593 33.5284L13.2638 34.5743L15.007 36.165L13.9175 36.9494L16.4233 39.8911L27.8195 36.5572L35.8817 29.737L14.9198 14.179L12.1743 22.4374Z\" fill=\"#763D16\" stroke=\"#763D16\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M63.4677 39.891L52.0716 36.5572L55.5362 41.765L50.372 51.7883L57.1704 51.7012H67.3027L63.4677 39.891ZM27.8194 36.5572L16.4233 39.891L12.6319 51.7012H22.7424L29.5191 51.7883L24.3766 41.765L27.8194 36.5572ZM43.2903 42.3097L44.0093 29.737L47.3214 20.7813H32.6132L35.8817 29.737L36.6443 42.3097L36.9058 46.2755L36.9276 56.0373H42.9634L43.007 46.2755L43.2903 42.3097Z\" fill=\"#F6851B\" stroke=\"#F6851B\" stroke-width=\"0.124514\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "RAINBOW_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L133",
			"type": "\"<svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0_5_149)\">\n<path d=\"M80 0H0V80H80V0Z\" fill=\"url(#paint0_linear_5_149)\"/>\n<path d=\"M13.3333 25.3334H17.3333C37.9519 25.3334 54.6666 42.0481 54.6666 62.6667V66.6667H62.6666C64.8758 66.6667 66.6666 64.8758 66.6666 62.6667C66.6666 35.4206 44.5794 13.3334 17.3333 13.3334C15.1242 13.3334 13.3333 15.1242 13.3333 17.3334V25.3334Z\" fill=\"url(#paint1_radial_5_149)\"/>\n<path d=\"M56 62.6666H66.6667C66.6667 64.8758 64.8758 66.6666 62.6667 66.6666H56V62.6666Z\" fill=\"url(#paint2_linear_5_149)\"/>\n<path d=\"M17.3333 13.3334V24H13.3333V17.3334C13.3333 15.1242 15.1242 13.3334 17.3333 13.3334Z\" fill=\"url(#paint3_linear_5_149)\"/>\n<path d=\"M13.3333 24H17.3333C38.6883 24 56 41.3117 56 62.6667V66.6667H44V62.6667C44 47.9391 32.0609 36 17.3333 36H13.3333V24Z\" fill=\"url(#paint4_radial_5_149)\"/>\n<path d=\"M45.3333 62.6666H56V66.6666H45.3333V62.6666Z\" fill=\"url(#paint5_linear_5_149)\"/>\n<path d=\"M13.3333 34.6667V24H17.3333V34.6667H13.3333Z\" fill=\"url(#paint6_linear_5_149)\"/>\n<path d=\"M13.3333 41.3333C13.3333 43.5424 15.1242 45.3333 17.3333 45.3333C26.9062 45.3333 34.6666 53.0937 34.6666 62.6666C34.6666 64.8758 36.4575 66.6666 38.6666 66.6666H45.3333V62.6666C45.3333 47.2026 32.7973 34.6666 17.3333 34.6666H13.3333V41.3333Z\" fill=\"url(#paint7_radial_5_149)\"/>\n<path d=\"M34.6667 62.6666H45.3334V66.6666H38.6667C36.4576 66.6666 34.6667 64.8758 34.6667 62.6666Z\" fill=\"url(#paint8_radial_5_149)\"/>\n<path d=\"M17.3333 45.3333C15.1242 45.3333 13.3333 43.5424 13.3333 41.3333V34.6666H17.3333V45.3333Z\" fill=\"url(#paint9_radial_5_149)\"/>\n</g>\n<defs>\n<linearGradient id=\"paint0_linear_5_149\" x1=\"40\" y1=\"0\" x2=\"40\" y2=\"80\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#174299\"/>\n<stop offset=\"1\" stop-color=\"#001E59\"/>\n</linearGradient>\n<radialGradient id=\"paint1_radial_5_149\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(17.3333 62.6667) rotate(-90) scale(49.3333)\">\n<stop offset=\"0.770277\" stop-color=\"#FF4000\"/>\n<stop offset=\"1\" stop-color=\"#8754C9\"/>\n</radialGradient>\n<linearGradient id=\"paint2_linear_5_149\" x1=\"55.3333\" y1=\"64.6666\" x2=\"66.6667\" y2=\"64.6666\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#FF4000\"/>\n<stop offset=\"1\" stop-color=\"#8754C9\"/>\n</linearGradient>\n<linearGradient id=\"paint3_linear_5_149\" x1=\"15.3333\" y1=\"13.3334\" x2=\"15.3333\" y2=\"24.6667\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#8754C9\"/>\n<stop offset=\"1\" stop-color=\"#FF4000\"/>\n</linearGradient>\n<radialGradient id=\"paint4_radial_5_149\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(17.3333 62.6667) rotate(-90) scale(38.6667)\">\n<stop offset=\"0.723929\" stop-color=\"#FFF700\"/>\n<stop offset=\"1\" stop-color=\"#FF9901\"/>\n</radialGradient>\n<linearGradient id=\"paint5_linear_5_149\" x1=\"45.3333\" y1=\"64.6666\" x2=\"56\" y2=\"64.6666\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#FFF700\"/>\n<stop offset=\"1\" stop-color=\"#FF9901\"/>\n</linearGradient>\n<linearGradient id=\"paint6_linear_5_149\" x1=\"15.3333\" y1=\"34.6667\" x2=\"15.3333\" y2=\"24\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#FFF700\"/>\n<stop offset=\"1\" stop-color=\"#FF9901\"/>\n</linearGradient>\n<radialGradient id=\"paint7_radial_5_149\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(17.3333 62.6666) rotate(-90) scale(28)\">\n<stop offset=\"0.59513\" stop-color=\"#00AAFF\"/>\n<stop offset=\"1\" stop-color=\"#01DA40\"/>\n</radialGradient>\n<radialGradient id=\"paint8_radial_5_149\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(34 64.6666) scale(11.3333 30.2222)\">\n<stop stop-color=\"#00AAFF\"/>\n<stop offset=\"1\" stop-color=\"#01DA40\"/>\n</radialGradient>\n<radialGradient id=\"paint9_radial_5_149\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(15.3333 46) rotate(-90) scale(11.3333 214.913)\">\n<stop stop-color=\"#00AAFF\"/>\n<stop offset=\"1\" stop-color=\"#01DA40\"/>\n</radialGradient>\n<clipPath id=\"clip0_5_149\">\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "SMART_WALLET_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L47",
			"type": "\"<svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" fill=\"none\">\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"url(#paint0_linear_1_91)\"/>\n<path d=\"M39.9969 18L40.2333 18.0156L40.3513 18.0333L40.4736 18.0622L40.6958 18.1378C40.8494 18.2006 40.9953 18.2842 41.1305 18.3867L41.3387 18.5689L41.8493 19.0533C45.8891 22.7768 50.9947 24.7762 56.2458 24.6911L56.9307 24.6689C57.3783 24.6462 57.82 24.7909 58.1849 25.0798C58.5498 25.3687 58.8167 25.785 58.9431 26.2622C59.9271 29.9769 60.2283 33.8731 59.8287 37.7194C59.4289 41.5658 58.3367 45.2836 56.6165 48.6523C54.8965 52.0207 52.5836 54.9714 49.8156 57.3285C47.0476 59.6856 43.8809 61.4012 40.5036 62.3734C40.174 62.4683 39.828 62.4683 39.4982 62.3734C36.1209 61.4014 32.9538 59.686 30.1856 57.3289C27.4176 54.9718 25.1045 52.0214 23.3842 48.6529C21.6638 45.2843 20.5713 41.5662 20.1715 37.7198C19.7717 33.8734 20.0727 29.9769 21.0567 26.2622C21.1831 25.785 21.4501 25.3687 21.815 25.0798C22.1799 24.7909 22.6215 24.6462 23.0693 24.6689C28.5513 24.947 33.9293 22.9444 38.1507 19.0533L38.6773 18.5533L38.8696 18.3867C39.0047 18.2842 39.1505 18.2006 39.304 18.1378L39.5282 18.0622C39.6069 18.0412 39.6865 18.0256 39.7667 18.0156L39.9969 18ZM40.0009 33.5556C38.9905 33.5551 38.0173 33.9787 37.2765 34.7411C36.5356 35.5036 36.0816 36.5485 36.0058 37.6667L35.9958 38L36.0058 38.3334C36.0551 39.0547 36.2625 39.7518 36.6098 40.364C36.9569 40.9762 37.4336 41.4851 37.9985 41.8467V45.7778L38.0125 46.0378C38.0727 46.6003 38.3242 47.1158 38.7156 47.4794C39.1071 47.8429 39.6087 48.0269 40.1182 47.9938C40.6278 47.9605 41.1067 47.7127 41.4571 47.3009C41.8076 46.8889 42.0029 46.3442 42.0036 45.7778L42.0056 41.8489C42.7691 41.3596 43.366 40.6042 43.7034 39.7002C44.0407 38.796 44.0996 37.7938 43.8711 36.8487C43.6427 35.9036 43.1396 35.0685 42.4398 34.4731C41.74 33.8776 40.8827 33.5551 40.0009 33.5556Z\" fill=\"url(#paint1_linear_1_91)\"/>\n<defs>\n<linearGradient id=\"paint0_linear_1_91\" x1=\"40\" y1=\"0\" x2=\"40\" y2=\"80\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"#8356BD\"/>\n<stop offset=\"1\" stop-color=\"#7C20F4\"/>\n</linearGradient>\n<linearGradient id=\"paint1_linear_1_91\" x1=\"40\" y1=\"18\" x2=\"40\" y2=\"62.4445\" gradientUnits=\"userSpaceOnUse\">\n<stop stop-color=\"white\"/>\n<stop offset=\"1\" stop-color=\"#E1D8FB\"/>\n</linearGradient>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "TRUST_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L112",
			"type": "\"<svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"white\"/>\n<path d=\"M40.5303 17.1425C48.2477 23.6857 57.156 23.3518 59.7003 23.3707C58.8698 60.2513 54.6835 52.9058 40.1887 63.1412C25.8474 52.6916 21.579 59.9744 21.2964 23.0855C23.8142 23.1042 32.7165 23.5704 40.5303 17.1425Z\" stroke=\"#3375BB\" stroke-width=\"7\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		},
		{
			"kind": "variable",
			"name": "WALLETCONNECT_ICON",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/assets/svgs.ts#L62",
			"type": "\"<svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" fill=\"none\">\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"#1C7DFC\"/>\n<rect width=\"80\" height=\"80\" rx=\"12\" fill=\"url(#paint0_radial_1_46)\"/>\n<path d=\"M26.4227 31.4731C33.9171 24.1756 46.0829 24.1756 53.5773 31.4731L54.4796 32.358C54.858 32.7207 54.858 33.3155 54.4796 33.6782L51.3945 36.6813C51.2053 36.8699 50.8997 36.8699 50.7105 36.6813L49.4736 35.4772C44.2347 30.385 35.7653 30.385 30.5264 35.4772L29.2021 36.7684C29.013 36.957 28.7074 36.957 28.5182 36.7684L25.4331 33.7653C25.0547 33.4026 25.0547 32.8078 25.4331 32.4451L26.4227 31.4731ZM59.9658 37.6824L62.7162 40.3518C63.0946 40.7145 63.0946 41.3093 62.7162 41.672L50.3322 53.728C49.9538 54.0907 49.3426 54.0907 48.9788 53.728L40.1892 45.1684C40.1019 45.0813 39.9418 45.0813 39.8545 45.1684L31.0649 53.728C30.6865 54.0907 30.0753 54.0907 29.7115 53.728L17.2838 41.672C16.9054 41.3093 16.9054 40.7145 17.2838 40.3518L20.0342 37.6824C20.4125 37.3197 21.0237 37.3197 21.3875 37.6824L30.1772 46.242C30.2645 46.329 30.4245 46.329 30.5119 46.242L39.3015 37.6824C39.6799 37.3197 40.291 37.3197 40.6549 37.6824L49.4445 46.242C49.5318 46.329 49.6919 46.329 49.7792 46.242L58.5688 37.6824C58.9763 37.3197 59.5875 37.3197 59.9658 37.6824Z\" fill=\"white\"/>\n<defs>\n<radialGradient id=\"paint0_radial_1_46\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(0.000247955 40.0012) scale(80)\">\n<stop stop-color=\"#5D9DF6\"/>\n<stop offset=\"1\" stop-color=\"#006FFF\"/>\n</radialGradient>\n</defs>\n</svg>\"",
			"flags": {
				"isConst": true
			}
		}
	],
	"types": [
		{
			"kind": "type",
			"name": "ButtonTheme",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/styles/theme.ts#L45",
			"type": "{ buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "buttonBackgroundColor",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "buttonBorderColor",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "buttonTextColor",
					"type": "string"
				}
			]
		},
		{
			"kind": "type",
			"name": "ConnectWalletProps",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/ConnectWallet.tsx#L21",
			"type": "{ detailsButton: ConnectWalletDetailsProps[\"detailsButton\"], displayBalanceToken: Record<number, string>, extraRows: ConnectWalletDetailsProps[\"extraRows\"], hideTestnetFaucet: boolean, supportedTokens: SupportedTokens, switchToActiveChain: boolean } & ConnectWalletButtonProps"
		},
		{
			"kind": "type",
			"name": "Theme",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/styles/theme.ts#L43",
			"type": "typeof _darkTheme"
		},
		{
			"kind": "type",
			"name": "WC2Options",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L13",
			"type": "{ projectId: string } & Omit<WalletOptions<WalletConnectOptions>, (\"projectId\") | (\"qrcode\") | (\"qrModalOptions\") | (\"clientId\") | (\"secretKey\")> & { walletId: NonNullable<WalletOptions[\"walletId\"]> }"
		},
		{
			"kind": "type",
			"name": "WCMeta",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/types/wc.ts#L1",
			"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }",
			"typeDeclaration": [
				{
					"kind": "subtype",
					"name": "iconURL",
					"type": "string"
				},
				{
					"kind": "subtype",
					"name": "links",
					"type": "{ native: string, universal: string }"
				},
				{
					"kind": "subtype",
					"name": "name",
					"type": "string"
				}
			]
		}
	],
	"components": [
		{
			"kind": "function",
			"name": "ActiveDot",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "{ color: string, height: number, width: number }"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/ActiveDot.tsx#L3"
		},
		{
			"kind": "function",
			"name": "AddressDisplay",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "AddressProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/AddressDisplay.tsx#L11"
		},
		{
			"kind": "function",
			"name": "BaseButton",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "strong",
									"children": [
										{
											"type": "text",
											"value": "NOTE"
										}
									]
								},
								{
									"type": "text",
									"value": ": Exotic components are not callable."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "BackgroundColorProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & OpacityProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & VisibleProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & LayoutProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & SpacingProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & { borderBottomWidth: ResponsiveValue<(undefined) | (number), unknown>, borderEndWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderLeftWidth: ResponsiveValue<(undefined) | (number), unknown>, borderRightWidth: ResponsiveValue<(undefined) | (number), unknown>, borderStartWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderStyle: ResponsiveValue<(undefined) | (\"solid\") | (\"dotted\") | (\"dashed\"), unknown>, borderTopWidth: ResponsiveValue<(undefined) | (number), unknown>, borderWidth: ResponsiveValue<(undefined) | (number), unknown> } & { borderBottomColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderEndColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderLeftColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderRightColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderStartColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderTopColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { borderBottomEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown> } & { elevation: ResponsiveValue<(undefined) | (number), unknown>, shadowOffset: ResponsiveValue<(undefined) | ({ height: number, width: number }), unknown>, shadowOpacity: ResponsiveValue<(undefined) | (number), unknown>, shadowRadius: ResponsiveValue<(undefined) | (number), unknown> } & { shadowColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { bottom: ResponsiveValue<(undefined) | (string) | (number), unknown>, end: ResponsiveValue<(undefined) | (string) | (number), unknown>, left: ResponsiveValue<(undefined) | (string) | (number), unknown>, position: ResponsiveValue<(undefined) | (\"absolute\") | (\"relative\"), unknown>, right: ResponsiveValue<(undefined) | (string) | (number), unknown>, start: ResponsiveValue<(undefined) | (string) | (number), unknown>, top: ResponsiveValue<(undefined) | (string) | (number), unknown> } & { zIndex: number } & SpacingShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & BackgroundColorShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & Omit<TouchableOpacityProps, (\"left\") | (\"width\") | (\"height\") | (\"minWidth\") | (\"maxWidth\") | (\"minHeight\") | (\"maxHeight\") | (\"overflow\") | (\"aspectRatio\") | (\"alignContent\") | (\"alignItems\") | (\"alignSelf\") | (\"justifyContent\") | (\"flex\") | (\"flexBasis\") | (\"flexDirection\") | (\"flexGrow\") | (\"flexShrink\") | (\"flexWrap\") | (\"margin\") | (\"marginTop\") | (\"marginRight\") | (\"marginBottom\") | (\"marginLeft\") | (\"marginHorizontal\") | (\"marginVertical\") | (\"marginStart\") | (\"marginEnd\") | (\"padding\") | (\"paddingTop\") | (\"paddingRight\") | (\"paddingBottom\") | (\"paddingLeft\") | (\"paddingHorizontal\") | (\"paddingVertical\") | (\"paddingStart\") | (\"paddingEnd\") | (\"columnGap\") | (\"rowGap\") | (\"gap\") | (\"borderBottomWidth\") | (\"borderLeftWidth\") | (\"borderRightWidth\") | (\"borderStyle\") | (\"borderTopWidth\") | (\"borderStartWidth\") | (\"borderEndWidth\") | (\"borderWidth\") | (\"borderColor\") | (\"borderTopColor\") | (\"borderRightColor\") | (\"borderLeftColor\") | (\"borderBottomColor\") | (\"borderStartColor\") | (\"borderEndColor\") | (\"borderRadius\") | (\"borderBottomLeftRadius\") | (\"borderBottomRightRadius\") | (\"borderTopLeftRadius\") | (\"borderTopRightRadius\") | (\"borderBottomStartRadius\") | (\"borderBottomEndRadius\") | (\"borderTopStartRadius\") | (\"borderTopEndRadius\") | (\"shadowOpacity\") | (\"shadowOffset\") | (\"shadowRadius\") | (\"elevation\") | (\"position\") | (\"top\") | (\"right\") | (\"bottom\") | (\"start\") | (\"end\") | (\"m\") | (\"mt\") | (\"mr\") | (\"mb\") | (\"ml\") | (\"mx\") | (\"my\") | (\"ms\") | (\"me\") | (\"p\") | (\"pt\") | (\"pr\") | (\"pb\") | (\"pl\") | (\"px\") | (\"py\") | (\"ps\") | (\"pe\") | (\"g\") | (\"rg\") | (\"cg\") | (\"backgroundColor\") | (\"opacity\") | (\"visible\") | (\"shadowColor\") | (\"zIndex\") | (\"bg\")> & RefAttributes<unknown>"
						}
					],
					"returns": {
						"type": "ReactNode"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/BaseButton.tsx#L5"
		},
		{
			"kind": "function",
			"name": "Box",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "strong",
									"children": [
										{
											"type": "text",
											"value": "NOTE"
										}
									]
								},
								{
									"type": "text",
									"value": ": Exotic components are not callable."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "BackgroundColorProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & OpacityProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & VisibleProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & LayoutProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & SpacingProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & { borderBottomWidth: ResponsiveValue<(undefined) | (number), unknown>, borderEndWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderLeftWidth: ResponsiveValue<(undefined) | (number), unknown>, borderRightWidth: ResponsiveValue<(undefined) | (number), unknown>, borderStartWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderStyle: ResponsiveValue<(undefined) | (\"solid\") | (\"dotted\") | (\"dashed\"), unknown>, borderTopWidth: ResponsiveValue<(undefined) | (number), unknown>, borderWidth: ResponsiveValue<(undefined) | (number), unknown> } & { borderBottomColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderEndColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderLeftColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderRightColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderStartColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderTopColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { borderBottomEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown> } & { elevation: ResponsiveValue<(undefined) | (number), unknown>, shadowOffset: ResponsiveValue<(undefined) | ({ height: number, width: number }), unknown>, shadowOpacity: ResponsiveValue<(undefined) | (number), unknown>, shadowRadius: ResponsiveValue<(undefined) | (number), unknown> } & { shadowColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { bottom: ResponsiveValue<(undefined) | (string) | (number), unknown>, end: ResponsiveValue<(undefined) | (string) | (number), unknown>, left: ResponsiveValue<(undefined) | (string) | (number), unknown>, position: ResponsiveValue<(undefined) | (\"absolute\") | (\"relative\"), unknown>, right: ResponsiveValue<(undefined) | (string) | (number), unknown>, start: ResponsiveValue<(undefined) | (string) | (number), unknown>, top: ResponsiveValue<(undefined) | (string) | (number), unknown> } & { zIndex: number } & SpacingShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & BackgroundColorShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & Omit<ViewProps & { children: ReactNode }, (\"left\") | (\"width\") | (\"height\") | (\"minWidth\") | (\"maxWidth\") | (\"minHeight\") | (\"maxHeight\") | (\"overflow\") | (\"aspectRatio\") | (\"alignContent\") | (\"alignItems\") | (\"alignSelf\") | (\"justifyContent\") | (\"flex\") | (\"flexBasis\") | (\"flexDirection\") | (\"flexGrow\") | (\"flexShrink\") | (\"flexWrap\") | (\"margin\") | (\"marginTop\") | (\"marginRight\") | (\"marginBottom\") | (\"marginLeft\") | (\"marginHorizontal\") | (\"marginVertical\") | (\"marginStart\") | (\"marginEnd\") | (\"padding\") | (\"paddingTop\") | (\"paddingRight\") | (\"paddingBottom\") | (\"paddingLeft\") | (\"paddingHorizontal\") | (\"paddingVertical\") | (\"paddingStart\") | (\"paddingEnd\") | (\"columnGap\") | (\"rowGap\") | (\"gap\") | (\"borderBottomWidth\") | (\"borderLeftWidth\") | (\"borderRightWidth\") | (\"borderStyle\") | (\"borderTopWidth\") | (\"borderStartWidth\") | (\"borderEndWidth\") | (\"borderWidth\") | (\"borderColor\") | (\"borderTopColor\") | (\"borderRightColor\") | (\"borderLeftColor\") | (\"borderBottomColor\") | (\"borderStartColor\") | (\"borderEndColor\") | (\"borderRadius\") | (\"borderBottomLeftRadius\") | (\"borderBottomRightRadius\") | (\"borderTopLeftRadius\") | (\"borderTopRightRadius\") | (\"borderBottomStartRadius\") | (\"borderBottomEndRadius\") | (\"borderTopStartRadius\") | (\"borderTopEndRadius\") | (\"shadowOpacity\") | (\"shadowOffset\") | (\"shadowRadius\") | (\"elevation\") | (\"position\") | (\"top\") | (\"right\") | (\"bottom\") | (\"start\") | (\"end\") | (\"m\") | (\"mt\") | (\"mr\") | (\"mb\") | (\"ml\") | (\"mx\") | (\"my\") | (\"ms\") | (\"me\") | (\"p\") | (\"pt\") | (\"pr\") | (\"pb\") | (\"pl\") | (\"px\") | (\"py\") | (\"ps\") | (\"pe\") | (\"g\") | (\"rg\") | (\"cg\") | (\"backgroundColor\") | (\"opacity\") | (\"visible\") | (\"shadowColor\") | (\"zIndex\") | (\"bg\")> & RefAttributes<unknown>"
						}
					],
					"returns": {
						"type": "ReactNode"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/Box.tsx#L4"
		},
		{
			"kind": "function",
			"name": "ChainIcon",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ChainIconProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/ChainIcon.tsx#L12"
		},
		{
			"kind": "function",
			"name": "ConnectWallet",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ConnectWalletProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/ConnectWallet.tsx#L70"
		},
		{
			"kind": "function",
			"name": "ConnectWalletHeader",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ConnectWalletHeaderProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/ConnectWalletFlow/ConnectingWallet/ConnectingWalletHeader.tsx#L18"
		},
		{
			"kind": "function",
			"name": "IconTextButton",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "IconTextProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/IconTextButton.tsx#L14"
		},
		{
			"kind": "function",
			"name": "Label",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "LabelProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/Label.tsx#L9"
		},
		{
			"kind": "function",
			"name": "Link",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "LinkProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/Link.tsx#L11"
		},
		{
			"kind": "function",
			"name": "ModalFooter",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "{ footer: string, isLoading: boolean, onPress: (() => void) }"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/modal/ModalFooter.tsx#L5"
		},
		{
			"kind": "function",
			"name": "ModalHeaderTextClose",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ModalHeaderTextCloseProps & BackgroundColorProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & OpacityProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & VisibleProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & LayoutProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & SpacingProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & { borderBottomWidth: ResponsiveValue<(undefined) | (number), unknown>, borderEndWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderLeftWidth: ResponsiveValue<(undefined) | (number), unknown>, borderRightWidth: ResponsiveValue<(undefined) | (number), unknown>, borderStartWidth: ResponsiveValue<(undefined) | (string) | (number), unknown>, borderStyle: ResponsiveValue<(undefined) | (\"solid\") | (\"dotted\") | (\"dashed\"), unknown>, borderTopWidth: ResponsiveValue<(undefined) | (number), unknown>, borderWidth: ResponsiveValue<(undefined) | (number), unknown> } & { borderBottomColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderEndColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderLeftColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderRightColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderStartColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown>, borderTopColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { borderBottomEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderBottomStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopEndRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopLeftRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopRightRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown>, borderTopStartRadius: ResponsiveValue<(\"xs\") | (\"sm\") | (\"md\") | (\"lg\") | (\"xl\") | (\"xxl\"), unknown> } & { elevation: ResponsiveValue<(undefined) | (number), unknown>, shadowOffset: ResponsiveValue<(undefined) | ({ height: number, width: number }), unknown>, shadowOpacity: ResponsiveValue<(undefined) | (number), unknown>, shadowRadius: ResponsiveValue<(undefined) | (number), unknown> } & { shadowColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & { bottom: ResponsiveValue<(undefined) | (string) | (number), unknown>, end: ResponsiveValue<(undefined) | (string) | (number), unknown>, left: ResponsiveValue<(undefined) | (string) | (number), unknown>, position: ResponsiveValue<(undefined) | (\"absolute\") | (\"relative\"), unknown>, right: ResponsiveValue<(undefined) | (string) | (number), unknown>, start: ResponsiveValue<(undefined) | (string) | (number), unknown>, top: ResponsiveValue<(undefined) | (string) | (number), unknown> } & { zIndex: number } & SpacingShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & BackgroundColorShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & Omit<ViewProps & { children: ReactNode }, (\"left\") | (\"width\") | (\"height\") | (\"minWidth\") | (\"maxWidth\") | (\"minHeight\") | (\"maxHeight\") | (\"overflow\") | (\"aspectRatio\") | (\"alignContent\") | (\"alignItems\") | (\"alignSelf\") | (\"justifyContent\") | (\"flex\") | (\"flexBasis\") | (\"flexDirection\") | (\"flexGrow\") | (\"flexShrink\") | (\"flexWrap\") | (\"margin\") | (\"marginTop\") | (\"marginRight\") | (\"marginBottom\") | (\"marginLeft\") | (\"marginHorizontal\") | (\"marginVertical\") | (\"marginStart\") | (\"marginEnd\") | (\"padding\") | (\"paddingTop\") | (\"paddingRight\") | (\"paddingBottom\") | (\"paddingLeft\") | (\"paddingHorizontal\") | (\"paddingVertical\") | (\"paddingStart\") | (\"paddingEnd\") | (\"columnGap\") | (\"rowGap\") | (\"gap\") | (\"borderBottomWidth\") | (\"borderLeftWidth\") | (\"borderRightWidth\") | (\"borderStyle\") | (\"borderTopWidth\") | (\"borderStartWidth\") | (\"borderEndWidth\") | (\"borderWidth\") | (\"borderColor\") | (\"borderTopColor\") | (\"borderRightColor\") | (\"borderLeftColor\") | (\"borderBottomColor\") | (\"borderStartColor\") | (\"borderEndColor\") | (\"borderRadius\") | (\"borderBottomLeftRadius\") | (\"borderBottomRightRadius\") | (\"borderTopLeftRadius\") | (\"borderTopRightRadius\") | (\"borderBottomStartRadius\") | (\"borderBottomEndRadius\") | (\"borderTopStartRadius\") | (\"borderTopEndRadius\") | (\"shadowOpacity\") | (\"shadowOffset\") | (\"shadowRadius\") | (\"elevation\") | (\"position\") | (\"top\") | (\"right\") | (\"bottom\") | (\"start\") | (\"end\") | (\"m\") | (\"mt\") | (\"mr\") | (\"mb\") | (\"ml\") | (\"mx\") | (\"my\") | (\"ms\") | (\"me\") | (\"p\") | (\"pt\") | (\"pr\") | (\"pb\") | (\"pl\") | (\"px\") | (\"py\") | (\"ps\") | (\"pe\") | (\"g\") | (\"rg\") | (\"cg\") | (\"backgroundColor\") | (\"opacity\") | (\"visible\") | (\"shadowColor\") | (\"zIndex\") | (\"bg\")> & RefAttributes<unknown>"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/modal/ModalHeaderTextClose.tsx#L15"
		},
		{
			"kind": "function",
			"name": "NetworkButton",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "NetworkButtonProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/NetworkButton.tsx#L29"
		},
		{
			"kind": "function",
			"name": "TWModal",
			"signatures": [
				{
					"parameters": [
						{
							"name": "props",
							"type": "Partial<ModalProps>"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/modal/TWModal.tsx#L6"
		},
		{
			"kind": "function",
			"name": "Text",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "strong",
									"children": [
										{
											"type": "text",
											"value": "NOTE"
										}
									]
								},
								{
									"type": "text",
									"value": ": Exotic components are not callable."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "props",
							"type": "ColorProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & OpacityProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & VisibleProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & TypographyProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & SpacingProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & { textShadowOffset: ResponsiveValue<(undefined) | ({ height: number, width: number }), unknown>, textShadowRadius: ResponsiveValue<(undefined) | (number), unknown> } & { textShadowColor: ResponsiveValue<(\"black\") | (\"white\") | (\"red\") | (\"textPrimary\") | (\"textSecondary\") | (\"linkPrimary\") | (\"error\") | (\"buttonBackgroundColor\") | (\"buttonTextColor\") | (\"buttonBorderColor\") | (\"accentButtonColor\") | (\"accentButtonTextColor\") | (\"backgroundInverted\") | (\"background\") | (\"backgroundHighlight\") | (\"iconPrimary\") | (\"iconSecondary\") | (\"iconHighlight\") | (\"labelBackground\") | (\"border\") | (\"warning\"), unknown> } & VariantProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }, \"textVariants\"> & SpacingShorthandProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }> & Omit<TextProps & { children: ReactNode }, (\"fontFamily\") | (\"fontSize\") | (\"fontWeight\") | (\"lineHeight\") | (\"letterSpacing\") | (\"textAlign\") | (\"margin\") | (\"marginTop\") | (\"marginRight\") | (\"marginBottom\") | (\"marginLeft\") | (\"marginHorizontal\") | (\"marginVertical\") | (\"marginStart\") | (\"marginEnd\") | (\"padding\") | (\"paddingTop\") | (\"paddingRight\") | (\"paddingBottom\") | (\"paddingLeft\") | (\"paddingHorizontal\") | (\"paddingVertical\") | (\"paddingStart\") | (\"paddingEnd\") | (\"columnGap\") | (\"rowGap\") | (\"gap\") | (\"m\") | (\"mt\") | (\"mr\") | (\"mb\") | (\"ml\") | (\"mx\") | (\"my\") | (\"ms\") | (\"me\") | (\"p\") | (\"pt\") | (\"pr\") | (\"pb\") | (\"pl\") | (\"px\") | (\"py\") | (\"ps\") | (\"pe\") | (\"g\") | (\"rg\") | (\"cg\") | (\"opacity\") | (\"visible\") | (\"fontStyle\") | (\"includeFontPadding\") | (\"fontVariant\") | (\"textAlignVertical\") | (\"textDecorationLine\") | (\"textDecorationStyle\") | (\"textTransform\") | (\"verticalAlign\") | (\"writingDirection\") | (\"textShadowOffset\") | (\"textShadowRadius\") | (\"variant\") | (\"textShadowColor\") | (keyof ColorProps<{ borderRadii: { lg: number, md: number, sm: number, xl: number, xs: number, xxl: number }, colors: { accentButtonColor: string, accentButtonTextColor: string, background: string, backgroundHighlight: string, backgroundInverted: string, black: string, border: string, buttonBackgroundColor: string, buttonBorderColor: string, buttonTextColor: string, error: string, iconHighlight: string, iconPrimary: string, iconSecondary: string, labelBackground: string, linkPrimary: string, red: string, textPrimary: string, textSecondary: string, warning: string, white: string }, spacing: { lg: number, md: number, none: number, sm: number, xl: number, xmd: number, xs: number, xxl: number, xxs: number }, textVariants: { bodyLarge: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodyLargeBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmall: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, bodySmallSecondary: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, defaults: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, error: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number, textAlign: string }, header: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, headerBold: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number }, link: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, letterSpacing: number, lineHeight: number }, subHeader: { color: string, fontFamily: (undefined) | (string), fontSize: number, fontWeight: string, lineHeight: number } } }>)> & RefAttributes<unknown>"
						}
					],
					"returns": {
						"type": "ReactNode"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/Text.tsx#L4"
		},
		{
			"kind": "function",
			"name": "TextInput",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "TextInputProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/TextInput.tsx#L14"
		},
		{
			"kind": "function",
			"name": "ThirdwebProvider",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The "
								},
								{
									"type": "inlineCode",
									"value": "<ThirdwebProvider />"
								},
								{
									"type": "text",
									"value": " component lets you control what networks you want users to connect to,\nwhat types of wallets can connect to your app, and the settings for the "
								},
								{
									"type": "link",
									"title": null,
									"url": "https://docs.thirdweb.com/typescript",
									"children": [
										{
											"type": "text",
											"value": "Thirdweb SDK"
										}
									]
								},
								{
									"type": "text",
									"value": "."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "PropsWithChildren<ThirdwebProviderProps<TChains>>"
						}
					],
					"returns": {
						"type": "Element"
					},
					"typeParameters": [
						{
							"name": "TChains",
							"extendsType": "Chain[]"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "ts",
									"meta": null,
									"value": "You can wrap your application with the provider as follows:\n\nimport { ThirdwebProvider } from \"@thirdweb-dev/react-native\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n};"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/providers/thirdweb-provider.tsx#L100"
		},
		{
			"kind": "function",
			"name": "Toast",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "ToastProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/Toast.tsx#L16"
		},
		{
			"kind": "function",
			"name": "WalletButton",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "WalletButtonProps"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/WalletButton.tsx#L21"
		},
		{
			"kind": "function",
			"name": "WalletIcon",
			"signatures": [
				{
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "{ iconUri: string, size: number }"
						}
					],
					"returns": {
						"type": "Element"
					}
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/base/WalletIcon.tsx#L3"
		},
		{
			"kind": "function",
			"name": "Web3Button",
			"signatures": [
				{
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "A component that allows the user to call an on-chain function on a contract."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "The button has to be wrapped in a "
								},
								{
									"type": "inlineCode",
									"value": "ThirdwebProvider"
								},
								{
									"type": "text",
									"value": " in order to function."
								}
							]
						}
					],
					"parameters": [
						{
							"name": "__namedParameters",
							"type": "PropsWithChildren<Web3ButtonProps<TAction>>"
						}
					],
					"returns": {
						"type": "Element"
					},
					"typeParameters": [
						{
							"name": "TAction",
							"extendsType": "ActionFn"
						}
					],
					"blockTags": [
						{
							"tag": "@example",
							"summary": [
								{
									"type": "code",
									"lang": "javascript",
									"meta": null,
									"value": "import { Web3Button } from \"@thirdweb-dev/react-native\";\n\nconst App = () => {\n return (\n  <View>\n    <Web3Button contractAddress=\"0x...\" action={(contract) => contract.erc721.transfer(\"0x...\", 1)} />\n  </View>\n )\n}"
								}
							]
						}
					]
				}
			],
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/components/Web3Button.tsx#L65"
		}
	],
	"classes": [
		{
			"kind": "class",
			"name": "CoinbaseWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L22",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "CoinbaseWalletOptions"
							}
						],
						"returns": {
							"type": "CoinbaseWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L39"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getConnector",
					"signatures": [
						{
							"returns": {
								"type": "Promise<Connector<{}>>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L49"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "CoinbaseWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "callbackURL",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L37",
					"type": "URL"
				},
				{
					"kind": "variable",
					"name": "coinbaseConnector",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L29",
					"type": "CoinbaseWalletConnector",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "connector",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L28",
					"type": "Connector<{}>",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "provider",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L30",
					"type": "WalletMobileSDKEVMProvider",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L32",
					"type": "\"coinbase\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L23",
					"type": "{ iconURL: string, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			],
			"accessors": [
				{
					"kind": "accessor",
					"name": "walletName",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/coinbase-wallet.ts#L33",
					"returns": {
						"type": "\"Coinbase Wallet\""
					},
					"flags": {
						"isPublic": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "EmbeddedWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L18",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "EmbeddedWalletOptions"
							}
						],
						"returns": {
							"type": "EmbeddedWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L32"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getConnector",
					"signatures": [
						{
							"returns": {
								"type": "Promise<EmbeddedWalletConnector>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L42"
				},
				{
					"kind": "function",
					"name": "getEmail",
					"signatures": [
						{
							"returns": {
								"type": "(undefined) | (string)"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L87"
				},
				{
					"kind": "function",
					"name": "initializeConnector",
					"signatures": [
						{
							"returns": {
								"type": "EmbeddedWalletConnector"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L49"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "onChange",
					"signatures": [
						{
							"parameters": [
								{
									"name": "payload",
									"type": "any"
								}
							],
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L79"
				},
				{
					"kind": "function",
					"name": "onConnected",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L71"
				},
				{
					"kind": "function",
					"name": "onDisconnect",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L75"
				},
				{
					"kind": "function",
					"name": "onEmailSent",
					"signatures": [
						{
							"parameters": [
								{
									"name": "__namedParameters",
									"type": "{ email: string }"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L91"
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "EmbeddedWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListeners",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L107"
				},
				{
					"kind": "function",
					"name": "sendEmailOTP",
					"signatures": [
						{
							"parameters": [
								{
									"name": "email",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<(undefined) | (SendEmailOtpReturnType)>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L63"
				},
				{
					"kind": "function",
					"name": "setupListeners",
					"signatures": [
						{
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L95"
				},
				{
					"kind": "function",
					"name": "socialLogin",
					"signatures": [
						{
							"parameters": [
								{
									"name": "oauthOption",
									"type": "OauthOption"
								}
							],
							"returns": {
								"type": "Promise<(undefined) | ({ error: string, success: undefined }) | ({ error: undefined, success: boolean })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L67"
				},
				{
					"kind": "function",
					"name": "validateEmailOTP",
					"signatures": [
						{
							"parameters": [
								{
									"name": "otp",
									"type": "string"
								}
							],
							"returns": {
								"type": "Promise<(undefined) | ({ error: string, success: undefined }) | ({ error: undefined, success: boolean })>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L59"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "connector",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L22",
					"type": "EmbeddedWalletConnector",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L23",
					"type": "EmbeddedWalletOptions"
				},
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L30",
					"type": "\"embeddedWallet\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/embedded/EmbeddedWallet.ts#L25",
					"type": "{ iconURL: string, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "LocalWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/LocalWallet.ts#L8",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WalletOptions<LocalWalletOptions>",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "LocalWallet"
						}
					}
				]
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "generate",
					"signatures": [
						{
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/LocalWallet.ts#L18"
				},
				{
					"kind": "function",
					"name": "getConnector",
					"signatures": [
						{
							"returns": {
								"type": "Promise<Connector<{}>>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/LocalWallet.ts#L27"
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "{ iconURL: string, name: string }"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/LocalWallet.ts#L14"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "LocalWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/LocalWallet.ts#L9",
					"type": "{ iconURL: string, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "MagicLink",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L9",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "MagicLinkOptions"
							}
						],
						"returns": {
							"type": "MagicLink"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L24"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "autoConnect",
					"signatures": [
						{
							"parameters": [
								{
									"name": "options",
									"type": "MagicConnectorOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L55"
				},
				{
					"kind": "function",
					"name": "disconnect",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L65"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getConnector",
					"signatures": [
						{
							"returns": {
								"type": "Promise<MagicConnector>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L32"
				},
				{
					"kind": "function",
					"name": "getMagicSDK",
					"signatures": [
						{
							"returns": {
								"type": "Magic"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L51"
				},
				{
					"kind": "function",
					"name": "initializeConnector",
					"signatures": [
						{
							"returns": {
								"type": "MagicConnector"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L41"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicLink"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "connector",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L13",
					"type": "MagicConnector",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L14",
					"type": "MagicLinkOptions"
				},
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L22",
					"type": "\"magicLink\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L16",
					"type": "{ iconURL: string, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "MagicWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L77",
			"summary": [],
			"blockTags": [
				{
					"tag": "@deprecated",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use "
								},
								{
									"type": "inlineCode",
									"value": "MagicLink"
								},
								{
									"type": "text",
									"value": " instead"
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Renamed for consistency with our React package"
								}
							]
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "MagicLinkOptions"
							}
						],
						"returns": {
							"type": "MagicWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L24"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "autoConnect",
					"signatures": [
						{
							"parameters": [
								{
									"name": "options",
									"type": "MagicConnectorOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L55"
				},
				{
					"kind": "function",
					"name": "disconnect",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L65"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getConnector",
					"signatures": [
						{
							"returns": {
								"type": "Promise<MagicConnector>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L32"
				},
				{
					"kind": "function",
					"name": "getMagicSDK",
					"signatures": [
						{
							"returns": {
								"type": "Magic"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L51"
				},
				{
					"kind": "function",
					"name": "initializeConnector",
					"signatures": [
						{
							"returns": {
								"type": "MagicConnector"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L41"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MagicWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "connector",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L13",
					"type": "MagicConnector",
					"flags": {
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "options",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L14",
					"type": "MagicLinkOptions"
				},
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L22",
					"type": "\"magicLink\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/MagicLink.ts#L16",
					"type": "{ iconURL: string, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "MetaMaskWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/metamask-wallet.ts#L8",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "MetaMaskWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L29"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "WCMeta"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/metamask-wallet.ts#L19"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "MetaMaskWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/metamask-wallet.ts#L9",
					"type": "\"metamask\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/metamask-wallet.ts#L10",
					"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "links",
							"type": "{ native: string, universal: string }"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "RainbowWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/rainbow-wallet.ts#L9",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "RainbowWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L29"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/rainbow-wallet.ts#L20"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "RainbowWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/rainbow-wallet.ts#L10",
					"type": "\"rainbow\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/rainbow-wallet.ts#L11",
					"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "links",
							"type": "{ native: string, universal: string }"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "ThirdwebSDK",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/sdk/ThirdwebSDK.ts#L9",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "network",
								"type": "NetworkInput"
							},
							{
								"name": "options",
								"type": "(undefined) | ({})"
							},
							{
								"name": "storage",
								"type": "IThirdwebStorage",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "ThirdwebSDK"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/sdk/ThirdwebSDK.ts#L10"
			},
			"methods": [
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : any[]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "any[]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "(string) | (symbol)[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "((args : any[]) => void)[]"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : any[]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : any[]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : any[]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "(string) | (symbol)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : any[]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "ThirdwebSDK"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "(string) | (symbol)"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "ThirdwebStorage",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L20",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "ThirdwebStorageOptions<T>",
								"flags": {
									"isOptional": true
								}
							}
						],
						"returns": {
							"type": "ThirdwebStorage<T>"
						},
						"typeParameters": [
							{
								"name": "T",
								"extendsType": "UploadOptions"
							}
						]
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L28"
			},
			"methods": [
				{
					"kind": "function",
					"name": "download",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Downloads arbitrary data from any URL scheme."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "url",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The URL of the data to download"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "SingleDownloadOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<Response>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The response object fetched from the resolved URL"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "jsx",
											"meta": null,
											"value": "const uri = \"ipfs://example\";\nconst data = await storage.download(uri);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L80"
				},
				{
					"kind": "function",
					"name": "downloadJSON",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Downloads JSON data from any URL scheme.\nResolves any URLs with schemes to retrievable gateway URLs."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "url",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The URL of the JSON data to download"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "SingleDownloadOptions",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<TJSON>",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The JSON data fetched from the resolved URL"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"name": "TJSON"
								}
							],
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "jsx",
											"meta": null,
											"value": "const uri = \"ipfs://example\";\nconst json = await storage.downloadJSON(uri);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L100"
				},
				{
					"kind": "function",
					"name": "getGatewayUrls",
					"signatures": [
						{
							"returns": {
								"type": "GatewayUrls"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L196"
				},
				{
					"kind": "function",
					"name": "resolveScheme",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Resolve any scheme on a URL to get a retrievable URL for the data"
										}
									]
								}
							],
							"parameters": [
								{
									"name": "url",
									"type": "string",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "The URL to resolve the scheme of"
												}
											]
										}
									]
								}
							],
							"returns": {
								"type": "string",
								"summary": [
									{
										"type": "paragraph",
										"children": [
											{
												"type": "text",
												"value": "The URL with its scheme resolved"
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "jsx",
											"meta": null,
											"value": "const uri = \"ipfs://example\";\nconst url = storage.resolveScheme(uri);\nconsole.log(url);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L59"
				},
				{
					"kind": "function",
					"name": "upload",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Upload arbitrary file or JSON data using the configured decentralized storage system.\nAutomatically uploads any file data within JSON objects and replaces them with hashes."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "data",
									"type": "any",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Arbitrary file or JSON data to upload"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "T",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Options to pass through to the storage uploader class"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The URI of the uploaded data"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "jsx",
											"meta": null,
											"value": "// Upload an image\nlaunchImageLibrary({mediaType: 'photo'}, async response => {\n  if (response.assets?.[0]) {\n     const {fileName, type, uri} = response.assets[0];\n     if (!uri) {\n       throw new Error('No uri');\n     }\n     const resp = await storage.upload({\n       uri,\n       type,\n       name: fileName,\n     });\n   }\n });\nconst jsonUri = await storage.upload(json);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L142"
				},
				{
					"kind": "function",
					"name": "uploadBatch",
					"signatures": [
						{
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Batch upload arbitrary file or JSON data using the configured decentralized storage system.\nAutomatically uploads any file data within JSON objects and replaces them with hashes."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "data",
									"type": "any[]",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Array of arbitrary file or JSON data to upload"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"type": "T",
									"summary": [
										{
											"type": "paragraph",
											"children": [
												{
													"type": "text",
													"value": "Options to pass through to the storage uploader class"
												}
											]
										}
									],
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "Promise<string[]>",
								"summary": [
									{
										"type": "list",
										"ordered": false,
										"start": null,
										"spread": false,
										"children": [
											{
												"type": "listItem",
												"spread": false,
												"checked": null,
												"children": [
													{
														"type": "paragraph",
														"children": [
															{
																"type": "text",
																"value": "The URIs of the uploaded data"
															}
														]
													}
												]
											}
										]
									}
								]
							},
							"blockTags": [
								{
									"tag": "@example",
									"summary": [
										{
											"type": "code",
											"lang": "jsx",
											"meta": null,
											"value": "// Upload an image\nlaunchImageLibrary({mediaType: 'photo'}, async response => {\n  if (response.assets?.[0]) {\n     const {fileName, type, uri} = response.assets[0];\n     if (!uri) {\n       throw new Error('No uri');\n     }\n     const resp = await storage.upload({\n       uri,\n       type,\n       name: fileName,\n     });\n   }\n });\n\n// Upload an array of JSON objects\nconst objects = [\n { name: \"JSON 1\", text: \"Hello World\" },\n { name: \"JSON 2\", trait: \"Awesome\" },\n];\nconst jsonUris = await storage.uploadBatch(objects);"
										}
									]
								}
							]
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L180"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "clientId",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L26",
					"type": "string",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					}
				},
				{
					"kind": "variable",
					"name": "downloader",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L24",
					"type": "IStorageDownloader",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "gatewayUrls",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L25",
					"type": "GatewayUrls",
					"flags": {
						"isPrivate": true
					}
				},
				{
					"kind": "variable",
					"name": "uploader",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/core/storage/storage.ts#L23",
					"type": "IStorageUploader<T>",
					"flags": {
						"isPrivate": true
					}
				}
			],
			"typeParameters": [
				{
					"name": "T",
					"extendsType": "UploadOptions"
				}
			],
			"implements": ["IThirdwebStorage"]
		},
		{
			"kind": "class",
			"name": "TrustWallet",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/trust-wallet.ts#L7",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "TrustWallet"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L29"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "WCMeta"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/trust-wallet.ts#L18"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "TrustWallet"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/trust-wallet.ts#L8",
					"type": "\"trust\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/trust-wallet.ts#L9",
					"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "links",
							"type": "{ native: string, universal: string }"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "WalletConnect",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L7",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "WalletConnect"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L21"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L40"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnect"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "setWCLinks",
					"signatures": [
						{
							"parameters": [
								{
									"name": "links",
									"type": "{ native: string, universal: string }"
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L44"
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "links",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L19",
					"type": "{ native: string, universal: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "native",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "universal",
							"type": "string"
						}
					]
				},
				{
					"kind": "variable",
					"name": "storage",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L18",
					"type": "MMKV"
				},
				{
					"kind": "variable",
					"name": "id",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L8",
					"type": "\"WalletConnect\"",
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "meta",
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnect.ts#L9",
					"type": "{ iconURL: string, links: { native: string, universal: string }, name: string }",
					"typeDeclaration": [
						{
							"kind": "subtype",
							"name": "iconURL",
							"type": "string"
						},
						{
							"kind": "subtype",
							"name": "links",
							"type": "{ native: string, universal: string }"
						},
						{
							"kind": "subtype",
							"name": "name",
							"type": "string"
						}
					],
					"flags": {
						"isStatic": true
					}
				},
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "WalletConnectBase",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L28",
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "WalletConnectBase"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L29"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "WCMeta"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L60"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectBase"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		},
		{
			"kind": "class",
			"name": "WalletConnectV2",
			"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L82",
			"summary": [],
			"blockTags": [
				{
					"tag": "@deprecated",
					"summary": [
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "There's no longer the need to define V1/V2 for walletConnect."
								}
							]
						},
						{
							"type": "paragraph",
							"children": [
								{
									"type": "text",
									"value": "Use WalletConnectBase instead."
								}
							]
						}
					]
				}
			],
			"constructor": {
				"kind": "function",
				"name": "constructor",
				"signatures": [
					{
						"parameters": [
							{
								"name": "options",
								"type": "WC2Options"
							}
						],
						"returns": {
							"type": "WalletConnectV2"
						}
					}
				],
				"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L29"
			},
			"methods": [
				{
					"kind": "function",
					"name": "_onWCOpenWallet",
					"signatures": [
						{
							"parameters": [
								{
									"name": "uri",
									"type": "string",
									"flags": {
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "void"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L62"
				},
				{
					"kind": "function",
					"name": "addListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "cleanAsyncStorage",
					"signatures": [
						{
							"returns": {
								"type": "Promise<void>"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L49"
				},
				{
					"kind": "function",
					"name": "emit",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Calls each of the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "args",
									"type": "ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]",
									"flags": {
										"isExternal": true,
										"isRest": true
									}
								}
							],
							"returns": {
								"type": "boolean"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "eventNames",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return an array listing the events for which the emitter has registered\nlisteners."
										}
									]
								}
							],
							"returns": {
								"type": "keyof WalletEvents[]"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "getMeta",
					"signatures": [
						{
							"returns": {
								"type": "WCMeta"
							}
						}
					],
					"source": "https://github.com/thirdweb-dev/js/blob/8bd48f085/packages/react-native/src/evm/wallets/wallets/wallet-connect/WalletConnectBase.ts#L60"
				},
				{
					"kind": "function",
					"name": "listenerCount",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the number of listeners listening to a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "number"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "listeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Return the listeners registered for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								}
							],
							"returns": {
								"type": "Array<((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)>"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "off",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "on",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "once",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Add a one-time listener for a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				},
				{
					"kind": "function",
					"name": "removeAllListeners",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove all listeners, or those of the specified event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "keyof WalletEvents",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							}
						}
					]
				},
				{
					"kind": "function",
					"name": "removeListener",
					"signatures": [
						{
							"flags": {
								"isExternal": true
							},
							"summary": [
								{
									"type": "paragraph",
									"children": [
										{
											"type": "text",
											"value": "Remove the listeners of a given event."
										}
									]
								}
							],
							"parameters": [
								{
									"name": "event",
									"type": "T",
									"flags": {
										"isExternal": true
									}
								},
								{
									"name": "fn",
									"type": "((args : ArgumentMap<WalletEvents>[Extract<T, keyof WalletEvents>]) => void)",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "context",
									"type": "any",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								},
								{
									"name": "once",
									"type": "boolean",
									"flags": {
										"isExternal": true,
										"isOptional": true
									}
								}
							],
							"returns": {
								"type": "WalletConnectV2"
							},
							"typeParameters": [
								{
									"name": "T",
									"extendsType": "keyof WalletEvents"
								}
							]
						}
					]
				}
			],
			"properties": [
				{
					"kind": "variable",
					"name": "prefixed",
					"type": "(string) | (boolean)",
					"flags": {
						"isStatic": true,
						"isExternal": true
					}
				}
			]
		}
	]
}
