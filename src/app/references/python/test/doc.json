{
	"functions": [
		{
			"functionName": "dataclass",
			"functionParams": [
				{ "paramName": "cls", "paramType": "cls=None" },
				{ "paramName": "init", "paramType": "init=True" },
				{ "paramName": "repr", "paramType": "repr=True" },
				{ "paramName": "eq", "paramType": "eq=True" },
				{ "paramName": "order", "paramType": "order=False" },
				{ "paramName": "unsafe_hash", "paramType": "unsafe_hash=False" },
				{ "paramName": "frozen", "paramType": "frozen=False" }
			],
			"returnType": "<class 'inspect._empty'>",
			"comments": "Returns the same class as was passed in, with dunder methods\nadded based on the fields defined in the class.\n\nExamines PEP 526 __annotations__ to determine fields.\n\nIf init is true, an __init__() method is added to the class. If\nrepr is true, a __repr__() method is added. If order is true, rich\ncomparison dunder methods are added. If unsafe_hash is true, a\n__hash__() method function is added. If frozen is true, fields may\nnot be assigned to after instance creation."
		}
	],
	"types": [
		{
			"typeName": "ThirdwebSDK",
			"fields": [
				{
					"fieldName": "_ThirdwebSDK__contract_cache",
					"fieldType": "<class 'dict'>"
				},
				{
					"fieldName": "from_private_key",
					"fieldType": "<class 'staticmethod'>"
				}
			],
			"methods": [
				{
					"functionName": "get_nft_collection",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.nft_collection.NFTCollection'>",
					"comments": "Returns an NFT Collection contract SDK instance\n\n:param address: address of the NFT Collection contract\n:returns: NFT Collection contract SDK instance"
				},
				{
					"functionName": "get_edition",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.edition.Edition'>",
					"comments": "Returns an Edition contract SDK instance\n\n:param address: address of the Edition contract\n:returns: Edition contract SDK instance"
				},
				{
					"functionName": "get_token",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.token.Token'>",
					"comments": "Returns a Token contract SDK instance\n\n:param address: address of the Token contract\n:returns: Token contract SDK instance"
				},
				{
					"functionName": "get_marketplace",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.marketplace.Marketplace'>",
					"comments": "Returns a Marketplace contract SDK instance\n\n:param address: address of the Marketplace contract\n:returns: Marketplace contract SDK instance"
				},
				{
					"functionName": "get_nft_drop",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.nft_drop.NFTDrop'>",
					"comments": "Returns an NFT Drop contract SDK instance\n\n:param address: address of the NFT Drop contract\n:returns: NFT Drop contract SDK instance"
				},
				{
					"functionName": "get_edition_drop",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.edition_drop.EditionDrop'>",
					"comments": "Returns an Edition Drop contract SDK instance\n\n:param address: address of the Edition Drop contract\n:returns: Edition Drop contract SDK instance"
				},
				{
					"functionName": "get_multiwrap",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.multiwrap.Multiwrap'>",
					"comments": "Returns a multiwrap contract SDK instance\n\n:param address: address of the multiwrap contract\n:returns: multiwrap contract SDK instance"
				},
				{
					"functionName": "get_contract",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" }
					],
					"returnType": "<class 'thirdweb.contracts.custom.CustomContract'>",
					"comments": "Returns a custom contract SDK instance\n\n:param address: address of the custom contract\n:returns: custom contract SDK instance"
				},
				{
					"functionName": "get_contract_from_abi",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" },
						{ "paramName": "abi", "paramType": "abi: str" }
					],
					"returnType": "<class 'thirdweb.contracts.custom.CustomContract'>",
					"comments": "Returns a custom contract SDK instance given the contract ABI\n\n:param address: address of the custom contract\n:param abi: abi of the custom contract\n:returns: custom contract SDK instance"
				},
				{
					"functionName": "update_provider",
					"functionParams": [
						{ "paramName": "provider", "paramType": "provider: web3.main.Web3" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Update the provider instance used by the SDK.\n\n:param provider: web3 provider instance to use for getting on-chain data"
				},
				{
					"functionName": "update_signer",
					"functionParams": [
						{
							"paramName": "signer",
							"paramType": "signer: Optional[eth_account.signers.local.LocalAccount] = None"
						}
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Update the signer instance used by the SDK.\n\n:param signer: signer to use for sending transactions"
				},
				{
					"functionName": "_get_contract",
					"functionParams": [
						{ "paramName": "address", "paramType": "address: str" },
						{
							"paramName": "contract_type",
							"paramType": "contract_type: Union[Type[thirdweb.contracts.nft_collection.NFTCollection], Type[thirdweb.contracts.edition.Edition], Type[thirdweb.contracts.token.Token], Type[thirdweb.contracts.marketplace.Marketplace], Type[thirdweb.contracts.nft_drop.NFTDrop], Type[thirdweb.contracts.edition_drop.EditionDrop], Type[thirdweb.contracts.multiwrap.Multiwrap]]"
						}
					],
					"returnType": "typing.Union[thirdweb.contracts.nft_collection.NFTCollection, thirdweb.contracts.edition.Edition, thirdweb.contracts.token.Token, thirdweb.contracts.marketplace.Marketplace, thirdweb.contracts.nft_drop.NFTDrop, thirdweb.contracts.edition_drop.EditionDrop, thirdweb.contracts.multiwrap.Multiwrap]",
					"comments": null
				}
			],
			"comments": "The main entry point for the Thirdweb SDK."
		},
		{
			"typeName": "AuctionListing",
			"fields": [{ "fieldName": "type", "fieldType": "<enum 'ListingType'>" }],
			"methods": [],
			"comments": "AuctionListing(id: int, asset_contract_address: str, token_id: int, asset: thirdweb.types.nft.NFTMetadata, start_time_in_epoch_seconds: int, end_time_in_epoch_seconds: int, quantity: int, currency_contract_address: str, reserve_price: int, buyout_price: int, buyout_currency_value_per_token: thirdweb.types.currency.CurrencyValue, reserve_price_currency_value_per_token: thirdweb.types.currency.CurrencyValue, seller_address: str)"
		},
		{
			"typeName": "AuthenticationOptions",
			"fields": [
				{ "fieldName": "invalid_before", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "expiration_time", "fieldType": "<class 'NoneType'>" }
			],
			"methods": [],
			"comments": "AuthenticationOptions(invalid_before: Optional[datetime.datetime] = None, expiration_time: Optional[datetime.datetime] = None)"
		},
		{
			"typeName": "AuthenticationPayload",
			"fields": [],
			"methods": [],
			"comments": "AuthenticationPayload(payload: thirdweb.types.auth.AuthenticationPayloadData, signature: str)"
		},
		{
			"typeName": "AuthenticationPayloadData",
			"fields": [],
			"methods": [],
			"comments": "AuthenticationPayloadData(iss: str, sub: str, aud: str, exp: int, nbf: int, iat: int, jti: str)"
		},
		{
			"typeName": "ChainId",
			"fields": [
				{ "fieldName": "_member_names_", "fieldType": "<class 'list'>" },
				{ "fieldName": "_member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "_value2member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "MAINNET", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "RINKEBY", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "GOERLI", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "POLYGON", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "FANTOM", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "LOCALHOST", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "HARDHAT", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "AVALANCHE", "fieldType": "<enum 'ChainId'>" },
				{ "fieldName": "MUMBAI", "fieldType": "<enum 'ChainId'>" }
			],
			"methods": [
				{
					"functionName": "_generate_next_value_",
					"functionParams": [
						{ "paramName": "name", "paramType": "name" },
						{ "paramName": "start", "paramType": "start" },
						{ "paramName": "count", "paramType": "count" },
						{ "paramName": "last_values", "paramType": "last_values" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Generate the next value when not given.\n\nname: the name of the member\nstart: the initial start value or None\ncount: the number of existing members\nlast_value: the last value assigned or None"
				},
				{
					"functionName": "object",
					"functionParams": [],
					"returnType": "<class 'inspect._empty'>",
					"comments": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any."
				}
			],
			"comments": "An enumeration."
		},
		{
			"typeName": "ContractListing",
			"fields": [],
			"methods": [],
			"comments": "ContractListing(listing_id: int, token_owner: str, asset_contract: str, token_id: int, start_time: int, end_time: int, quantity: int, currency: str, reserve_price_per_token: int, buyout_price_per_token: int, token_type: int, listing_type: int)"
		},
		{
			"typeName": "ContractMetadataSchema",
			"fields": [
				{ "fieldName": "name", "fieldType": "<class 'str'>" },
				{ "fieldName": "description", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "image", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "external_link", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [
				{
					"functionName": "to_json",
					"functionParams": [],
					"returnType": "typing.Dict[str, typing.Any]",
					"comments": null
				}
			],
			"comments": "ContractMetadataSchema(name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "ContractOffer",
			"fields": [],
			"methods": [],
			"comments": "ContractOffer(listing_id: int, offeror: str, quantity_wanted: int, currency: str, price_per_token: int, expiration_timestamp: int)"
		},
		{
			"typeName": "ContractPlatformFeeSchema",
			"fields": [
				{
					"fieldName": "platform_fee_basis_points",
					"fieldType": "<class 'int'>"
				},
				{ "fieldName": "platform_fee_recipient", "fieldType": "<class 'str'>" }
			],
			"methods": [],
			"comments": "ContractPlatformFeeSchema(platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000')"
		},
		{
			"typeName": "ContractRoyaltySchema",
			"fields": [
				{
					"fieldName": "seller_fee_basis_points",
					"fieldType": "<class 'int'>"
				},
				{ "fieldName": "fee_recipient", "fieldType": "<class 'str'>" }
			],
			"methods": [],
			"comments": "ContractRoyaltySchema(seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000')"
		},
		{
			"typeName": "CurrencyValue",
			"fields": [],
			"methods": [],
			"comments": "CurrencyValue(name: str, symbol: str, decimals: int, value: int, display_value: float)"
		},
		{
			"typeName": "DirectListing",
			"fields": [{ "fieldName": "type", "fieldType": "<enum 'ListingType'>" }],
			"methods": [],
			"comments": "DirectListing(id: int, asset_contract_address: str, token_id: int, asset: thirdweb.types.nft.NFTMetadata, start_time_in_seconds: int, seconds_until_end: int, quantity: int, currency_contract_address: str, buyout_currency_value_per_token: thirdweb.types.currency.CurrencyValue, buyout_price: int, seller_address: str)"
		},
		{
			"typeName": "ERC1155Wrappable",
			"fields": [],
			"methods": [],
			"comments": "ERC1155Wrappable(contract_address: str, token_id: int, quantity: int)"
		},
		{
			"typeName": "ERC20Wrappable",
			"fields": [],
			"methods": [],
			"comments": "ERC20Wrappable(contract_address: str, quantity: float)"
		},
		{
			"typeName": "ERC721Wrappable",
			"fields": [],
			"methods": [],
			"comments": "ERC721Wrappable(contract_address: str, token_id: int)"
		},
		{
			"typeName": "EditionContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "EditionContractMetadata(trusted_forwarders: List[str] = <factory>, primary_sale_recipient: str = '0x0000000000000000000000000000000000000000', platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "EditionDropContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "EditionDropContractMetadata(merkle: Dict[str, str] = <factory>, trusted_forwarders: List[str] = <factory>, platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', primary_sale_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "EditionMetadata",
			"fields": [],
			"methods": [],
			"comments": "EditionMetadata(metadata: thirdweb.types.nft.NFTMetadata, supply: int)"
		},
		{
			"typeName": "EditionMetadataInput",
			"fields": [],
			"methods": [],
			"comments": "The metadata of an edition NFT to mint\n\n:param metadata: The metadata of the edition NFT\n:param supply: The supply of the edition NFT"
		},
		{
			"typeName": "EditionMetadataOwner",
			"fields": [],
			"methods": [],
			"comments": "EditionMetadataOwner(metadata: thirdweb.types.nft.NFTMetadata, supply: int, owner: str, quantity_owned: int)"
		},
		{
			"typeName": "Enum",
			"fields": [
				{ "fieldName": "_missing_", "fieldType": "<class 'classmethod'>" },
				{
					"fieldName": "name",
					"fieldType": "<class 'types.DynamicClassAttribute'>"
				},
				{
					"fieldName": "value",
					"fieldType": "<class 'types.DynamicClassAttribute'>"
				},
				{ "fieldName": "_member_names_", "fieldType": "<class 'list'>" },
				{ "fieldName": "_member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "_value2member_map_", "fieldType": "<class 'dict'>" }
			],
			"methods": [
				{
					"functionName": "_generate_next_value_",
					"functionParams": [
						{ "paramName": "name", "paramType": "name" },
						{ "paramName": "start", "paramType": "start" },
						{ "paramName": "count", "paramType": "count" },
						{ "paramName": "last_values", "paramType": "last_values" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Generate the next value when not given.\n\nname: the name of the member\nstart: the initial start value or None\ncount: the number of existing members\nlast_value: the last value assigned or None"
				},
				{
					"functionName": "object",
					"functionParams": [],
					"returnType": "<class 'inspect._empty'>",
					"comments": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any."
				}
			],
			"comments": "Generic enumeration.\n\nDerive from this class to define new enumerations."
		},
		{
			"typeName": "EventQueryOptions",
			"fields": [
				{ "fieldName": "from_block", "fieldType": "<class 'str'>" },
				{ "fieldName": "to_block", "fieldType": "<class 'str'>" }
			],
			"methods": [],
			"comments": "EventQueryOptions(filters: Dict[str, Any] = <factory>, from_block: Union[Literal['latest', 'earliest', 'pending'], BlockNumber, Hash32, HexStr, hexbytes.main.HexBytes, int, NoneType] = 'earliest', to_block: Union[Literal['latest', 'earliest', 'pending'], BlockNumber, Hash32, HexStr, hexbytes.main.HexBytes, int, NoneType] = 'latest')"
		},
		{
			"typeName": "EventStatus",
			"fields": [
				{ "fieldName": "_member_names_", "fieldType": "<class 'list'>" },
				{ "fieldName": "_member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "_value2member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "SUBMITTED", "fieldType": "<enum 'EventStatus'>" },
				{ "fieldName": "COMPLETED", "fieldType": "<enum 'EventStatus'>" }
			],
			"methods": [
				{
					"functionName": "_generate_next_value_",
					"functionParams": [
						{ "paramName": "name", "paramType": "name" },
						{ "paramName": "start", "paramType": "start" },
						{ "paramName": "count", "paramType": "count" },
						{ "paramName": "last_values", "paramType": "last_values" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Generate the next value when not given.\n\nname: the name of the member\nstart: the initial start value or None\ncount: the number of existing members\nlast_value: the last value assigned or None"
				},
				{
					"functionName": "object",
					"functionParams": [],
					"returnType": "<class 'inspect._empty'>",
					"comments": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any."
				}
			],
			"comments": "An enumeration."
		},
		{
			"typeName": "GasSettings",
			"fields": [
				{ "fieldName": "max_price_in_gwei", "fieldType": "<class 'int'>" },
				{ "fieldName": "speed", "fieldType": "<enum 'GasSpeed'>" }
			],
			"methods": [],
			"comments": "The gas settings for the SDK.\n\n:param max_price_in_gwei: maximum gas price in gwei, defaults to 300\n:param speed: gas speed to use, defaults to \"fastest\""
		},
		{
			"typeName": "GasSpeed",
			"fields": [
				{ "fieldName": "_member_names_", "fieldType": "<class 'list'>" },
				{ "fieldName": "_member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "_value2member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "STANDARD", "fieldType": "<enum 'GasSpeed'>" },
				{ "fieldName": "FAST", "fieldType": "<enum 'GasSpeed'>" },
				{ "fieldName": "FASTEST", "fieldType": "<enum 'GasSpeed'>" }
			],
			"methods": [
				{
					"functionName": "_generate_next_value_",
					"functionParams": [
						{ "paramName": "name", "paramType": "name" },
						{ "paramName": "start", "paramType": "start" },
						{ "paramName": "count", "paramType": "count" },
						{ "paramName": "last_values", "paramType": "last_values" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Generate the next value when not given.\n\nname: the name of the member\nstart: the initial start value or None\ncount: the number of existing members\nlast_value: the last value assigned or None"
				},
				{
					"functionName": "object",
					"functionParams": [],
					"returnType": "<class 'inspect._empty'>",
					"comments": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any."
				}
			],
			"comments": "An enumeration."
		},
		{
			"typeName": "ListingType",
			"fields": [
				{ "fieldName": "_member_names_", "fieldType": "<class 'list'>" },
				{ "fieldName": "_member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "_value2member_map_", "fieldType": "<class 'dict'>" },
				{ "fieldName": "DIRECT", "fieldType": "<enum 'ListingType'>" },
				{ "fieldName": "AUCTION", "fieldType": "<enum 'ListingType'>" }
			],
			"methods": [
				{
					"functionName": "_generate_next_value_",
					"functionParams": [
						{ "paramName": "name", "paramType": "name" },
						{ "paramName": "start", "paramType": "start" },
						{ "paramName": "count", "paramType": "count" },
						{ "paramName": "last_values", "paramType": "last_values" }
					],
					"returnType": "<class 'inspect._empty'>",
					"comments": "Generate the next value when not given.\n\nname: the name of the member\nstart: the initial start value or None\ncount: the number of existing members\nlast_value: the last value assigned or None"
				},
				{
					"functionName": "object",
					"functionParams": [],
					"returnType": "<class 'inspect._empty'>",
					"comments": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any."
				}
			],
			"comments": "An enumeration."
		},
		{
			"typeName": "LoginOptions",
			"fields": [
				{ "fieldName": "nonce", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "expiration_time", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "chain_id", "fieldType": "<class 'NoneType'>" }
			],
			"methods": [],
			"comments": "LoginOptions(nonce: Optional[str] = None, expiration_time: Optional[datetime.datetime] = None, chain_id: Optional[int] = None)"
		},
		{
			"typeName": "LoginPayload",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "LoginPayload(payload: thirdweb.types.auth.LoginPayloadData, signature: str)"
		},
		{
			"typeName": "LoginPayloadData",
			"fields": [
				{ "fieldName": "chain_id", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "LoginPayloadData(domain: str, address: str, nonce: str, expiration_time: datetime.datetime, chain_id: Optional[int] = None)"
		},
		{
			"typeName": "MarketplaceContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "MarketplaceContractMetadata(trusted_forwarders: List[str] = <factory>, platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "MarketplaceFilter",
			"fields": [
				{ "fieldName": "start", "fieldType": "<class 'int'>" },
				{ "fieldName": "count", "fieldType": "<class 'int'>" },
				{ "fieldName": "seller", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "token_contract", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "token_id", "fieldType": "<class 'NoneType'>" }
			],
			"methods": [],
			"comments": "MarketplaceFilter(start: int = 0, count: int = 100, seller: Optional[str] = None, token_contract: Optional[str] = None, token_id: Optional[int] = None)"
		},
		{
			"typeName": "MultiwrapContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "MultiwrapContractMetadata(trusted_forwarders: List[str] = <factory>, seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "NFTCollectionContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "NFTCollectionContractMetadata(trusted_forwarders: List[str] = <factory>, primary_sale_recipient: str = '0x0000000000000000000000000000000000000000', platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "NFTDropContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "NFTDropContractMetadata(merkle: Dict[str, str] = <factory>, trusted_forwarders: List[str] = <factory>, platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', primary_sale_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', seller_fee_basis_points: int = 0, fee_recipient: str = '0x0000000000000000000000000000000000000000', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "NFTMetadata",
			"fields": [
				{ "fieldName": "description", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "image", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "external_url", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "animation_url", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "background_color", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "properties", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "attributes", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "NFTMetadata(id: int, uri: str, name: str, description: Optional[str] = None, image: Optional[str] = None, external_url: Optional[str] = None, animation_url: Optional[str] = None, background_color: Optional[str] = None, properties: Optional[Dict[Any, Any]] = None, attributes: Optional[Dict[str, Any]] = None)"
		},
		{
			"typeName": "NFTMetadataInput",
			"fields": [
				{ "fieldName": "description", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "image", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "external_url", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "animation_url", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "background_color", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "properties", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "attributes", "fieldType": "<class 'NoneType'>" },
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [
				{
					"functionName": "to_json",
					"functionParams": [],
					"returnType": "typing.Dict[str, typing.Any]",
					"comments": null
				}
			],
			"comments": "The metadata of an NFT to mint\n\nYou can use the NFTMetadataInput.from_json(json) method to create\nan instance of this class from a dictionary.\n\n:param name: The name of the NFT\n:param description: The optional description of the NFT\n:param image: The optional image of the NFT\n:param external_url: The optional external URL of the NFT\n:param animation_url: The optional animation URL of the NFT\n:param background_color: The optional background color of the NFT\n:param properties: The optional properties of the NFT"
		},
		{
			"typeName": "NFTMetadataOwner",
			"fields": [],
			"methods": [],
			"comments": "NFTMetadataOwner(metadata: thirdweb.types.nft.NFTMetadata, owner: str)"
		},
		{
			"typeName": "NewAuctionListing",
			"fields": [{ "fieldName": "type", "fieldType": "<class 'str'>" }],
			"methods": [],
			"comments": "NewAuctionListing(asset_contract_address: str, token_id: int, start_time_in_seconds: int, listing_duration_in_seconds: int, quantity: int, currency_contract_address: str, reserve_price_per_token: int, buyout_price_per_token: int)"
		},
		{
			"typeName": "NewDirectListing",
			"fields": [{ "fieldName": "type", "fieldType": "<class 'str'>" }],
			"methods": [],
			"comments": "NewDirectListing(asset_contract_address: str, token_id: int, start_time_in_seconds: int, listing_duration_in_seconds: int, quantity: int, currency_contract_address: str, buyout_price_per_token: int)"
		},
		{
			"typeName": "Offer",
			"fields": [],
			"methods": [],
			"comments": "Offer(listing_id: int, buyer_address: str, quantity_desired: int, price_per_token: int, currency_value: thirdweb.types.currency.CurrencyValue, currency_contract_address: str)"
		},
		{
			"typeName": "QueryAllParams",
			"fields": [
				{ "fieldName": "start", "fieldType": "<class 'int'>" },
				{ "fieldName": "count", "fieldType": "<class 'int'>" }
			],
			"methods": [],
			"comments": "QueryAllParams(start: int = 0, count: int = 100)"
		},
		{
			"typeName": "ReadOnlySettings",
			"fields": [
				{ "fieldName": "rpc_url", "fieldType": "<class 'str'>" },
				{ "fieldName": "chain_id", "fieldType": "<class 'NoneType'>" }
			],
			"methods": [],
			"comments": "The read-only RPC settings for the SDK.\n\n:param rpc_url: URL of the RPC\n:param chain_id: optional chain ID to use for the RPC"
		},
		{
			"typeName": "SDKOptions",
			"fields": [
				{ "fieldName": "secret_key", "fieldType": "<class 'NoneType'>" },
				{
					"fieldName": "read_only_settings",
					"fieldType": "<class 'NoneType'>"
				},
				{
					"fieldName": "gas_settings",
					"fieldType": "<class 'thirdweb.types.sdk.GasSettings'>"
				}
			],
			"methods": [],
			"comments": "Optional settings to configure the SDK\n\n:param read_only_settings: optional read-only RPC settings\n:param gas_settings: gas settings"
		},
		{
			"typeName": "SignatureEvent",
			"fields": [],
			"methods": [],
			"comments": "SignatureEvent(status: thirdweb.constants.events.EventStatus, message: str, signature: Union[str, bytes])"
		},
		{
			"typeName": "TokenContractMetadata",
			"fields": [
				{ "fieldName": "from_json", "fieldType": "<class 'staticmethod'>" }
			],
			"methods": [],
			"comments": "TokenContractMetadata(platform_fee_basis_points: int = 0, platform_fee_recipient: str = '0x0000000000000000000000000000000000000000', trusted_forwarders: List[str] = <factory>, primary_sale_recipient: str = '0x0000000000000000000000000000000000000000', symbol: str = '', name: str = '', description: Optional[str] = None, image: Union[str, TextIO, BinaryIO, NoneType] = None, external_link: Optional[str] = None)"
		},
		{
			"typeName": "TokensToWrap",
			"fields": [],
			"methods": [],
			"comments": "TokensToWrap(erc20_tokens: List[thirdweb.types.multiwrap.ERC20Wrappable] = <factory>, erc721_tokens: List[thirdweb.types.multiwrap.ERC721Wrappable] = <factory>, erc1155_tokens: List[thirdweb.types.multiwrap.ERC1155Wrappable] = <factory>)"
		},
		{
			"typeName": "TxEvent",
			"fields": [],
			"methods": [],
			"comments": "TxEvent(status: thirdweb.constants.events.EventStatus, tx_hash: str)"
		},
		{
			"typeName": "VerifyOptions",
			"fields": [
				{ "fieldName": "chain_id", "fieldType": "<class 'NoneType'>" }
			],
			"methods": [],
			"comments": "VerifyOptions(chain_id: Optional[int] = None)"
		},
		{
			"typeName": "WrappedTokens",
			"fields": [],
			"methods": [],
			"comments": "WrappedTokens(erc20_tokens: List[thirdweb.types.multiwrap.ERC20Wrappable] = <factory>, erc721_tokens: List[thirdweb.types.multiwrap.ERC721Wrappable] = <factory>, erc1155_tokens: List[thirdweb.types.multiwrap.ERC1155Wrappable] = <factory>)"
		}
	]
}
