{
	"functions": [
		{
			"functionName": "newERC721",
			"functionParams": [
				{
					"paramName": "provider",
					"paramType": "*ethclient.Client"
				},
				{
					"paramName": "address",
					"paramType": "common.Address"
				},
				{
					"paramName": "privateKey",
					"paramType": "string"
				},
				{
					"paramName": "storage",
					"paramType": "storage"
				}
			],
			"returnType": "*ERC721",
			"comments": ""
		},
		{
			"functionName": "Get",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "*NFTMetadataOwner",
			"comments": "Get an NFT\n\n@extension: ERC721\n\ntokenId: token ID of the token to get the metadata for\n\nreturns: the metadata for the NFT and its owner\n\nExample\n\n\tnft, err := contract.ERC721.Get(context.Background(), 0)\n\towner := nft.Owner\n\tname := nft.Metadata.Name\n"
		},
		{
			"functionName": "GetAll",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "[]*NFTMetadataOwner",
			"comments": "Get all NFTs\n\n@extension: ERC721Supply | ERC721Enumerable\n\nreturns: the metadata of all the NFTs on this contract\n\nExample\n\n\tnfts, err := contract.ERC721.GetAll(context.Background())\n\townerOne := nfts[0].Owner\n\tnameOne := nfts[0].Metadata.Name\n"
		},
		{
			"functionName": "GetTotalCount",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "int",
			"comments": "Get the total number of NFTs\n\n@extension: ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimConditionsV2\n\nreturns: the total number of NFTs on this contract\n\nExample\n\n\ttotalCount, err := contract.ERC721.GetTotalCount(context.Background())\n"
		},
		{
			"functionName": "GetAllClaimed",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "[]*NFTMetadataOwner",
			"comments": "Get all claimed NFTs\n\nreturns: a list of the metadatas of the claimed NFTs\n\nExample\n\n\tclaimedNfts, err := contract.ERC721.GetAllClaimed(context.Background())\n\tfirstOwner := claimedNfts[0].Owner\n"
		},
		{
			"functionName": "GetAllUnclaimed",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "[]*NFTMetadata",
			"comments": "Get all unclaimed NFTs\n\nreturns: a list of the metadatas of the unclaimed NFTs\n\nExample\n\n\tunclaimedNfts, err := contract.ERC721.GetAllUnclaimed(context.Background())\n\tfirstNftName := unclaimedNfts[0].Name\n"
		},
		{
			"functionName": "TotalClaimedSupply",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "int",
			"comments": "Get the number of claimed NFTs\n\n@extension: ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimConditionsV2\n\nExample\n\n\ttotalClaimed, err := contract.ERC721.TotalClaimedSupply(context.Background())\n"
		},
		{
			"functionName": "TotalUnclaimedSupply",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "int",
			"comments": "Get the number of unclaimed NFTs\n\n@extension: ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimConditionsV2\n\nExample\n\n\ttotalUnclaimed, err := contract.ERC721.TotalUnclaimedSupply(context.Background())\n"
		},
		{
			"functionName": "OwnerOf",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "string",
			"comments": "Get the owner of an NFT\n\n@extension: ERC721\n\ntokenId: the token ID of the NFT to get the owner of\n\nreturns: the owner of the NFT\n\nExample\n\n\ttokenId := 0\n\towner, err := contract.ERC721.OwnerOf(context.Background(), tokenId)\n"
		},
		{
			"functionName": "TotalSupply",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "int",
			"comments": "Get the total number of NFTs\n\n@extension: ERC721\n\nreturns: the supply of NFTs on this contract\n\nExample\n\n\tsupply, err := contract.ERC721.TotalSupply(context.Background)\n"
		},
		{
			"functionName": "Balance",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				}
			],
			"returnType": "int",
			"comments": "Get NFT balance\n\n@extension: ERC721\n\nreturns: the number of NFTs on this contract owned by the connected wallet\n\nExample\n\n\tbalance, err := contract.ERC721.Balance(context.Background())\n"
		},
		{
			"functionName": "BalanceOf",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "address",
					"paramType": "string"
				}
			],
			"returnType": "int",
			"comments": "Get NFT balance of a specific wallet\n\n@extension: ERC721\n\naddress: the address of the wallet to get the NFT balance of\n\nreturns: the number of NFTs on this contract owned by the specified wallet\n\nExample\n\n\taddress := \"{{wallet_address}}\"\n\tbalance, err := contract.ERC721.BalanceOf(context.Background(), address)\n"
		},
		{
			"functionName": "IsApproved",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "owner",
					"paramType": "string"
				},
				{
					"paramName": "operator",
					"paramType": "string"
				}
			],
			"returnType": "bool",
			"comments": "Check NFT approval\n\n@extension: ERC721\n\naddress: the address whose assets are to be checked\n\noperator: the address of the operator to check\n\nreturns: true if the operator is approved for all operations of the assets, otherwise false\n\nExample\n\n\towner := \"{{wallet_address}}\"\n\toperator := \"0x...\"\n\n\tisApproved, err := contract.ERC721.IsApproved(ctx, owner, operator)\n"
		},
		{
			"functionName": "GetClaimInfo",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "address",
					"paramType": "string"
				}
			],
			"returnType": "*ClaimInfo",
			"comments": ""
		},
		{
			"functionName": "GetClaimIneligibilityReasons",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				},
				{
					"paramName": "addressToCheck",
					"paramType": "string"
				}
			],
			"returnType": "[]ClaimEligibility",
			"comments": ""
		},
		{
			"functionName": "Transfer",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "to",
					"paramType": "string"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Transfer an NFT\n\n@extension: ERC721\n\nto: wallet address to transfer the tokens to\n\ntokenId: the token ID of the NFT to transfer\n\nreturns: the transaction of the NFT transfer\n\nExample\n\n\tto := \"0x...\"\n\ttokenId := 0\n\n\ttx, err := contract.ERC721.Transfer(context.Background(), to, tokenId)\n"
		},
		{
			"functionName": "Burn",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Burna an NFT\n\n@extension: ERC721Burnable\n\ntokenId: tokenID of the token to burn\n\nreturns: the transaction receipt of the burn\n\nExample\n\n\ttokenId := 0\n\ttx, err := contract.ERC721.Burn(context.Background(), tokenId)\n"
		},
		{
			"functionName": "SetApprovalForAll",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "operator",
					"paramType": "string"
				},
				{
					"paramName": "approved",
					"paramType": "bool"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Set approval for all NFTs\n\n@extension: ERC721\n\naddress: the address whose assets are to be approved\n\noperator: the address of the operator to set the approval for\n\napproved: true if the operator is approved for all operations of the assets, otherwise false\n\nreturns: the transaction receipt of the approval\n\nExample\n\n\toperator := \"{{wallet_address}}\"\n\tapproved := true\n\n\ttx, err := contract.ERC721.SetApprovalForAll(context.Background(), operator, approved)\n"
		},
		{
			"functionName": "SetApprovalForToken",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "operator",
					"paramType": "string"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Set approval for a specific NFT\n\n@extension: ERC721\n\noperator: the address of the operator to approve\n\ntokenId: the token ID of the NFT to approve\n\nreturns: the transaction receipt of the approval\n\nExample\n\n\toperator := \"{{wallet_address}}\"\n\tapproved := \"0x...\"\n\ttokenId := 0\n\n\ttx, err := contract.ERC721.SetApprovalForToken(context.Background(), operator, approved, tokenId)\n"
		},
		{
			"functionName": "Mint",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "metadata",
					"paramType": "*NFTMetadataInput"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Mint an NFT\n\n@extension: ERC721Mintable\n\nmetadata: metadata of the NFT to mint\n\nreturns: the transaction receipt of the mint\n\nExample\n\n\timage, err := os.Open(\"path/to/image.jpg\")\n\tdefer image.Close()\n\n\tmetadata := \u0026thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t\tImage: image,\n\t}\n\n\ttx, err := contract.ERC721.Mint(context.Background(), metadata)\n"
		},
		{
			"functionName": "MintTo",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "address",
					"paramType": "string"
				},
				{
					"paramName": "metadata",
					"paramType": "*NFTMetadataInput"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Mint an NFT to a specific wallet\n\n@extension: ERC721Mintable\n\naddress: the wallet address to mint to\n\nmetadata: metadata of the NFT to mint\n\nreturns: the transaction receipt of the mint\n\nExample\n\n\timage, err := os.Open(\"path/to/image.jpg\")\n\tdefer image.Close()\n\n\tmetadata := \u0026thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t\tImage: image,\n\t}\n\n\ttx, err := contract.ERC721.MintTo(context.Background(), \"{{wallet_address}}\", metadata)\n"
		},
		{
			"functionName": "MintBatch",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "metadatas",
					"paramType": "[]*NFTMetadataInput"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Mint many NFTs\n\n@extension: ERC721BatchMintable\n\nmetadatas: list of metadata of the NFTs to mint\n\nreturns: the transaction receipt of the mint\n\nExample\n\n\tmetadatas := []*thirdweb.NFTMetadataInput{\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t}\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT 2\",\n\t\t\tDescription: \"This is also a cool NFT\",\n\t\t}\n\t}\n\n\ttx, err := contract.ERC721.MintBatchTo(context.Background(), metadatas)\n"
		},
		{
			"functionName": "MintBatchTo",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "address",
					"paramType": "string"
				},
				{
					"paramName": "metadatas",
					"paramType": "[]*NFTMetadataInput"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Mint many NFTs to a specific wallet\n\n@extension: ERC721BatchMintable\n\nto: the wallet address to mint to\n\nmetadatas: list of metadata of the NFTs to mint\n\nreturns: the transaction receipt of the mint\n\nExample\n\n\tmetadatas := []*thirdweb.NFTMetadataInput{\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t}\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT 2\",\n\t\t\tDescription: \"This is also a cool NFT\",\n\t\t}\n\t}\n\n\ttx, err := contract.ERC721.MintBatchTo(context.Background(), \"{{wallet_address}}\", metadatas)\n"
		},
		{
			"functionName": "CreateBatch",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "metadatas",
					"paramType": "[]*NFTMetadataInput"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Lazy mint NFTs\n\n@extension: ERC721LazyMintable\n\nmetadatas: a list of the metadatas of the NFTs to create\n\nreturns: the transaction receipt of the batch creation\n\nExample\n\n\timage0, err := os.Open(\"path/to/image/0.jpg\")\n\tdefer image0.Close()\n\n\timage1, err := os.Open(\"path/to/image/1.jpg\")\n\tdefer image1.Close()\n\n\tmetadatas := []*thirdweb.NFTMetadataInput{\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t\tImage: image1\n\t\t}\n\t\t\u0026thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT 2\",\n\t\t\tDescription: \"This is also a cool NFT\",\n\t\t\tImage: image2\n\t\t}\n\t}\n\n\ttx, err := contract.ERC721.CreateBatch(context.Background(), metadatas)\n"
		},
		{
			"functionName": "Claim",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Claim an NFT\n\n@extension: ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimConditionsV2\n\nquantity: the number of NFTs to claim\n\nreturns: the transaction receipt of the claim\n\nExample\n\n\tquantity = 1\n\n\ttx, err := contract.ERC721.Claim(context.Background(), quantity)\n"
		},
		{
			"functionName": "ClaimTo",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "destinationAddress",
					"paramType": "string"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				}
			],
			"returnType": "*types.Transaction",
			"comments": "Claim NFTs to a specific wallet\n\n@extension: ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimConditionsV2\n\ndestinationAddress: the address of the wallet to claim the NFTs to\n\nquantity: the number of NFTs to claim\n\nreturns: the transaction receipt of the claim\n\nExample\n\n\taddress := \"{{wallet_address}}\"\n\tquantity = 1\n\n\ttx, err := contract.ERC721.ClaimTo(context.Background(), address, quantity)\n"
		},
		{
			"functionName": "PrepareClaimTo",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "destinationAddress",
					"paramType": "string"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				}
			],
			"returnType": "*PreparedClaimTo",
			"comments": ""
		},
		{
			"functionName": "GetClaimArguments",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "destinationAddress",
					"paramType": "string"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				}
			],
			"returnType": "*ClaimArguments",
			"comments": ""
		},
		{
			"functionName": "getTokenMetadata",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "tokenId",
					"paramType": "int"
				}
			],
			"returnType": "*NFTMetadata",
			"comments": ""
		},
		{
			"functionName": "fetchNFTsByTokenId",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "tokenIds",
					"paramType": "[]*big.Int"
				}
			],
			"returnType": "[]*NFTMetadataOwner",
			"comments": ""
		},
		{
			"functionName": "prepareClaim",
			"functionParams": [
				{
					"paramName": "ctx",
					"paramType": "context.Context"
				},
				{
					"paramName": "addressToClaim",
					"paramType": "string"
				},
				{
					"paramName": "quantity",
					"paramType": "int"
				},
				{
					"paramName": "handleApproval",
					"paramType": "bool"
				}
			],
			"returnType": "*ClaimVerification",
			"comments": ""
		}
	],
	"types": [
		{
			"typeName": "ERC721",
			"fields": [
				{
					"fieldName": "Token",
					"fieldType": "*abi.TokenERC721"
				},
				{
					"fieldName": "Drop",
					"fieldType": "*abi.DropERC721"
				},
				{
					"fieldName": "helper",
					"fieldType": "*contractHelper"
				},
				{
					"fieldName": "storage",
					"fieldType": "storage"
				},
				{
					"fieldName": "ClaimConditions",
					"fieldType": "*NFTDropClaimConditions"
				}
			],
			"methods": null,
			"comments": ""
		},
		{
			"typeName": "NFTResult",
			"fields": [
				{
					"fieldName": "nft",
					"fieldType": "*NFTMetadataOwner"
				},
				{
					"fieldName": "err",
					"fieldType": "error"
				}
			],
			"methods": null,
			"comments": ""
		}
	]
}
